# Generated from Expression.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,163,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,3,11,65,8,11,1,11,1,11,1,12,3,12,
        70,8,12,1,12,3,12,73,8,12,1,12,1,12,1,12,1,12,3,12,79,8,12,1,12,
        3,12,82,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,93,
        8,13,1,14,3,14,96,8,14,1,14,3,14,99,8,14,1,14,5,14,102,8,14,10,14,
        12,14,105,9,14,1,15,4,15,108,8,15,11,15,12,15,109,1,16,1,16,1,16,
        1,16,5,16,116,8,16,10,16,12,16,119,9,16,1,16,1,16,1,16,1,16,1,16,
        5,16,126,8,16,10,16,12,16,129,9,16,1,16,3,16,132,8,16,1,17,1,17,
        1,17,1,17,5,17,138,8,17,10,17,12,17,141,9,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,5,18,152,8,18,10,18,12,18,155,9,18,1,18,
        3,18,158,8,18,1,18,1,18,1,19,1,19,1,139,0,20,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,1,0,8,2,0,69,69,101,101,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,34,34,92,92,2,0,39,
        39,92,92,3,0,10,10,13,13,124,124,3,0,10,10,13,13,63,63,179,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,
        0,3,43,1,0,0,0,5,45,1,0,0,0,7,47,1,0,0,0,9,49,1,0,0,0,11,51,1,0,
        0,0,13,53,1,0,0,0,15,55,1,0,0,0,17,57,1,0,0,0,19,59,1,0,0,0,21,61,
        1,0,0,0,23,64,1,0,0,0,25,69,1,0,0,0,27,92,1,0,0,0,29,95,1,0,0,0,
        31,107,1,0,0,0,33,131,1,0,0,0,35,133,1,0,0,0,37,147,1,0,0,0,39,161,
        1,0,0,0,41,42,5,43,0,0,42,2,1,0,0,0,43,44,5,45,0,0,44,4,1,0,0,0,
        45,46,5,42,0,0,46,6,1,0,0,0,47,48,5,47,0,0,48,8,1,0,0,0,49,50,5,
        37,0,0,50,10,1,0,0,0,51,52,5,40,0,0,52,12,1,0,0,0,53,54,5,41,0,0,
        54,14,1,0,0,0,55,56,5,91,0,0,56,16,1,0,0,0,57,58,5,44,0,0,58,18,
        1,0,0,0,59,60,5,93,0,0,60,20,1,0,0,0,61,62,5,46,0,0,62,22,1,0,0,
        0,63,65,5,45,0,0,64,63,1,0,0,0,64,65,1,0,0,0,65,66,1,0,0,0,66,67,
        3,31,15,0,67,24,1,0,0,0,68,70,5,45,0,0,69,68,1,0,0,0,69,70,1,0,0,
        0,70,72,1,0,0,0,71,73,3,31,15,0,72,71,1,0,0,0,72,73,1,0,0,0,73,74,
        1,0,0,0,74,75,5,46,0,0,75,81,3,31,15,0,76,78,7,0,0,0,77,79,5,45,
        0,0,78,77,1,0,0,0,78,79,1,0,0,0,79,80,1,0,0,0,80,82,3,31,15,0,81,
        76,1,0,0,0,81,82,1,0,0,0,82,26,1,0,0,0,83,84,5,116,0,0,84,85,5,114,
        0,0,85,86,5,117,0,0,86,93,5,101,0,0,87,88,5,102,0,0,88,89,5,97,0,
        0,89,90,5,108,0,0,90,91,5,115,0,0,91,93,5,101,0,0,92,83,1,0,0,0,
        92,87,1,0,0,0,93,28,1,0,0,0,94,96,5,94,0,0,95,94,1,0,0,0,95,96,1,
        0,0,0,96,98,1,0,0,0,97,99,7,1,0,0,98,97,1,0,0,0,99,103,1,0,0,0,100,
        102,7,2,0,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,
        104,1,0,0,0,104,30,1,0,0,0,105,103,1,0,0,0,106,108,7,3,0,0,107,106,
        1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,32,1,
        0,0,0,111,117,5,34,0,0,112,113,5,92,0,0,113,116,9,0,0,0,114,116,
        8,4,0,0,115,112,1,0,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,
        1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,132,
        5,34,0,0,121,127,5,39,0,0,122,123,5,92,0,0,123,126,9,0,0,0,124,126,
        8,5,0,0,125,122,1,0,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,
        1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,132,
        5,39,0,0,131,111,1,0,0,0,131,121,1,0,0,0,132,34,1,0,0,0,133,134,
        5,47,0,0,134,135,5,42,0,0,135,139,1,0,0,0,136,138,9,0,0,0,137,136,
        1,0,0,0,138,141,1,0,0,0,139,140,1,0,0,0,139,137,1,0,0,0,140,142,
        1,0,0,0,141,139,1,0,0,0,142,143,5,42,0,0,143,144,5,47,0,0,144,145,
        1,0,0,0,145,146,6,17,0,0,146,36,1,0,0,0,147,148,5,47,0,0,148,149,
        5,47,0,0,149,153,1,0,0,0,150,152,8,6,0,0,151,150,1,0,0,0,152,155,
        1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,157,1,0,0,0,155,153,
        1,0,0,0,156,158,7,7,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,159,
        1,0,0,0,159,160,6,18,0,0,160,38,1,0,0,0,161,162,9,0,0,0,162,40,1,
        0,0,0,20,0,64,69,72,78,81,92,95,98,101,103,109,115,117,125,127,131,
        139,153,157,1,6,0,0
    ]

class ExpressionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    ELONG = 12
    EDOUBLE = 13
    EBoolean = 14
    ID = 15
    INT = 16
    STRING = 17
    ML_COMMENT = 18
    SL_COMMENT = 19
    ANY_OTHER = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'['", "','", 
            "']'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "ELONG", "EDOUBLE", "EBoolean", "ID", "INT", "STRING", "ML_COMMENT", 
            "SL_COMMENT", "ANY_OTHER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "ELONG", "EDOUBLE", "EBoolean", 
                  "ID", "INT", "STRING", "ML_COMMENT", "SL_COMMENT", "ANY_OTHER" ]

    grammarFileName = "Expression.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


