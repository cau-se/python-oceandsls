# Generated from /home/sgu/IdeaProjects/antlr4-python/grammars/dev/KotlinExample/KotlinParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,170,2661,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        1,0,5,0,298,8,0,10,0,12,0,301,9,0,1,0,1,0,5,0,305,8,0,10,0,12,0,
        308,9,0,1,0,1,0,4,0,312,8,0,11,0,12,0,313,1,0,3,0,317,8,0,5,0,319,
        8,0,10,0,12,0,322,9,0,3,0,324,8,0,1,0,1,0,1,1,5,1,329,8,1,10,1,12,
        1,332,9,1,1,1,1,1,5,1,336,8,1,10,1,12,1,339,9,1,1,1,1,1,4,1,343,
        8,1,11,1,12,1,344,1,1,3,1,348,8,1,5,1,350,8,1,10,1,12,1,353,9,1,
        3,1,355,8,1,1,1,1,1,1,2,3,2,360,8,2,1,2,1,2,1,2,1,3,4,3,366,8,3,
        11,3,12,3,367,1,4,1,4,1,4,1,4,4,4,374,8,4,11,4,12,4,375,1,4,1,4,
        1,4,3,4,381,8,4,1,4,3,4,384,8,4,4,4,386,8,4,11,4,12,4,387,1,5,3,
        5,391,8,5,1,5,1,5,1,5,3,5,396,8,5,3,5,398,8,5,1,6,5,6,401,8,6,10,
        6,12,6,404,9,6,1,7,1,7,1,7,1,7,1,7,3,7,411,8,7,1,7,3,7,414,8,7,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,424,8,9,1,10,3,10,427,8,10,1,10,
        1,10,5,10,431,8,10,10,10,12,10,434,9,10,1,10,1,10,5,10,438,8,10,
        10,10,12,10,441,9,10,1,10,3,10,444,8,10,1,10,5,10,447,8,10,10,10,
        12,10,450,9,10,1,10,3,10,453,8,10,1,10,5,10,456,8,10,10,10,12,10,
        459,9,10,1,10,1,10,5,10,463,8,10,10,10,12,10,466,9,10,1,10,3,10,
        469,8,10,1,10,5,10,472,8,10,10,10,12,10,475,9,10,1,10,3,10,478,8,
        10,1,10,5,10,481,8,10,10,10,12,10,484,9,10,1,10,1,10,5,10,488,8,
        10,10,10,12,10,491,9,10,1,10,3,10,494,8,10,1,11,3,11,497,8,11,1,
        11,1,11,5,11,501,8,11,10,11,12,11,504,9,11,3,11,506,8,11,1,11,1,
        11,1,12,1,12,1,12,1,12,5,12,514,8,12,10,12,12,12,517,9,12,3,12,519,
        8,12,1,12,1,12,1,13,3,13,524,8,13,1,13,3,13,527,8,13,1,13,1,13,1,
        13,1,13,1,13,3,13,534,8,13,1,14,5,14,537,8,14,10,14,12,14,540,9,
        14,1,14,1,14,5,14,544,8,14,10,14,12,14,547,9,14,1,14,1,14,5,14,551,
        8,14,10,14,12,14,554,9,14,1,14,5,14,557,8,14,10,14,12,14,560,9,14,
        1,15,1,15,1,15,3,15,565,8,15,1,16,1,16,1,16,1,17,1,17,5,17,572,8,
        17,10,17,12,17,575,9,17,1,17,1,17,5,17,579,8,17,10,17,12,17,582,
        9,17,1,17,1,17,1,18,1,18,5,18,588,8,18,10,18,12,18,591,9,18,1,18,
        5,18,594,8,18,10,18,12,18,597,9,18,1,18,5,18,600,8,18,10,18,12,18,
        603,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,
        615,8,19,1,19,5,19,618,8,19,10,19,12,19,621,9,19,1,20,1,20,5,20,
        625,8,20,10,20,12,20,628,9,20,1,20,1,20,1,21,3,21,633,8,21,1,21,
        1,21,5,21,637,8,21,10,21,12,21,640,9,21,1,21,1,21,5,21,644,8,21,
        10,21,12,21,647,9,21,1,21,1,21,5,21,651,8,21,10,21,12,21,654,9,21,
        1,21,3,21,657,8,21,1,21,5,21,660,8,21,10,21,12,21,663,9,21,1,21,
        1,21,1,22,1,22,5,22,669,8,22,10,22,12,22,672,9,22,1,22,1,22,1,22,
        5,22,677,8,22,10,22,12,22,680,9,22,1,22,3,22,683,8,22,1,23,1,23,
        5,23,687,8,23,10,23,12,23,690,9,23,1,23,3,23,693,8,23,1,23,5,23,
        696,8,23,10,23,12,23,699,9,23,1,23,1,23,5,23,703,8,23,10,23,12,23,
        706,9,23,1,23,5,23,709,8,23,10,23,12,23,712,9,23,3,23,714,8,23,1,
        23,5,23,717,8,23,10,23,12,23,720,9,23,1,23,1,23,1,24,1,24,5,24,726,
        8,24,10,24,12,24,729,9,24,4,24,731,8,24,11,24,12,24,732,1,24,3,24,
        736,8,24,1,25,1,25,5,25,740,8,25,10,25,12,25,743,9,25,1,25,3,25,
        746,8,25,1,25,5,25,749,8,25,10,25,12,25,752,9,25,1,25,3,25,755,8,
        25,1,25,5,25,758,8,25,10,25,12,25,761,9,25,1,25,3,25,764,8,25,1,
        26,3,26,767,8,26,1,26,1,26,5,26,771,8,26,10,26,12,26,774,9,26,1,
        26,1,26,5,26,778,8,26,10,26,12,26,781,9,26,1,26,1,26,3,26,785,8,
        26,1,26,5,26,788,8,26,10,26,12,26,791,9,26,1,26,3,26,794,8,26,1,
        26,5,26,797,8,26,10,26,12,26,800,9,26,1,26,3,26,803,8,26,1,26,5,
        26,806,8,26,10,26,12,26,809,9,26,1,26,1,26,5,26,813,8,26,10,26,12,
        26,816,9,26,1,26,1,26,5,26,820,8,26,10,26,12,26,823,9,26,1,26,3,
        26,826,8,26,1,26,5,26,829,8,26,10,26,12,26,832,9,26,1,26,3,26,835,
        8,26,1,26,5,26,838,8,26,10,26,12,26,841,9,26,1,26,3,26,844,8,26,
        1,27,1,27,1,27,1,27,5,27,850,8,27,10,27,12,27,853,9,27,3,27,855,
        8,27,1,27,1,27,1,28,3,28,860,8,28,1,28,1,28,1,28,3,28,865,8,28,1,
        29,1,29,1,29,1,29,1,30,1,30,1,30,5,30,874,8,30,10,30,12,30,877,9,
        30,1,30,3,30,880,8,30,1,31,3,31,883,8,31,1,31,1,31,5,31,887,8,31,
        10,31,12,31,890,9,31,1,31,1,31,5,31,894,8,31,10,31,12,31,897,9,31,
        1,31,3,31,900,8,31,1,31,5,31,903,8,31,10,31,12,31,906,9,31,1,31,
        1,31,5,31,910,8,31,10,31,12,31,913,9,31,1,31,3,31,916,8,31,1,31,
        5,31,919,8,31,10,31,12,31,922,9,31,1,31,3,31,925,8,31,1,32,3,32,
        928,8,32,1,32,1,32,5,32,932,8,32,10,32,12,32,935,9,32,1,32,3,32,
        938,8,32,1,32,1,32,5,32,942,8,32,10,32,12,32,945,9,32,1,32,3,32,
        948,8,32,1,32,5,32,951,8,32,10,32,12,32,954,9,32,1,32,1,32,5,32,
        958,8,32,10,32,12,32,961,9,32,1,32,3,32,964,8,32,1,32,5,32,967,8,
        32,10,32,12,32,970,9,32,1,32,3,32,973,8,32,1,33,3,33,976,8,33,1,
        33,1,33,5,33,980,8,33,10,33,12,33,983,9,33,1,33,3,33,986,8,33,1,
        33,5,33,989,8,33,10,33,12,33,992,9,33,1,33,1,33,5,33,996,8,33,10,
        33,12,33,999,9,33,1,33,1,33,3,33,1003,8,33,1,33,5,33,1006,8,33,10,
        33,12,33,1009,9,33,1,33,1,33,3,33,1013,8,33,1,33,5,33,1016,8,33,
        10,33,12,33,1019,9,33,1,33,3,33,1022,8,33,1,33,5,33,1025,8,33,10,
        33,12,33,1028,9,33,1,33,1,33,5,33,1032,8,33,10,33,12,33,1035,9,33,
        1,33,3,33,1038,8,33,1,33,1,33,1,33,1,33,3,33,1044,8,33,1,33,1,33,
        1,33,1,33,3,33,1050,8,33,3,33,1052,8,33,1,34,1,34,1,34,1,34,5,34,
        1058,8,34,10,34,12,34,1061,9,34,1,34,1,34,1,35,1,35,1,35,3,35,1068,
        8,35,1,36,3,36,1071,8,36,1,36,1,36,3,36,1075,8,36,1,36,1,36,5,36,
        1079,8,36,10,36,12,36,1082,9,36,1,36,1,36,1,36,5,36,1087,8,36,10,
        36,12,36,1090,9,36,1,36,1,36,5,36,1094,8,36,10,36,12,36,1097,9,36,
        1,36,3,36,1100,8,36,1,36,5,36,1103,8,36,10,36,12,36,1106,9,36,1,
        36,1,36,1,36,5,36,1111,8,36,10,36,12,36,1114,9,36,1,36,3,36,1117,
        8,36,3,36,1119,8,36,1,37,3,37,1122,8,37,1,37,1,37,3,37,1126,8,37,
        1,37,1,37,5,37,1130,8,37,10,37,12,37,1133,9,37,1,37,1,37,1,37,5,
        37,1138,8,37,10,37,12,37,1141,9,37,1,37,1,37,3,37,1145,8,37,1,37,
        1,37,5,37,1149,8,37,10,37,12,37,1152,9,37,1,37,1,37,3,37,1156,8,
        37,1,38,3,38,1159,8,38,1,38,1,38,5,38,1163,8,38,10,38,12,38,1166,
        9,38,1,38,1,38,5,38,1170,8,38,10,38,12,38,1173,9,38,1,38,3,38,1176,
        8,38,1,38,5,38,1179,8,38,10,38,12,38,1182,9,38,1,38,1,38,5,38,1186,
        8,38,10,38,12,38,1189,9,38,1,38,1,38,1,39,1,39,5,39,1195,8,39,10,
        39,12,39,1198,9,39,1,39,1,39,5,39,1202,8,39,10,39,12,39,1205,9,39,
        1,39,1,39,5,39,1209,8,39,10,39,12,39,1212,9,39,1,39,5,39,1215,8,
        39,10,39,12,39,1218,9,39,1,39,5,39,1221,8,39,10,39,12,39,1224,9,
        39,1,39,1,39,1,40,3,40,1229,8,40,1,40,5,40,1232,8,40,10,40,12,40,
        1235,9,40,1,40,1,40,5,40,1239,8,40,10,40,12,40,1242,9,40,1,40,1,
        40,5,40,1246,8,40,10,40,12,40,1249,9,40,1,40,3,40,1252,8,40,1,41,
        3,41,1255,8,41,1,41,1,41,1,41,1,41,3,41,1261,8,41,1,42,1,42,1,42,
        5,42,1266,8,42,10,42,12,42,1269,9,42,4,42,1271,8,42,11,42,12,42,
        1272,1,43,1,43,1,43,1,43,1,44,1,44,3,44,1281,8,44,1,44,5,44,1284,
        8,44,10,44,12,44,1287,9,44,1,44,4,44,1290,8,44,11,44,12,44,1291,
        1,45,1,45,1,45,1,45,1,45,1,45,3,45,1300,8,45,1,46,1,46,5,46,1304,
        8,46,10,46,12,46,1307,9,46,1,46,1,46,5,46,1311,8,46,10,46,12,46,
        1314,9,46,3,46,1316,8,46,1,46,1,46,5,46,1320,8,46,10,46,12,46,1323,
        9,46,1,46,1,46,5,46,1327,8,46,10,46,12,46,1330,9,46,1,46,1,46,1,
        47,1,47,1,47,3,47,1337,8,47,1,48,1,48,5,48,1341,8,48,10,48,12,48,
        1344,9,48,1,48,1,48,5,48,1348,8,48,10,48,12,48,1351,9,48,1,48,5,
        48,1354,8,48,10,48,12,48,1357,9,48,1,49,1,49,5,49,1361,8,49,10,49,
        12,49,1364,9,49,1,49,3,49,1367,8,49,1,50,1,50,1,50,3,50,1372,8,50,
        1,50,1,50,1,50,3,50,1377,8,50,5,50,1379,8,50,10,50,12,50,1382,9,
        50,1,50,1,50,1,51,1,51,5,51,1388,8,51,10,51,12,51,1391,9,51,1,51,
        1,51,5,51,1395,8,51,10,51,12,51,1398,9,51,1,51,1,51,5,51,1402,8,
        51,10,51,12,51,1405,9,51,1,51,5,51,1408,8,51,10,51,12,51,1411,9,
        51,1,52,5,52,1414,8,52,10,52,12,52,1417,9,52,1,52,1,52,5,52,1421,
        8,52,10,52,12,52,1424,9,52,1,52,1,52,5,52,1428,8,52,10,52,12,52,
        1431,9,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,5,54,1440,8,54,10,54,
        12,54,1443,9,54,1,54,1,54,4,54,1447,8,54,11,54,12,54,1448,1,54,3,
        54,1452,8,54,5,54,1454,8,54,10,54,12,54,1457,9,54,3,54,1459,8,54,
        1,55,1,55,3,55,1463,8,55,1,56,5,56,1466,8,56,10,56,12,56,1469,9,
        56,1,56,5,56,1472,8,56,10,56,12,56,1475,9,56,1,56,1,56,1,57,5,57,
        1480,8,57,10,57,12,57,1483,9,57,1,57,1,57,1,57,1,57,3,57,1489,8,
        57,1,58,1,58,1,58,1,58,5,58,1495,8,58,10,58,12,58,1498,9,58,1,59,
        1,59,5,59,1502,8,59,10,59,12,59,1505,9,59,1,59,1,59,5,59,1509,8,
        59,10,59,12,59,1512,9,59,1,59,5,59,1515,8,59,10,59,12,59,1518,9,
        59,1,60,1,60,5,60,1522,8,60,10,60,12,60,1525,9,60,1,60,1,60,5,60,
        1529,8,60,10,60,12,60,1532,9,60,1,60,5,60,1535,8,60,10,60,12,60,
        1538,9,60,1,61,1,61,1,61,5,61,1543,8,61,10,61,12,61,1546,9,61,1,
        61,1,61,5,61,1550,8,61,10,61,12,61,1553,9,61,1,62,1,62,1,62,5,62,
        1558,8,62,10,62,12,62,1561,9,62,1,62,1,62,3,62,1565,8,62,1,63,1,
        63,1,63,5,63,1570,8,63,10,63,12,63,1573,9,63,1,63,1,63,4,63,1577,
        8,63,11,63,12,63,1578,1,63,1,63,5,63,1583,8,63,10,63,12,63,1586,
        9,63,1,63,1,63,3,63,1590,8,63,1,64,1,64,5,64,1594,8,64,10,64,12,
        64,1597,9,64,1,64,1,64,5,64,1601,8,64,10,64,12,64,1604,9,64,1,64,
        5,64,1607,8,64,10,64,12,64,1610,9,64,1,65,1,65,1,65,5,65,1615,8,
        65,10,65,12,65,1618,9,65,1,65,1,65,5,65,1622,8,65,10,65,12,65,1625,
        9,65,1,66,1,66,1,66,5,66,1630,8,66,10,66,12,66,1633,9,66,1,66,5,
        66,1636,8,66,10,66,12,66,1639,9,66,1,67,1,67,1,67,5,67,1644,8,67,
        10,67,12,67,1647,9,67,1,67,1,67,5,67,1651,8,67,10,67,12,67,1654,
        9,67,1,68,1,68,1,68,5,68,1659,8,68,10,68,12,68,1662,9,68,1,68,1,
        68,5,68,1666,8,68,10,68,12,68,1669,9,68,1,69,1,69,5,69,1673,8,69,
        10,69,12,69,1676,9,69,1,69,1,69,1,69,5,69,1681,8,69,10,69,12,69,
        1684,9,69,1,70,5,70,1687,8,70,10,70,12,70,1690,9,70,1,70,1,70,1,
        71,1,71,3,71,1696,8,71,1,71,5,71,1699,8,71,10,71,12,71,1702,9,71,
        1,71,1,71,1,71,3,71,1707,8,71,1,71,1,71,5,71,1711,8,71,10,71,12,
        71,1714,9,71,3,71,1716,8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,3,73,1731,8,73,1,74,1,74,1,74,1,74,1,
        75,1,75,3,75,1739,8,75,1,75,5,75,1742,8,75,10,75,12,75,1745,9,75,
        1,75,1,75,5,75,1749,8,75,10,75,12,75,1752,9,75,1,75,4,75,1755,8,
        75,11,75,12,75,1756,3,75,1759,8,75,1,76,5,76,1762,8,76,10,76,12,
        76,1765,9,76,1,76,3,76,1768,8,76,1,76,5,76,1771,8,76,10,76,12,76,
        1774,9,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,1782,8,77,10,77,12,
        77,1785,9,77,3,77,1787,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,5,78,1798,8,78,10,78,12,78,1801,9,78,3,78,1803,8,78,1,78,
        1,78,1,79,1,79,1,80,1,80,5,80,1811,8,80,10,80,12,80,1814,9,80,1,
        80,1,80,5,80,1818,8,80,10,80,12,80,1821,9,80,1,80,1,80,5,80,1825,
        8,80,10,80,12,80,1828,9,80,1,80,5,80,1831,8,80,10,80,12,80,1834,
        9,80,1,80,1,80,1,81,3,81,1839,8,81,1,81,1,81,3,81,1843,8,81,1,82,
        4,82,1846,8,82,11,82,12,82,1847,1,83,1,83,5,83,1852,8,83,10,83,12,
        83,1855,9,83,1,83,1,83,5,83,1859,8,83,10,83,12,83,1862,9,83,3,83,
        1864,8,83,1,83,3,83,1867,8,83,1,83,5,83,1870,8,83,10,83,12,83,1873,
        9,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,
        1886,8,84,1,85,1,85,3,85,1890,8,85,1,86,1,86,1,86,5,86,1895,8,86,
        10,86,12,86,1898,9,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,5,87,1907,
        8,87,10,87,12,87,1910,9,87,1,87,1,87,1,88,1,88,1,89,1,89,1,89,1,
        89,1,90,1,90,1,91,1,91,1,91,1,91,1,92,5,92,1927,8,92,10,92,12,92,
        1930,9,92,1,92,1,92,5,92,1934,8,92,10,92,12,92,1937,9,92,1,92,1,
        92,5,92,1941,8,92,10,92,12,92,1944,9,92,1,92,1,92,1,92,1,92,5,92,
        1950,8,92,10,92,12,92,1953,9,92,1,92,1,92,5,92,1957,8,92,10,92,12,
        92,1960,9,92,1,92,1,92,5,92,1964,8,92,10,92,12,92,1967,9,92,1,92,
        1,92,5,92,1971,8,92,10,92,12,92,1974,9,92,1,92,1,92,3,92,1978,8,
        92,1,93,3,93,1981,8,93,1,93,5,93,1984,8,93,10,93,12,93,1987,9,93,
        1,93,1,93,5,93,1991,8,93,10,93,12,93,1994,9,93,1,93,5,93,1997,8,
        93,10,93,12,93,2000,9,93,1,94,1,94,1,94,5,94,2005,8,94,10,94,12,
        94,2008,9,94,1,94,1,94,5,94,2012,8,94,10,94,12,94,2015,9,94,1,94,
        3,94,2018,8,94,3,94,2020,8,94,1,95,1,95,5,95,2024,8,95,10,95,12,
        95,2027,9,95,1,95,1,95,5,95,2031,8,95,10,95,12,95,2034,9,95,1,95,
        3,95,2037,8,95,1,95,5,95,2040,8,95,10,95,12,95,2043,9,95,1,95,1,
        95,1,96,1,96,3,96,2049,8,96,1,96,1,96,5,96,2053,8,96,10,96,12,96,
        2056,9,96,1,96,1,96,1,97,1,97,3,97,2062,8,97,1,98,1,98,1,98,5,98,
        2067,8,98,10,98,12,98,2070,9,98,1,98,1,98,5,98,2074,8,98,10,98,12,
        98,2077,9,98,1,98,1,98,3,98,2081,8,98,1,98,3,98,2084,8,98,1,99,1,
        99,3,99,2088,8,99,1,100,1,100,5,100,2092,8,100,10,100,12,100,2095,
        9,100,1,100,1,100,1,100,1,100,5,100,2101,8,100,10,100,12,100,2104,
        9,100,1,100,3,100,2107,8,100,1,100,3,100,2110,8,100,1,100,5,100,
        2113,8,100,10,100,12,100,2116,9,100,1,100,1,100,5,100,2120,8,100,
        10,100,12,100,2123,9,100,1,100,3,100,2126,8,100,3,100,2128,8,100,
        1,101,1,101,3,101,2132,8,101,1,102,1,102,5,102,2136,8,102,10,102,
        12,102,2139,9,102,1,102,1,102,1,102,1,102,3,102,2145,8,102,1,102,
        5,102,2148,8,102,10,102,12,102,2151,9,102,1,102,1,102,5,102,2155,
        8,102,10,102,12,102,2158,9,102,1,102,1,102,5,102,2162,8,102,10,102,
        12,102,2165,9,102,5,102,2167,8,102,10,102,12,102,2170,9,102,1,102,
        5,102,2173,8,102,10,102,12,102,2176,9,102,1,102,1,102,1,103,1,103,
        5,103,2182,8,103,10,103,12,103,2185,9,103,1,103,1,103,5,103,2189,
        8,103,10,103,12,103,2192,9,103,1,103,5,103,2195,8,103,10,103,12,
        103,2198,9,103,1,103,5,103,2201,8,103,10,103,12,103,2204,9,103,1,
        103,1,103,5,103,2208,8,103,10,103,12,103,2211,9,103,1,103,1,103,
        3,103,2215,8,103,1,103,1,103,5,103,2219,8,103,10,103,12,103,2222,
        9,103,1,103,1,103,5,103,2226,8,103,10,103,12,103,2229,9,103,1,103,
        3,103,2232,8,103,1,104,1,104,1,104,3,104,2237,8,104,1,105,1,105,
        5,105,2241,8,105,10,105,12,105,2244,9,105,1,105,1,105,1,106,1,106,
        5,106,2250,8,106,10,106,12,106,2253,9,106,1,106,1,106,1,107,1,107,
        5,107,2259,8,107,10,107,12,107,2262,9,107,1,107,1,107,5,107,2266,
        8,107,10,107,12,107,2269,9,107,1,107,5,107,2272,8,107,10,107,12,
        107,2275,9,107,1,107,5,107,2278,8,107,10,107,12,107,2281,9,107,1,
        107,3,107,2284,8,107,1,108,1,108,5,108,2288,8,108,10,108,12,108,
        2291,9,108,1,108,1,108,5,108,2295,8,108,10,108,12,108,2298,9,108,
        1,108,1,108,1,108,1,108,1,108,5,108,2305,8,108,10,108,12,108,2308,
        9,108,1,108,1,108,1,109,1,109,5,109,2314,8,109,10,109,12,109,2317,
        9,109,1,109,1,109,1,110,1,110,1,110,3,110,2324,8,110,1,111,1,111,
        5,111,2328,8,111,10,111,12,111,2331,9,111,1,111,1,111,5,111,2335,
        8,111,10,111,12,111,2338,9,111,1,111,1,111,3,111,2342,8,111,1,111,
        1,111,1,111,1,111,5,111,2348,8,111,10,111,12,111,2351,9,111,1,111,
        3,111,2354,8,111,1,112,1,112,5,112,2358,8,112,10,112,12,112,2361,
        9,112,1,112,1,112,1,112,1,112,5,112,2367,8,112,10,112,12,112,2370,
        9,112,1,112,3,112,2373,8,112,1,113,1,113,5,113,2377,8,113,10,113,
        12,113,2380,9,113,1,113,3,113,2383,8,113,1,113,5,113,2386,8,113,
        10,113,12,113,2389,9,113,1,113,1,113,5,113,2393,8,113,10,113,12,
        113,2396,9,113,1,113,1,113,1,113,1,113,1,114,1,114,5,114,2404,8,
        114,10,114,12,114,2407,9,114,1,114,1,114,1,114,3,114,2412,8,114,
        1,114,1,114,1,114,1,114,3,114,2418,8,114,1,115,1,115,1,115,5,115,
        2423,8,115,10,115,12,115,2426,9,115,5,115,2428,8,115,10,115,12,115,
        2431,9,115,3,115,2433,8,115,1,115,5,115,2436,8,115,10,115,12,115,
        2439,9,115,1,115,1,115,5,115,2443,8,115,10,115,12,115,2446,9,115,
        1,115,1,115,3,115,2450,8,115,1,116,1,116,1,117,1,117,1,118,1,118,
        1,119,1,119,1,120,1,120,1,121,1,121,1,122,1,122,1,123,1,123,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,3,124,2475,8,124,1,125,1,125,
        1,125,1,125,1,125,1,125,5,125,2483,8,125,10,125,12,125,2486,9,125,
        1,125,1,125,1,125,3,125,2491,8,125,1,126,1,126,1,126,3,126,2496,
        8,126,1,127,1,127,4,127,2500,8,127,11,127,12,127,2501,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,2513,8,128,1,128,
        5,128,2516,8,128,10,128,12,128,2519,9,128,1,129,1,129,1,130,1,130,
        1,131,1,131,1,132,1,132,1,133,1,133,1,134,1,134,1,135,1,135,1,136,
        1,136,1,137,1,137,1,138,1,138,5,138,2541,8,138,10,138,12,138,2544,
        9,138,1,139,1,139,3,139,2548,8,139,1,139,5,139,2551,8,139,10,139,
        12,139,2554,9,139,1,140,1,140,5,140,2558,8,140,10,140,12,140,2561,
        9,140,1,140,1,140,5,140,2565,8,140,10,140,12,140,2568,9,140,1,140,
        1,140,1,140,1,140,5,140,2574,8,140,10,140,12,140,2577,9,140,1,140,
        3,140,2580,8,140,1,140,5,140,2583,8,140,10,140,12,140,2586,9,140,
        1,140,3,140,2589,8,140,3,140,2591,8,140,1,141,1,141,1,141,1,141,
        4,141,2597,8,141,11,141,12,141,2598,1,141,1,141,1,141,1,141,1,141,
        4,141,2606,8,141,11,141,12,141,2607,1,141,1,141,3,141,2612,8,141,
        1,142,1,142,1,143,1,143,3,143,2618,8,143,1,143,3,143,2621,8,143,
        1,144,1,144,5,144,2625,8,144,10,144,12,144,2628,9,144,1,144,1,144,
        5,144,2632,8,144,10,144,12,144,2635,9,144,1,145,1,145,1,146,4,146,
        2640,8,146,11,146,12,146,2641,1,146,5,146,2645,8,146,10,146,12,146,
        2648,9,146,1,146,1,146,5,146,2652,8,146,10,146,12,146,2655,9,146,
        3,146,2657,8,146,1,147,1,147,1,147,0,0,148,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
        264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
        0,25,1,0,59,60,1,0,63,64,2,0,27,27,67,67,1,0,156,158,1,0,162,164,
        2,0,53,53,84,84,1,0,36,37,1,0,27,32,2,0,47,48,50,51,1,0,43,46,2,
        0,89,89,91,91,2,0,88,88,90,90,1,0,18,19,1,0,15,17,3,0,25,25,49,49,
        87,87,1,0,108,112,2,0,119,119,124,124,1,0,104,107,2,0,89,89,92,92,
        1,0,113,118,1,0,120,122,1,0,125,127,3,0,56,56,93,96,99,102,8,0,58,
        58,66,69,73,73,78,79,92,92,97,98,103,128,140,140,2,0,5,5,26,26,2974,
        0,299,1,0,0,0,2,330,1,0,0,0,4,359,1,0,0,0,6,365,1,0,0,0,8,385,1,
        0,0,0,10,397,1,0,0,0,12,402,1,0,0,0,14,405,1,0,0,0,16,415,1,0,0,
        0,18,423,1,0,0,0,20,426,1,0,0,0,22,496,1,0,0,0,24,509,1,0,0,0,26,
        523,1,0,0,0,28,538,1,0,0,0,30,564,1,0,0,0,32,566,1,0,0,0,34,569,
        1,0,0,0,36,585,1,0,0,0,38,614,1,0,0,0,40,622,1,0,0,0,42,632,1,0,
        0,0,44,682,1,0,0,0,46,684,1,0,0,0,48,730,1,0,0,0,50,737,1,0,0,0,
        52,766,1,0,0,0,54,845,1,0,0,0,56,859,1,0,0,0,58,866,1,0,0,0,60,879,
        1,0,0,0,62,882,1,0,0,0,64,927,1,0,0,0,66,975,1,0,0,0,68,1053,1,0,
        0,0,70,1064,1,0,0,0,72,1118,1,0,0,0,74,1155,1,0,0,0,76,1158,1,0,
        0,0,78,1192,1,0,0,0,80,1228,1,0,0,0,82,1254,1,0,0,0,84,1270,1,0,
        0,0,86,1274,1,0,0,0,88,1280,1,0,0,0,90,1299,1,0,0,0,92,1315,1,0,
        0,0,94,1336,1,0,0,0,96,1338,1,0,0,0,98,1358,1,0,0,0,100,1368,1,0,
        0,0,102,1385,1,0,0,0,104,1415,1,0,0,0,106,1434,1,0,0,0,108,1441,
        1,0,0,0,110,1462,1,0,0,0,112,1467,1,0,0,0,114,1481,1,0,0,0,116,1490,
        1,0,0,0,118,1499,1,0,0,0,120,1519,1,0,0,0,122,1539,1,0,0,0,124,1554,
        1,0,0,0,126,1566,1,0,0,0,128,1591,1,0,0,0,130,1611,1,0,0,0,132,1626,
        1,0,0,0,134,1640,1,0,0,0,136,1655,1,0,0,0,138,1670,1,0,0,0,140,1688,
        1,0,0,0,142,1715,1,0,0,0,144,1717,1,0,0,0,146,1730,1,0,0,0,148,1732,
        1,0,0,0,150,1758,1,0,0,0,152,1763,1,0,0,0,154,1777,1,0,0,0,156,1790,
        1,0,0,0,158,1806,1,0,0,0,160,1808,1,0,0,0,162,1842,1,0,0,0,164,1845,
        1,0,0,0,166,1863,1,0,0,0,168,1885,1,0,0,0,170,1889,1,0,0,0,172,1891,
        1,0,0,0,174,1901,1,0,0,0,176,1913,1,0,0,0,178,1915,1,0,0,0,180,1919,
        1,0,0,0,182,1921,1,0,0,0,184,1928,1,0,0,0,186,1980,1,0,0,0,188,2019,
        1,0,0,0,190,2021,1,0,0,0,192,2046,1,0,0,0,194,2059,1,0,0,0,196,2063,
        1,0,0,0,198,2087,1,0,0,0,200,2089,1,0,0,0,202,2131,1,0,0,0,204,2133,
        1,0,0,0,206,2231,1,0,0,0,208,2236,1,0,0,0,210,2238,1,0,0,0,212,2247,
        1,0,0,0,214,2256,1,0,0,0,216,2285,1,0,0,0,218,2311,1,0,0,0,220,2323,
        1,0,0,0,222,2325,1,0,0,0,224,2355,1,0,0,0,226,2374,1,0,0,0,228,2417,
        1,0,0,0,230,2432,1,0,0,0,232,2451,1,0,0,0,234,2453,1,0,0,0,236,2455,
        1,0,0,0,238,2457,1,0,0,0,240,2459,1,0,0,0,242,2461,1,0,0,0,244,2463,
        1,0,0,0,246,2465,1,0,0,0,248,2474,1,0,0,0,250,2490,1,0,0,0,252,2495,
        1,0,0,0,254,2499,1,0,0,0,256,2512,1,0,0,0,258,2520,1,0,0,0,260,2522,
        1,0,0,0,262,2524,1,0,0,0,264,2526,1,0,0,0,266,2528,1,0,0,0,268,2530,
        1,0,0,0,270,2532,1,0,0,0,272,2534,1,0,0,0,274,2536,1,0,0,0,276,2538,
        1,0,0,0,278,2547,1,0,0,0,280,2590,1,0,0,0,282,2611,1,0,0,0,284,2613,
        1,0,0,0,286,2615,1,0,0,0,288,2622,1,0,0,0,290,2636,1,0,0,0,292,2656,
        1,0,0,0,294,2658,1,0,0,0,296,298,5,5,0,0,297,296,1,0,0,0,298,301,
        1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,
        1,0,0,0,302,306,3,4,2,0,303,305,3,294,147,0,304,303,1,0,0,0,305,
        308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,323,1,0,0,0,308,
        306,1,0,0,0,309,320,3,18,9,0,310,312,3,294,147,0,311,310,1,0,0,0,
        312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,
        315,317,3,18,9,0,316,315,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,
        318,311,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,
        321,324,1,0,0,0,322,320,1,0,0,0,323,309,1,0,0,0,323,324,1,0,0,0,
        324,325,1,0,0,0,325,326,5,0,0,1,326,1,1,0,0,0,327,329,5,5,0,0,328,
        327,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,
        333,1,0,0,0,332,330,1,0,0,0,333,337,3,4,2,0,334,336,3,294,147,0,
        335,334,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,
        338,354,1,0,0,0,339,337,1,0,0,0,340,351,3,116,58,0,341,343,3,294,
        147,0,342,341,1,0,0,0,343,344,1,0,0,0,344,342,1,0,0,0,344,345,1,
        0,0,0,345,347,1,0,0,0,346,348,3,116,58,0,347,346,1,0,0,0,347,348,
        1,0,0,0,348,350,1,0,0,0,349,342,1,0,0,0,350,353,1,0,0,0,351,349,
        1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,354,340,
        1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,5,0,0,1,357,3,1,
        0,0,0,358,360,3,6,3,0,359,358,1,0,0,0,359,360,1,0,0,0,360,361,1,
        0,0,0,361,362,3,10,5,0,362,363,3,12,6,0,363,5,1,0,0,0,364,366,3,
        8,4,0,365,364,1,0,0,0,366,367,1,0,0,0,367,365,1,0,0,0,367,368,1,
        0,0,0,368,7,1,0,0,0,369,370,5,56,0,0,370,380,5,25,0,0,371,373,5,
        11,0,0,372,374,3,286,143,0,373,372,1,0,0,0,374,375,1,0,0,0,375,373,
        1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,5,12,0,0,378,381,
        1,0,0,0,379,381,3,286,143,0,380,371,1,0,0,0,380,379,1,0,0,0,381,
        383,1,0,0,0,382,384,3,292,146,0,383,382,1,0,0,0,383,384,1,0,0,0,
        384,386,1,0,0,0,385,369,1,0,0,0,386,387,1,0,0,0,387,385,1,0,0,0,
        387,388,1,0,0,0,388,9,1,0,0,0,389,391,3,254,127,0,390,389,1,0,0,
        0,390,391,1,0,0,0,391,392,1,0,0,0,392,393,5,57,0,0,393,395,3,288,
        144,0,394,396,3,292,146,0,395,394,1,0,0,0,395,396,1,0,0,0,396,398,
        1,0,0,0,397,390,1,0,0,0,397,398,1,0,0,0,398,11,1,0,0,0,399,401,3,
        14,7,0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,
        0,0,0,403,13,1,0,0,0,404,402,1,0,0,0,405,406,5,58,0,0,406,410,3,
        288,144,0,407,408,5,7,0,0,408,411,5,15,0,0,409,411,3,16,8,0,410,
        407,1,0,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,
        414,3,292,146,0,413,412,1,0,0,0,413,414,1,0,0,0,414,15,1,0,0,0,415,
        416,5,87,0,0,416,417,3,290,145,0,417,17,1,0,0,0,418,424,3,20,10,
        0,419,424,3,62,31,0,420,424,3,52,26,0,421,424,3,66,33,0,422,424,
        3,76,38,0,423,418,1,0,0,0,423,419,1,0,0,0,423,420,1,0,0,0,423,421,
        1,0,0,0,423,422,1,0,0,0,424,19,1,0,0,0,425,427,3,254,127,0,426,425,
        1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,432,7,0,0,0,429,431,
        5,5,0,0,430,429,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,433,
        1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,443,3,290,145,0,436,
        438,5,5,0,0,437,436,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,
        440,1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,0,442,444,3,78,39,0,443,
        439,1,0,0,0,443,444,1,0,0,0,444,452,1,0,0,0,445,447,5,5,0,0,446,
        445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,
        451,1,0,0,0,450,448,1,0,0,0,451,453,3,22,11,0,452,448,1,0,0,0,452,
        453,1,0,0,0,453,468,1,0,0,0,454,456,5,5,0,0,455,454,1,0,0,0,456,
        459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,
        457,1,0,0,0,460,464,5,25,0,0,461,463,5,5,0,0,462,461,1,0,0,0,463,
        466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,
        464,1,0,0,0,467,469,3,28,14,0,468,457,1,0,0,0,468,469,1,0,0,0,469,
        477,1,0,0,0,470,472,5,5,0,0,471,470,1,0,0,0,472,475,1,0,0,0,473,
        471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,
        478,3,102,51,0,477,473,1,0,0,0,477,478,1,0,0,0,478,493,1,0,0,0,479,
        481,5,5,0,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,
        483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,485,494,3,36,18,0,486,
        488,5,5,0,0,487,486,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,489,
        490,1,0,0,0,490,492,1,0,0,0,491,489,1,0,0,0,492,494,3,46,23,0,493,
        482,1,0,0,0,493,489,1,0,0,0,493,494,1,0,0,0,494,21,1,0,0,0,495,497,
        3,254,127,0,496,495,1,0,0,0,496,497,1,0,0,0,497,505,1,0,0,0,498,
        502,5,66,0,0,499,501,5,5,0,0,500,499,1,0,0,0,501,504,1,0,0,0,502,
        500,1,0,0,0,502,503,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,505,
        498,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,508,3,24,12,0,508,
        23,1,0,0,0,509,518,5,9,0,0,510,515,3,26,13,0,511,512,5,8,0,0,512,
        514,3,26,13,0,513,511,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,
        516,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,518,510,1,0,0,0,518,
        519,1,0,0,0,519,520,1,0,0,0,520,521,5,10,0,0,521,25,1,0,0,0,522,
        524,3,254,127,0,523,522,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,
        525,527,7,1,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,
        528,529,3,290,145,0,529,530,5,25,0,0,530,533,3,82,41,0,531,532,5,
        27,0,0,532,534,3,116,58,0,533,531,1,0,0,0,533,534,1,0,0,0,534,27,
        1,0,0,0,535,537,3,278,139,0,536,535,1,0,0,0,537,540,1,0,0,0,538,
        536,1,0,0,0,538,539,1,0,0,0,539,541,1,0,0,0,540,538,1,0,0,0,541,
        558,3,30,15,0,542,544,5,5,0,0,543,542,1,0,0,0,544,547,1,0,0,0,545,
        543,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,545,1,0,0,0,548,
        552,5,8,0,0,549,551,5,5,0,0,550,549,1,0,0,0,551,554,1,0,0,0,552,
        550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,
        557,3,30,15,0,556,545,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,
        559,1,0,0,0,559,29,1,0,0,0,560,558,1,0,0,0,561,565,3,32,16,0,562,
        565,3,96,48,0,563,565,3,34,17,0,564,561,1,0,0,0,564,562,1,0,0,0,
        564,563,1,0,0,0,565,31,1,0,0,0,566,567,3,96,48,0,567,568,3,150,75,
        0,568,33,1,0,0,0,569,573,3,96,48,0,570,572,5,5,0,0,571,570,1,0,0,
        0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,576,1,0,0,
        0,575,573,1,0,0,0,576,580,5,67,0,0,577,579,5,5,0,0,578,577,1,0,0,
        0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,
        0,582,580,1,0,0,0,583,584,3,116,58,0,584,35,1,0,0,0,585,589,5,13,
        0,0,586,588,5,5,0,0,587,586,1,0,0,0,588,591,1,0,0,0,589,587,1,0,
        0,0,589,590,1,0,0,0,590,595,1,0,0,0,591,589,1,0,0,0,592,594,3,38,
        19,0,593,592,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,
        0,0,596,601,1,0,0,0,597,595,1,0,0,0,598,600,5,5,0,0,599,598,1,0,
        0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,604,1,0,
        0,0,603,601,1,0,0,0,604,605,5,14,0,0,605,37,1,0,0,0,606,615,3,20,
        10,0,607,615,3,52,26,0,608,615,3,62,31,0,609,615,3,64,32,0,610,615,
        3,66,33,0,611,615,3,40,20,0,612,615,3,42,21,0,613,615,3,76,38,0,
        614,606,1,0,0,0,614,607,1,0,0,0,614,608,1,0,0,0,614,609,1,0,0,0,
        614,610,1,0,0,0,614,611,1,0,0,0,614,612,1,0,0,0,614,613,1,0,0,0,
        615,619,1,0,0,0,616,618,3,294,147,0,617,616,1,0,0,0,618,621,1,0,
        0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,39,1,0,0,0,621,619,1,0,0,
        0,622,626,5,69,0,0,623,625,5,5,0,0,624,623,1,0,0,0,625,628,1,0,0,
        0,626,624,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,626,1,0,0,
        0,629,630,3,106,53,0,630,41,1,0,0,0,631,633,3,254,127,0,632,631,
        1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,638,5,66,0,0,635,637,
        5,5,0,0,636,635,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,
        1,0,0,0,639,641,1,0,0,0,640,638,1,0,0,0,641,656,3,54,27,0,642,644,
        5,5,0,0,643,642,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,645,646,
        1,0,0,0,646,648,1,0,0,0,647,645,1,0,0,0,648,652,5,25,0,0,649,651,
        5,5,0,0,650,649,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,
        1,0,0,0,653,655,1,0,0,0,654,652,1,0,0,0,655,657,3,44,22,0,656,645,
        1,0,0,0,656,657,1,0,0,0,657,661,1,0,0,0,658,660,5,5,0,0,659,658,
        1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,664,
        1,0,0,0,663,661,1,0,0,0,664,665,3,106,53,0,665,43,1,0,0,0,666,670,
        5,70,0,0,667,669,5,5,0,0,668,667,1,0,0,0,669,672,1,0,0,0,670,668,
        1,0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,670,1,0,0,0,673,683,
        3,156,78,0,674,678,5,71,0,0,675,677,5,5,0,0,676,675,1,0,0,0,677,
        680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,680,
        678,1,0,0,0,681,683,3,156,78,0,682,666,1,0,0,0,682,674,1,0,0,0,683,
        45,1,0,0,0,684,688,5,13,0,0,685,687,5,5,0,0,686,685,1,0,0,0,687,
        690,1,0,0,0,688,686,1,0,0,0,688,689,1,0,0,0,689,692,1,0,0,0,690,
        688,1,0,0,0,691,693,3,48,24,0,692,691,1,0,0,0,692,693,1,0,0,0,693,
        713,1,0,0,0,694,696,5,5,0,0,695,694,1,0,0,0,696,699,1,0,0,0,697,
        695,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,697,1,0,0,0,700,
        704,5,26,0,0,701,703,5,5,0,0,702,701,1,0,0,0,703,706,1,0,0,0,704,
        702,1,0,0,0,704,705,1,0,0,0,705,710,1,0,0,0,706,704,1,0,0,0,707,
        709,3,38,19,0,708,707,1,0,0,0,709,712,1,0,0,0,710,708,1,0,0,0,710,
        711,1,0,0,0,711,714,1,0,0,0,712,710,1,0,0,0,713,697,1,0,0,0,713,
        714,1,0,0,0,714,718,1,0,0,0,715,717,5,5,0,0,716,715,1,0,0,0,717,
        720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,
        718,1,0,0,0,721,722,5,14,0,0,722,47,1,0,0,0,723,727,3,50,25,0,724,
        726,5,5,0,0,725,724,1,0,0,0,726,729,1,0,0,0,727,725,1,0,0,0,727,
        728,1,0,0,0,728,731,1,0,0,0,729,727,1,0,0,0,730,723,1,0,0,0,731,
        732,1,0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,
        736,5,26,0,0,735,734,1,0,0,0,735,736,1,0,0,0,736,49,1,0,0,0,737,
        745,3,290,145,0,738,740,5,5,0,0,739,738,1,0,0,0,740,743,1,0,0,0,
        741,739,1,0,0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,741,1,0,0,0,
        744,746,3,156,78,0,745,741,1,0,0,0,745,746,1,0,0,0,746,754,1,0,0,
        0,747,749,5,5,0,0,748,747,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,
        0,750,751,1,0,0,0,751,753,1,0,0,0,752,750,1,0,0,0,753,755,3,36,18,
        0,754,750,1,0,0,0,754,755,1,0,0,0,755,763,1,0,0,0,756,758,5,5,0,
        0,757,756,1,0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,
        0,760,762,1,0,0,0,761,759,1,0,0,0,762,764,5,8,0,0,763,759,1,0,0,
        0,763,764,1,0,0,0,764,51,1,0,0,0,765,767,3,254,127,0,766,765,1,0,
        0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,784,5,61,0,0,769,771,5,5,
        0,0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,
        0,0,773,775,1,0,0,0,774,772,1,0,0,0,775,779,3,82,41,0,776,778,5,
        5,0,0,777,776,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,
        0,0,0,780,782,1,0,0,0,781,779,1,0,0,0,782,783,5,7,0,0,783,785,1,
        0,0,0,784,772,1,0,0,0,784,785,1,0,0,0,785,793,1,0,0,0,786,788,5,
        5,0,0,787,786,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,
        0,0,0,790,792,1,0,0,0,791,789,1,0,0,0,792,794,3,78,39,0,793,789,
        1,0,0,0,793,794,1,0,0,0,794,802,1,0,0,0,795,797,5,5,0,0,796,795,
        1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,801,
        1,0,0,0,800,798,1,0,0,0,801,803,3,288,144,0,802,798,1,0,0,0,802,
        803,1,0,0,0,803,807,1,0,0,0,804,806,5,5,0,0,805,804,1,0,0,0,806,
        809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,810,1,0,0,0,809,
        807,1,0,0,0,810,825,3,54,27,0,811,813,5,5,0,0,812,811,1,0,0,0,813,
        816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,817,1,0,0,0,816,
        814,1,0,0,0,817,821,5,25,0,0,818,820,5,5,0,0,819,818,1,0,0,0,820,
        823,1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,
        821,1,0,0,0,824,826,3,82,41,0,825,814,1,0,0,0,825,826,1,0,0,0,826,
        834,1,0,0,0,827,829,5,5,0,0,828,827,1,0,0,0,829,832,1,0,0,0,830,
        828,1,0,0,0,830,831,1,0,0,0,831,833,1,0,0,0,832,830,1,0,0,0,833,
        835,3,102,51,0,834,830,1,0,0,0,834,835,1,0,0,0,835,843,1,0,0,0,836,
        838,5,5,0,0,837,836,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,839,
        840,1,0,0,0,840,842,1,0,0,0,841,839,1,0,0,0,842,844,3,60,30,0,843,
        839,1,0,0,0,843,844,1,0,0,0,844,53,1,0,0,0,845,854,5,9,0,0,846,851,
        3,56,28,0,847,848,5,8,0,0,848,850,3,56,28,0,849,847,1,0,0,0,850,
        853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,855,1,0,0,0,853,
        851,1,0,0,0,854,846,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,
        857,5,10,0,0,857,55,1,0,0,0,858,860,3,254,127,0,859,858,1,0,0,0,
        859,860,1,0,0,0,860,861,1,0,0,0,861,864,3,58,29,0,862,863,5,27,0,
        0,863,865,3,116,58,0,864,862,1,0,0,0,864,865,1,0,0,0,865,57,1,0,
        0,0,866,867,3,290,145,0,867,868,5,25,0,0,868,869,3,82,41,0,869,59,
        1,0,0,0,870,880,3,106,53,0,871,875,5,27,0,0,872,874,5,5,0,0,873,
        872,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,
        878,1,0,0,0,877,875,1,0,0,0,878,880,3,116,58,0,879,870,1,0,0,0,879,
        871,1,0,0,0,880,61,1,0,0,0,881,883,3,254,127,0,882,881,1,0,0,0,882,
        883,1,0,0,0,883,884,1,0,0,0,884,888,5,62,0,0,885,887,5,5,0,0,886,
        885,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,
        891,1,0,0,0,890,888,1,0,0,0,891,899,3,290,145,0,892,894,5,5,0,0,
        893,892,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,896,1,0,0,0,
        896,898,1,0,0,0,897,895,1,0,0,0,898,900,3,22,11,0,899,895,1,0,0,
        0,899,900,1,0,0,0,900,915,1,0,0,0,901,903,5,5,0,0,902,901,1,0,0,
        0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,
        0,906,904,1,0,0,0,907,911,5,25,0,0,908,910,5,5,0,0,909,908,1,0,0,
        0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,
        0,913,911,1,0,0,0,914,916,3,28,14,0,915,904,1,0,0,0,915,916,1,0,
        0,0,916,924,1,0,0,0,917,919,5,5,0,0,918,917,1,0,0,0,919,922,1,0,
        0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,923,1,0,0,0,922,920,1,0,
        0,0,923,925,3,36,18,0,924,920,1,0,0,0,924,925,1,0,0,0,925,63,1,0,
        0,0,926,928,3,254,127,0,927,926,1,0,0,0,927,928,1,0,0,0,928,929,
        1,0,0,0,929,933,5,68,0,0,930,932,5,5,0,0,931,930,1,0,0,0,932,935,
        1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,937,1,0,0,0,935,933,
        1,0,0,0,936,938,3,254,127,0,937,936,1,0,0,0,937,938,1,0,0,0,938,
        939,1,0,0,0,939,947,5,62,0,0,940,942,5,5,0,0,941,940,1,0,0,0,942,
        945,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,
        943,1,0,0,0,946,948,3,290,145,0,947,943,1,0,0,0,947,948,1,0,0,0,
        948,963,1,0,0,0,949,951,5,5,0,0,950,949,1,0,0,0,951,954,1,0,0,0,
        952,950,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,954,952,1,0,0,0,
        955,959,5,25,0,0,956,958,5,5,0,0,957,956,1,0,0,0,958,961,1,0,0,0,
        959,957,1,0,0,0,959,960,1,0,0,0,960,962,1,0,0,0,961,959,1,0,0,0,
        962,964,3,28,14,0,963,952,1,0,0,0,963,964,1,0,0,0,964,972,1,0,0,
        0,965,967,5,5,0,0,966,965,1,0,0,0,967,970,1,0,0,0,968,966,1,0,0,
        0,968,969,1,0,0,0,969,971,1,0,0,0,970,968,1,0,0,0,971,973,3,36,18,
        0,972,968,1,0,0,0,972,973,1,0,0,0,973,65,1,0,0,0,974,976,3,254,127,
        0,975,974,1,0,0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,985,7,1,0,
        0,978,980,5,5,0,0,979,978,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,
        0,981,982,1,0,0,0,982,984,1,0,0,0,983,981,1,0,0,0,984,986,3,78,39,
        0,985,981,1,0,0,0,985,986,1,0,0,0,986,1002,1,0,0,0,987,989,5,5,0,
        0,988,987,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,
        0,991,993,1,0,0,0,992,990,1,0,0,0,993,997,3,82,41,0,994,996,5,5,
        0,0,995,994,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,
        0,0,998,1000,1,0,0,0,999,997,1,0,0,0,1000,1001,5,7,0,0,1001,1003,
        1,0,0,0,1002,990,1,0,0,0,1002,1003,1,0,0,0,1003,1007,1,0,0,0,1004,
        1006,5,5,0,0,1005,1004,1,0,0,0,1006,1009,1,0,0,0,1007,1005,1,0,0,
        0,1007,1008,1,0,0,0,1008,1012,1,0,0,0,1009,1007,1,0,0,0,1010,1013,
        3,68,34,0,1011,1013,3,70,35,0,1012,1010,1,0,0,0,1012,1011,1,0,0,
        0,1013,1021,1,0,0,0,1014,1016,5,5,0,0,1015,1014,1,0,0,0,1016,1019,
        1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,1020,1,0,0,0,1019,
        1017,1,0,0,0,1020,1022,3,102,51,0,1021,1017,1,0,0,0,1021,1022,1,
        0,0,0,1022,1037,1,0,0,0,1023,1025,5,5,0,0,1024,1023,1,0,0,0,1025,
        1028,1,0,0,0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,
        0,1028,1026,1,0,0,0,1029,1033,7,2,0,0,1030,1032,5,5,0,0,1031,1030,
        1,0,0,0,1032,1035,1,0,0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,
        1036,1,0,0,0,1035,1033,1,0,0,0,1036,1038,3,116,58,0,1037,1026,1,
        0,0,0,1037,1038,1,0,0,0,1038,1051,1,0,0,0,1039,1043,3,72,36,0,1040,
        1041,3,292,146,0,1041,1042,3,74,37,0,1042,1044,1,0,0,0,1043,1040,
        1,0,0,0,1043,1044,1,0,0,0,1044,1052,1,0,0,0,1045,1049,3,74,37,0,
        1046,1047,3,292,146,0,1047,1048,3,72,36,0,1048,1050,1,0,0,0,1049,
        1046,1,0,0,0,1049,1050,1,0,0,0,1050,1052,1,0,0,0,1051,1039,1,0,0,
        0,1051,1045,1,0,0,0,1051,1052,1,0,0,0,1052,67,1,0,0,0,1053,1054,
        5,9,0,0,1054,1059,3,70,35,0,1055,1056,5,8,0,0,1056,1058,3,70,35,
        0,1057,1055,1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,0,0,0,1059,1060,
        1,0,0,0,1060,1062,1,0,0,0,1061,1059,1,0,0,0,1062,1063,5,10,0,0,1063,
        69,1,0,0,0,1064,1067,3,290,145,0,1065,1066,5,25,0,0,1066,1068,3,
        82,41,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,71,1,0,0,0,1069,
        1071,3,254,127,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,
        0,0,0,1072,1119,5,97,0,0,1073,1075,3,254,127,0,1074,1073,1,0,0,0,
        1074,1075,1,0,0,0,1075,1076,1,0,0,0,1076,1080,5,97,0,0,1077,1079,
        5,5,0,0,1078,1077,1,0,0,0,1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,
        1081,1,0,0,0,1081,1083,1,0,0,0,1082,1080,1,0,0,0,1083,1084,5,9,0,
        0,1084,1099,5,10,0,0,1085,1087,5,5,0,0,1086,1085,1,0,0,0,1087,1090,
        1,0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,1091,1,0,0,0,1090,
        1088,1,0,0,0,1091,1095,5,25,0,0,1092,1094,5,5,0,0,1093,1092,1,0,
        0,0,1094,1097,1,0,0,0,1095,1093,1,0,0,0,1095,1096,1,0,0,0,1096,1098,
        1,0,0,0,1097,1095,1,0,0,0,1098,1100,3,82,41,0,1099,1088,1,0,0,0,
        1099,1100,1,0,0,0,1100,1104,1,0,0,0,1101,1103,5,5,0,0,1102,1101,
        1,0,0,0,1103,1106,1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,
        1116,1,0,0,0,1106,1104,1,0,0,0,1107,1117,3,106,53,0,1108,1112,5,
        27,0,0,1109,1111,5,5,0,0,1110,1109,1,0,0,0,1111,1114,1,0,0,0,1112,
        1110,1,0,0,0,1112,1113,1,0,0,0,1113,1115,1,0,0,0,1114,1112,1,0,0,
        0,1115,1117,3,116,58,0,1116,1107,1,0,0,0,1116,1108,1,0,0,0,1117,
        1119,1,0,0,0,1118,1070,1,0,0,0,1118,1074,1,0,0,0,1119,73,1,0,0,0,
        1120,1122,3,254,127,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,1123,
        1,0,0,0,1123,1156,5,98,0,0,1124,1126,3,254,127,0,1125,1124,1,0,0,
        0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1131,5,98,0,0,1128,1130,
        5,5,0,0,1129,1128,1,0,0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,
        1132,1,0,0,0,1132,1134,1,0,0,0,1133,1131,1,0,0,0,1134,1139,5,9,0,
        0,1135,1138,3,278,139,0,1136,1138,3,272,136,0,1137,1135,1,0,0,0,
        1137,1136,1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1139,1140,
        1,0,0,0,1140,1144,1,0,0,0,1141,1139,1,0,0,0,1142,1145,3,290,145,
        0,1143,1145,3,58,29,0,1144,1142,1,0,0,0,1144,1143,1,0,0,0,1145,1146,
        1,0,0,0,1146,1150,5,10,0,0,1147,1149,5,5,0,0,1148,1147,1,0,0,0,1149,
        1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,1,0,0,0,1151,1153,1,0,0,
        0,1152,1150,1,0,0,0,1153,1154,3,60,30,0,1154,1156,1,0,0,0,1155,1121,
        1,0,0,0,1155,1125,1,0,0,0,1156,75,1,0,0,0,1157,1159,3,254,127,0,
        1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,1164,
        5,65,0,0,1161,1163,5,5,0,0,1162,1161,1,0,0,0,1163,1166,1,0,0,0,1164,
        1162,1,0,0,0,1164,1165,1,0,0,0,1165,1167,1,0,0,0,1166,1164,1,0,0,
        0,1167,1175,3,290,145,0,1168,1170,5,5,0,0,1169,1168,1,0,0,0,1170,
        1173,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,
        0,1173,1171,1,0,0,0,1174,1176,3,78,39,0,1175,1171,1,0,0,0,1175,1176,
        1,0,0,0,1176,1180,1,0,0,0,1177,1179,5,5,0,0,1178,1177,1,0,0,0,1179,
        1182,1,0,0,0,1180,1178,1,0,0,0,1180,1181,1,0,0,0,1181,1183,1,0,0,
        0,1182,1180,1,0,0,0,1183,1187,5,27,0,0,1184,1186,5,5,0,0,1185,1184,
        1,0,0,0,1186,1189,1,0,0,0,1187,1185,1,0,0,0,1187,1188,1,0,0,0,1188,
        1190,1,0,0,0,1189,1187,1,0,0,0,1190,1191,3,82,41,0,1191,77,1,0,0,
        0,1192,1196,5,43,0,0,1193,1195,5,5,0,0,1194,1193,1,0,0,0,1195,1198,
        1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,1199,1,0,0,0,1198,
        1196,1,0,0,0,1199,1216,3,80,40,0,1200,1202,5,5,0,0,1201,1200,1,0,
        0,0,1202,1205,1,0,0,0,1203,1201,1,0,0,0,1203,1204,1,0,0,0,1204,1206,
        1,0,0,0,1205,1203,1,0,0,0,1206,1210,5,8,0,0,1207,1209,5,5,0,0,1208,
        1207,1,0,0,0,1209,1212,1,0,0,0,1210,1208,1,0,0,0,1210,1211,1,0,0,
        0,1211,1213,1,0,0,0,1212,1210,1,0,0,0,1213,1215,3,80,40,0,1214,1203,
        1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,
        1222,1,0,0,0,1218,1216,1,0,0,0,1219,1221,5,5,0,0,1220,1219,1,0,0,
        0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,1225,
        1,0,0,0,1224,1222,1,0,0,0,1225,1226,5,44,0,0,1226,79,1,0,0,0,1227,
        1229,3,254,127,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1233,1,
        0,0,0,1230,1232,5,5,0,0,1231,1230,1,0,0,0,1232,1235,1,0,0,0,1233,
        1231,1,0,0,0,1233,1234,1,0,0,0,1234,1236,1,0,0,0,1235,1233,1,0,0,
        0,1236,1251,3,290,145,0,1237,1239,5,5,0,0,1238,1237,1,0,0,0,1239,
        1242,1,0,0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,1243,1,0,0,
        0,1242,1240,1,0,0,0,1243,1247,5,25,0,0,1244,1246,5,5,0,0,1245,1244,
        1,0,0,0,1246,1249,1,0,0,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,
        1250,1,0,0,0,1249,1247,1,0,0,0,1250,1252,3,82,41,0,1251,1240,1,0,
        0,0,1251,1252,1,0,0,0,1252,81,1,0,0,0,1253,1255,3,84,42,0,1254,1253,
        1,0,0,0,1254,1255,1,0,0,0,1255,1260,1,0,0,0,1256,1261,3,92,46,0,
        1257,1261,3,86,43,0,1258,1261,3,88,44,0,1259,1261,3,90,45,0,1260,
        1256,1,0,0,0,1260,1257,1,0,0,0,1260,1258,1,0,0,0,1260,1259,1,0,0,
        0,1261,83,1,0,0,0,1262,1271,3,278,139,0,1263,1267,5,118,0,0,1264,
        1266,5,5,0,0,1265,1264,1,0,0,0,1266,1269,1,0,0,0,1267,1265,1,0,0,
        0,1267,1268,1,0,0,0,1268,1271,1,0,0,0,1269,1267,1,0,0,0,1270,1262,
        1,0,0,0,1270,1263,1,0,0,0,1271,1272,1,0,0,0,1272,1270,1,0,0,0,1272,
        1273,1,0,0,0,1273,85,1,0,0,0,1274,1275,5,9,0,0,1275,1276,3,82,41,
        0,1276,1277,5,10,0,0,1277,87,1,0,0,0,1278,1281,3,90,45,0,1279,1281,
        3,86,43,0,1280,1278,1,0,0,0,1280,1279,1,0,0,0,1281,1285,1,0,0,0,
        1282,1284,5,5,0,0,1283,1282,1,0,0,0,1284,1287,1,0,0,0,1285,1283,
        1,0,0,0,1285,1286,1,0,0,0,1286,1289,1,0,0,0,1287,1285,1,0,0,0,1288,
        1290,5,41,0,0,1289,1288,1,0,0,0,1290,1291,1,0,0,0,1291,1289,1,0,
        0,0,1291,1292,1,0,0,0,1292,89,1,0,0,0,1293,1294,5,9,0,0,1294,1295,
        3,90,45,0,1295,1296,5,10,0,0,1296,1300,1,0,0,0,1297,1300,3,96,48,
        0,1298,1300,5,103,0,0,1299,1293,1,0,0,0,1299,1297,1,0,0,0,1299,1298,
        1,0,0,0,1300,91,1,0,0,0,1301,1305,3,94,47,0,1302,1304,5,5,0,0,1303,
        1302,1,0,0,0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,
        0,1306,1308,1,0,0,0,1307,1305,1,0,0,0,1308,1312,5,7,0,0,1309,1311,
        5,5,0,0,1310,1309,1,0,0,0,1311,1314,1,0,0,0,1312,1310,1,0,0,0,1312,
        1313,1,0,0,0,1313,1316,1,0,0,0,1314,1312,1,0,0,0,1315,1301,1,0,0,
        0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1321,3,100,50,0,1318,
        1320,5,5,0,0,1319,1318,1,0,0,0,1320,1323,1,0,0,0,1321,1319,1,0,0,
        0,1321,1322,1,0,0,0,1322,1324,1,0,0,0,1323,1321,1,0,0,0,1324,1328,
        5,33,0,0,1325,1327,5,5,0,0,1326,1325,1,0,0,0,1327,1330,1,0,0,0,1328,
        1326,1,0,0,0,1328,1329,1,0,0,0,1329,1331,1,0,0,0,1330,1328,1,0,0,
        0,1331,1332,3,82,41,0,1332,93,1,0,0,0,1333,1337,3,86,43,0,1334,1337,
        3,88,44,0,1335,1337,3,90,45,0,1336,1333,1,0,0,0,1336,1334,1,0,0,
        0,1336,1335,1,0,0,0,1337,95,1,0,0,0,1338,1355,3,98,49,0,1339,1341,
        5,5,0,0,1340,1339,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,1342,
        1343,1,0,0,0,1343,1345,1,0,0,0,1344,1342,1,0,0,0,1345,1349,5,7,0,
        0,1346,1348,5,5,0,0,1347,1346,1,0,0,0,1348,1351,1,0,0,0,1349,1347,
        1,0,0,0,1349,1350,1,0,0,0,1350,1352,1,0,0,0,1351,1349,1,0,0,0,1352,
        1354,3,98,49,0,1353,1342,1,0,0,0,1354,1357,1,0,0,0,1355,1353,1,0,
        0,0,1355,1356,1,0,0,0,1356,97,1,0,0,0,1357,1355,1,0,0,0,1358,1366,
        3,290,145,0,1359,1361,5,5,0,0,1360,1359,1,0,0,0,1361,1364,1,0,0,
        0,1362,1360,1,0,0,0,1362,1363,1,0,0,0,1363,1365,1,0,0,0,1364,1362,
        1,0,0,0,1365,1367,3,160,80,0,1366,1362,1,0,0,0,1366,1367,1,0,0,0,
        1367,99,1,0,0,0,1368,1371,5,9,0,0,1369,1372,3,58,29,0,1370,1372,
        3,82,41,0,1371,1369,1,0,0,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,
        1372,1380,1,0,0,0,1373,1376,5,8,0,0,1374,1377,3,58,29,0,1375,1377,
        3,82,41,0,1376,1374,1,0,0,0,1376,1375,1,0,0,0,1377,1379,1,0,0,0,
        1378,1373,1,0,0,0,1379,1382,1,0,0,0,1380,1378,1,0,0,0,1380,1381,
        1,0,0,0,1381,1383,1,0,0,0,1382,1380,1,0,0,0,1383,1384,5,10,0,0,1384,
        101,1,0,0,0,1385,1389,5,73,0,0,1386,1388,5,5,0,0,1387,1386,1,0,0,
        0,1388,1391,1,0,0,0,1389,1387,1,0,0,0,1389,1390,1,0,0,0,1390,1392,
        1,0,0,0,1391,1389,1,0,0,0,1392,1409,3,104,52,0,1393,1395,5,5,0,0,
        1394,1393,1,0,0,0,1395,1398,1,0,0,0,1396,1394,1,0,0,0,1396,1397,
        1,0,0,0,1397,1399,1,0,0,0,1398,1396,1,0,0,0,1399,1403,5,8,0,0,1400,
        1402,5,5,0,0,1401,1400,1,0,0,0,1402,1405,1,0,0,0,1403,1401,1,0,0,
        0,1403,1404,1,0,0,0,1404,1406,1,0,0,0,1405,1403,1,0,0,0,1406,1408,
        3,104,52,0,1407,1396,1,0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,
        1409,1410,1,0,0,0,1410,103,1,0,0,0,1411,1409,1,0,0,0,1412,1414,3,
        278,139,0,1413,1412,1,0,0,0,1414,1417,1,0,0,0,1415,1413,1,0,0,0,
        1415,1416,1,0,0,0,1416,1418,1,0,0,0,1417,1415,1,0,0,0,1418,1422,
        3,290,145,0,1419,1421,5,5,0,0,1420,1419,1,0,0,0,1421,1424,1,0,0,
        0,1422,1420,1,0,0,0,1422,1423,1,0,0,0,1423,1425,1,0,0,0,1424,1422,
        1,0,0,0,1425,1429,5,25,0,0,1426,1428,5,5,0,0,1427,1426,1,0,0,0,1428,
        1431,1,0,0,0,1429,1427,1,0,0,0,1429,1430,1,0,0,0,1430,1432,1,0,0,
        0,1431,1429,1,0,0,0,1432,1433,3,82,41,0,1433,105,1,0,0,0,1434,1435,
        5,13,0,0,1435,1436,3,108,54,0,1436,1437,5,14,0,0,1437,107,1,0,0,
        0,1438,1440,3,294,147,0,1439,1438,1,0,0,0,1440,1443,1,0,0,0,1441,
        1439,1,0,0,0,1441,1442,1,0,0,0,1442,1458,1,0,0,0,1443,1441,1,0,0,
        0,1444,1455,3,110,55,0,1445,1447,3,294,147,0,1446,1445,1,0,0,0,1447,
        1448,1,0,0,0,1448,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1451,1,0,0,
        0,1450,1452,3,110,55,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,
        1454,1,0,0,0,1453,1446,1,0,0,0,1454,1457,1,0,0,0,1455,1453,1,0,0,
        0,1455,1456,1,0,0,0,1456,1459,1,0,0,0,1457,1455,1,0,0,0,1458,1444,
        1,0,0,0,1458,1459,1,0,0,0,1459,109,1,0,0,0,1460,1463,3,114,57,0,
        1461,1463,3,112,56,0,1462,1460,1,0,0,0,1462,1461,1,0,0,0,1463,111,
        1,0,0,0,1464,1466,3,278,139,0,1465,1464,1,0,0,0,1466,1469,1,0,0,
        0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,1473,1,0,0,0,1469,1467,
        1,0,0,0,1470,1472,5,5,0,0,1471,1470,1,0,0,0,1472,1475,1,0,0,0,1473,
        1471,1,0,0,0,1473,1474,1,0,0,0,1474,1476,1,0,0,0,1475,1473,1,0,0,
        0,1476,1477,3,116,58,0,1477,113,1,0,0,0,1478,1480,3,276,138,0,1479,
        1478,1,0,0,0,1480,1483,1,0,0,0,1481,1479,1,0,0,0,1481,1482,1,0,0,
        0,1482,1488,1,0,0,0,1483,1481,1,0,0,0,1484,1489,3,20,10,0,1485,1489,
        3,52,26,0,1486,1489,3,66,33,0,1487,1489,3,76,38,0,1488,1484,1,0,
        0,0,1488,1485,1,0,0,0,1488,1486,1,0,0,0,1488,1487,1,0,0,0,1489,115,
        1,0,0,0,1490,1496,3,118,59,0,1491,1492,3,232,116,0,1492,1493,3,118,
        59,0,1493,1495,1,0,0,0,1494,1491,1,0,0,0,1495,1498,1,0,0,0,1496,
        1494,1,0,0,0,1496,1497,1,0,0,0,1497,117,1,0,0,0,1498,1496,1,0,0,
        0,1499,1516,3,120,60,0,1500,1502,5,5,0,0,1501,1500,1,0,0,0,1502,
        1505,1,0,0,0,1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1506,1,0,0,
        0,1505,1503,1,0,0,0,1506,1510,5,23,0,0,1507,1509,5,5,0,0,1508,1507,
        1,0,0,0,1509,1512,1,0,0,0,1510,1508,1,0,0,0,1510,1511,1,0,0,0,1511,
        1513,1,0,0,0,1512,1510,1,0,0,0,1513,1515,3,120,60,0,1514,1503,1,
        0,0,0,1515,1518,1,0,0,0,1516,1514,1,0,0,0,1516,1517,1,0,0,0,1517,
        119,1,0,0,0,1518,1516,1,0,0,0,1519,1536,3,122,61,0,1520,1522,5,5,
        0,0,1521,1520,1,0,0,0,1522,1525,1,0,0,0,1523,1521,1,0,0,0,1523,1524,
        1,0,0,0,1524,1526,1,0,0,0,1525,1523,1,0,0,0,1526,1530,5,22,0,0,1527,
        1529,5,5,0,0,1528,1527,1,0,0,0,1529,1532,1,0,0,0,1530,1528,1,0,0,
        0,1530,1531,1,0,0,0,1531,1533,1,0,0,0,1532,1530,1,0,0,0,1533,1535,
        3,122,61,0,1534,1523,1,0,0,0,1535,1538,1,0,0,0,1536,1534,1,0,0,0,
        1536,1537,1,0,0,0,1537,121,1,0,0,0,1538,1536,1,0,0,0,1539,1551,3,
        124,62,0,1540,1544,3,234,117,0,1541,1543,5,5,0,0,1542,1541,1,0,0,
        0,1543,1546,1,0,0,0,1544,1542,1,0,0,0,1544,1545,1,0,0,0,1545,1547,
        1,0,0,0,1546,1544,1,0,0,0,1547,1548,3,124,62,0,1548,1550,1,0,0,0,
        1549,1540,1,0,0,0,1550,1553,1,0,0,0,1551,1549,1,0,0,0,1551,1552,
        1,0,0,0,1552,123,1,0,0,0,1553,1551,1,0,0,0,1554,1564,3,126,63,0,
        1555,1559,3,236,118,0,1556,1558,5,5,0,0,1557,1556,1,0,0,0,1558,1561,
        1,0,0,0,1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,1562,1,0,0,0,1561,
        1559,1,0,0,0,1562,1563,3,126,63,0,1563,1565,1,0,0,0,1564,1555,1,
        0,0,0,1564,1565,1,0,0,0,1565,125,1,0,0,0,1566,1589,3,128,64,0,1567,
        1571,3,238,119,0,1568,1570,5,5,0,0,1569,1568,1,0,0,0,1570,1573,1,
        0,0,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,1574,1,0,0,0,1573,
        1571,1,0,0,0,1574,1575,3,128,64,0,1575,1577,1,0,0,0,1576,1567,1,
        0,0,0,1577,1578,1,0,0,0,1578,1576,1,0,0,0,1578,1579,1,0,0,0,1579,
        1590,1,0,0,0,1580,1584,3,240,120,0,1581,1583,5,5,0,0,1582,1581,1,
        0,0,0,1583,1586,1,0,0,0,1584,1582,1,0,0,0,1584,1585,1,0,0,0,1585,
        1587,1,0,0,0,1586,1584,1,0,0,0,1587,1588,3,82,41,0,1588,1590,1,0,
        0,0,1589,1576,1,0,0,0,1589,1580,1,0,0,0,1589,1590,1,0,0,0,1590,127,
        1,0,0,0,1591,1608,3,130,65,0,1592,1594,5,5,0,0,1593,1592,1,0,0,0,
        1594,1597,1,0,0,0,1595,1593,1,0,0,0,1595,1596,1,0,0,0,1596,1598,
        1,0,0,0,1597,1595,1,0,0,0,1598,1602,5,42,0,0,1599,1601,5,5,0,0,1600,
        1599,1,0,0,0,1601,1604,1,0,0,0,1602,1600,1,0,0,0,1602,1603,1,0,0,
        0,1603,1605,1,0,0,0,1604,1602,1,0,0,0,1605,1607,3,130,65,0,1606,
        1595,1,0,0,0,1607,1610,1,0,0,0,1608,1606,1,0,0,0,1608,1609,1,0,0,
        0,1609,129,1,0,0,0,1610,1608,1,0,0,0,1611,1623,3,132,66,0,1612,1616,
        3,290,145,0,1613,1615,5,5,0,0,1614,1613,1,0,0,0,1615,1618,1,0,0,
        0,1616,1614,1,0,0,0,1616,1617,1,0,0,0,1617,1619,1,0,0,0,1618,1616,
        1,0,0,0,1619,1620,3,132,66,0,1620,1622,1,0,0,0,1621,1612,1,0,0,0,
        1622,1625,1,0,0,0,1623,1621,1,0,0,0,1623,1624,1,0,0,0,1624,131,1,
        0,0,0,1625,1623,1,0,0,0,1626,1637,3,134,67,0,1627,1631,5,35,0,0,
        1628,1630,5,5,0,0,1629,1628,1,0,0,0,1630,1633,1,0,0,0,1631,1629,
        1,0,0,0,1631,1632,1,0,0,0,1632,1634,1,0,0,0,1633,1631,1,0,0,0,1634,
        1636,3,134,67,0,1635,1627,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,
        0,0,0,1637,1638,1,0,0,0,1638,133,1,0,0,0,1639,1637,1,0,0,0,1640,
        1652,3,136,68,0,1641,1645,3,242,121,0,1642,1644,5,5,0,0,1643,1642,
        1,0,0,0,1644,1647,1,0,0,0,1645,1643,1,0,0,0,1645,1646,1,0,0,0,1646,
        1648,1,0,0,0,1647,1645,1,0,0,0,1648,1649,3,136,68,0,1649,1651,1,
        0,0,0,1650,1641,1,0,0,0,1651,1654,1,0,0,0,1652,1650,1,0,0,0,1652,
        1653,1,0,0,0,1653,135,1,0,0,0,1654,1652,1,0,0,0,1655,1667,3,138,
        69,0,1656,1660,3,244,122,0,1657,1659,5,5,0,0,1658,1657,1,0,0,0,1659,
        1662,1,0,0,0,1660,1658,1,0,0,0,1660,1661,1,0,0,0,1661,1663,1,0,0,
        0,1662,1660,1,0,0,0,1663,1664,3,138,69,0,1664,1666,1,0,0,0,1665,
        1656,1,0,0,0,1666,1669,1,0,0,0,1667,1665,1,0,0,0,1667,1668,1,0,0,
        0,1668,137,1,0,0,0,1669,1667,1,0,0,0,1670,1682,3,140,70,0,1671,1673,
        5,5,0,0,1672,1671,1,0,0,0,1673,1676,1,0,0,0,1674,1672,1,0,0,0,1674,
        1675,1,0,0,0,1675,1677,1,0,0,0,1676,1674,1,0,0,0,1677,1678,3,246,
        123,0,1678,1679,3,140,70,0,1679,1681,1,0,0,0,1680,1674,1,0,0,0,1681,
        1684,1,0,0,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,139,1,0,0,
        0,1684,1682,1,0,0,0,1685,1687,3,248,124,0,1686,1685,1,0,0,0,1687,
        1690,1,0,0,0,1688,1686,1,0,0,0,1688,1689,1,0,0,0,1689,1691,1,0,0,
        0,1690,1688,1,0,0,0,1691,1692,3,142,71,0,1692,141,1,0,0,0,1693,1696,
        3,144,72,0,1694,1696,3,146,73,0,1695,1693,1,0,0,0,1695,1694,1,0,
        0,0,1696,1700,1,0,0,0,1697,1699,3,250,125,0,1698,1697,1,0,0,0,1699,
        1702,1,0,0,0,1700,1698,1,0,0,0,1700,1701,1,0,0,0,1701,1716,1,0,0,
        0,1702,1700,1,0,0,0,1703,1707,3,290,145,0,1704,1707,3,230,115,0,
        1705,1707,3,146,73,0,1706,1703,1,0,0,0,1706,1704,1,0,0,0,1706,1705,
        1,0,0,0,1707,1712,1,0,0,0,1708,1711,3,250,125,0,1709,1711,3,150,
        75,0,1710,1708,1,0,0,0,1710,1709,1,0,0,0,1711,1714,1,0,0,0,1712,
        1710,1,0,0,0,1712,1713,1,0,0,0,1713,1716,1,0,0,0,1714,1712,1,0,0,
        0,1715,1695,1,0,0,0,1715,1706,1,0,0,0,1716,143,1,0,0,0,1717,1718,
        3,290,145,0,1718,145,1,0,0,0,1719,1731,3,148,74,0,1720,1731,3,168,
        84,0,1721,1731,3,184,92,0,1722,1731,3,194,97,0,1723,1731,3,196,98,
        0,1724,1731,3,198,99,0,1725,1731,3,214,107,0,1726,1731,3,190,95,
        0,1727,1731,3,228,114,0,1728,1731,3,220,110,0,1729,1731,3,192,96,
        0,1730,1719,1,0,0,0,1730,1720,1,0,0,0,1730,1721,1,0,0,0,1730,1722,
        1,0,0,0,1730,1723,1,0,0,0,1730,1724,1,0,0,0,1730,1725,1,0,0,0,1730,
        1726,1,0,0,0,1730,1727,1,0,0,0,1730,1728,1,0,0,0,1730,1729,1,0,0,
        0,1731,147,1,0,0,0,1732,1733,5,9,0,0,1733,1734,3,116,58,0,1734,1735,
        5,10,0,0,1735,149,1,0,0,0,1736,1738,3,160,80,0,1737,1739,3,156,78,
        0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1743,1,0,0,0,1740,1742,
        3,152,76,0,1741,1740,1,0,0,0,1742,1745,1,0,0,0,1743,1741,1,0,0,0,
        1743,1744,1,0,0,0,1744,1759,1,0,0,0,1745,1743,1,0,0,0,1746,1750,
        3,156,78,0,1747,1749,3,152,76,0,1748,1747,1,0,0,0,1749,1752,1,0,
        0,0,1750,1748,1,0,0,0,1750,1751,1,0,0,0,1751,1759,1,0,0,0,1752,1750,
        1,0,0,0,1753,1755,3,152,76,0,1754,1753,1,0,0,0,1755,1756,1,0,0,0,
        1756,1754,1,0,0,0,1756,1757,1,0,0,0,1757,1759,1,0,0,0,1758,1736,
        1,0,0,0,1758,1746,1,0,0,0,1758,1754,1,0,0,0,1759,151,1,0,0,0,1760,
        1762,3,286,143,0,1761,1760,1,0,0,0,1762,1765,1,0,0,0,1763,1761,1,
        0,0,0,1763,1764,1,0,0,0,1764,1767,1,0,0,0,1765,1763,1,0,0,0,1766,
        1768,5,142,0,0,1767,1766,1,0,0,0,1767,1768,1,0,0,0,1768,1772,1,0,
        0,0,1769,1771,5,5,0,0,1770,1769,1,0,0,0,1771,1774,1,0,0,0,1772,1770,
        1,0,0,0,1772,1773,1,0,0,0,1773,1775,1,0,0,0,1774,1772,1,0,0,0,1775,
        1776,3,184,92,0,1776,153,1,0,0,0,1777,1786,5,11,0,0,1778,1783,3,
        116,58,0,1779,1780,5,8,0,0,1780,1782,3,116,58,0,1781,1779,1,0,0,
        0,1782,1785,1,0,0,0,1783,1781,1,0,0,0,1783,1784,1,0,0,0,1784,1787,
        1,0,0,0,1785,1783,1,0,0,0,1786,1778,1,0,0,0,1786,1787,1,0,0,0,1787,
        1788,1,0,0,0,1788,1789,5,12,0,0,1789,155,1,0,0,0,1790,1802,5,9,0,
        0,1791,1792,3,158,79,0,1792,1799,3,166,83,0,1793,1794,5,8,0,0,1794,
        1795,3,158,79,0,1795,1796,3,166,83,0,1796,1798,1,0,0,0,1797,1793,
        1,0,0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,
        1803,1,0,0,0,1801,1799,1,0,0,0,1802,1791,1,0,0,0,1802,1803,1,0,0,
        0,1803,1804,1,0,0,0,1804,1805,5,10,0,0,1805,157,1,0,0,0,1806,1807,
        1,0,0,0,1807,159,1,0,0,0,1808,1812,5,43,0,0,1809,1811,5,5,0,0,1810,
        1809,1,0,0,0,1811,1814,1,0,0,0,1812,1810,1,0,0,0,1812,1813,1,0,0,
        0,1813,1815,1,0,0,0,1814,1812,1,0,0,0,1815,1826,3,162,81,0,1816,
        1818,5,5,0,0,1817,1816,1,0,0,0,1818,1821,1,0,0,0,1819,1817,1,0,0,
        0,1819,1820,1,0,0,0,1820,1822,1,0,0,0,1821,1819,1,0,0,0,1822,1823,
        5,8,0,0,1823,1825,3,162,81,0,1824,1819,1,0,0,0,1825,1828,1,0,0,0,
        1826,1824,1,0,0,0,1826,1827,1,0,0,0,1827,1832,1,0,0,0,1828,1826,
        1,0,0,0,1829,1831,5,5,0,0,1830,1829,1,0,0,0,1831,1834,1,0,0,0,1832,
        1830,1,0,0,0,1832,1833,1,0,0,0,1833,1835,1,0,0,0,1834,1832,1,0,0,
        0,1835,1836,5,44,0,0,1836,161,1,0,0,0,1837,1839,3,164,82,0,1838,
        1837,1,0,0,0,1838,1839,1,0,0,0,1839,1840,1,0,0,0,1840,1843,3,82,
        41,0,1841,1843,5,15,0,0,1842,1838,1,0,0,0,1842,1841,1,0,0,0,1843,
        163,1,0,0,0,1844,1846,3,264,132,0,1845,1844,1,0,0,0,1846,1847,1,
        0,0,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,165,1,0,0,0,1849,
        1853,3,290,145,0,1850,1852,5,5,0,0,1851,1850,1,0,0,0,1852,1855,1,
        0,0,0,1853,1851,1,0,0,0,1853,1854,1,0,0,0,1854,1856,1,0,0,0,1855,
        1853,1,0,0,0,1856,1860,5,27,0,0,1857,1859,5,5,0,0,1858,1857,1,0,
        0,0,1859,1862,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,0,1861,1864,
        1,0,0,0,1862,1860,1,0,0,0,1863,1849,1,0,0,0,1863,1864,1,0,0,0,1864,
        1866,1,0,0,0,1865,1867,5,15,0,0,1866,1865,1,0,0,0,1866,1867,1,0,
        0,0,1867,1871,1,0,0,0,1868,1870,5,5,0,0,1869,1868,1,0,0,0,1870,1873,
        1,0,0,0,1871,1869,1,0,0,0,1871,1872,1,0,0,0,1872,1874,1,0,0,0,1873,
        1871,1,0,0,0,1874,1875,3,116,58,0,1875,167,1,0,0,0,1876,1886,5,138,
        0,0,1877,1886,5,135,0,0,1878,1886,3,170,85,0,1879,1886,5,136,0,0,
        1880,1886,5,137,0,0,1881,1886,5,144,0,0,1882,1886,5,131,0,0,1883,
        1886,5,139,0,0,1884,1886,5,134,0,0,1885,1876,1,0,0,0,1885,1877,1,
        0,0,0,1885,1878,1,0,0,0,1885,1879,1,0,0,0,1885,1880,1,0,0,0,1885,
        1881,1,0,0,0,1885,1882,1,0,0,0,1885,1883,1,0,0,0,1885,1884,1,0,0,
        0,1886,169,1,0,0,0,1887,1890,3,172,86,0,1888,1890,3,174,87,0,1889,
        1887,1,0,0,0,1889,1888,1,0,0,0,1890,171,1,0,0,0,1891,1896,5,129,
        0,0,1892,1895,3,176,88,0,1893,1895,3,178,89,0,1894,1892,1,0,0,0,
        1894,1893,1,0,0,0,1895,1898,1,0,0,0,1896,1894,1,0,0,0,1896,1897,
        1,0,0,0,1897,1899,1,0,0,0,1898,1896,1,0,0,0,1899,1900,5,155,0,0,
        1900,173,1,0,0,0,1901,1908,5,130,0,0,1902,1907,3,180,90,0,1903,1907,
        3,182,91,0,1904,1907,3,172,86,0,1905,1907,5,161,0,0,1906,1902,1,
        0,0,0,1906,1903,1,0,0,0,1906,1904,1,0,0,0,1906,1905,1,0,0,0,1907,
        1910,1,0,0,0,1908,1906,1,0,0,0,1908,1909,1,0,0,0,1909,1911,1,0,0,
        0,1910,1908,1,0,0,0,1911,1912,5,160,0,0,1912,175,1,0,0,0,1913,1914,
        7,3,0,0,1914,177,1,0,0,0,1915,1916,5,159,0,0,1916,1917,3,116,58,
        0,1917,1918,5,14,0,0,1918,179,1,0,0,0,1919,1920,7,4,0,0,1920,181,
        1,0,0,0,1921,1922,5,165,0,0,1922,1923,3,116,58,0,1923,1924,5,14,
        0,0,1924,183,1,0,0,0,1925,1927,3,278,139,0,1926,1925,1,0,0,0,1927,
        1930,1,0,0,0,1928,1926,1,0,0,0,1928,1929,1,0,0,0,1929,1977,1,0,0,
        0,1930,1928,1,0,0,0,1931,1935,5,13,0,0,1932,1934,5,5,0,0,1933,1932,
        1,0,0,0,1934,1937,1,0,0,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,
        1938,1,0,0,0,1937,1935,1,0,0,0,1938,1942,3,108,54,0,1939,1941,5,
        5,0,0,1940,1939,1,0,0,0,1941,1944,1,0,0,0,1942,1940,1,0,0,0,1942,
        1943,1,0,0,0,1943,1945,1,0,0,0,1944,1942,1,0,0,0,1945,1946,5,14,
        0,0,1946,1978,1,0,0,0,1947,1951,5,13,0,0,1948,1950,5,5,0,0,1949,
        1948,1,0,0,0,1950,1953,1,0,0,0,1951,1949,1,0,0,0,1951,1952,1,0,0,
        0,1952,1954,1,0,0,0,1953,1951,1,0,0,0,1954,1958,3,186,93,0,1955,
        1957,5,5,0,0,1956,1955,1,0,0,0,1957,1960,1,0,0,0,1958,1956,1,0,0,
        0,1958,1959,1,0,0,0,1959,1961,1,0,0,0,1960,1958,1,0,0,0,1961,1965,
        5,33,0,0,1962,1964,5,5,0,0,1963,1962,1,0,0,0,1964,1967,1,0,0,0,1965,
        1963,1,0,0,0,1965,1966,1,0,0,0,1966,1968,1,0,0,0,1967,1965,1,0,0,
        0,1968,1972,3,108,54,0,1969,1971,5,5,0,0,1970,1969,1,0,0,0,1971,
        1974,1,0,0,0,1972,1970,1,0,0,0,1972,1973,1,0,0,0,1973,1975,1,0,0,
        0,1974,1972,1,0,0,0,1975,1976,5,14,0,0,1976,1978,1,0,0,0,1977,1931,
        1,0,0,0,1977,1947,1,0,0,0,1978,185,1,0,0,0,1979,1981,3,188,94,0,
        1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1998,1,0,0,0,1982,1984,
        5,5,0,0,1983,1982,1,0,0,0,1984,1987,1,0,0,0,1985,1983,1,0,0,0,1985,
        1986,1,0,0,0,1986,1988,1,0,0,0,1987,1985,1,0,0,0,1988,1992,5,8,0,
        0,1989,1991,5,5,0,0,1990,1989,1,0,0,0,1991,1994,1,0,0,0,1992,1990,
        1,0,0,0,1992,1993,1,0,0,0,1993,1995,1,0,0,0,1994,1992,1,0,0,0,1995,
        1997,3,188,94,0,1996,1985,1,0,0,0,1997,2000,1,0,0,0,1998,1996,1,
        0,0,0,1998,1999,1,0,0,0,1999,187,1,0,0,0,2000,1998,1,0,0,0,2001,
        2020,3,70,35,0,2002,2017,3,68,34,0,2003,2005,5,5,0,0,2004,2003,1,
        0,0,0,2005,2008,1,0,0,0,2006,2004,1,0,0,0,2006,2007,1,0,0,0,2007,
        2009,1,0,0,0,2008,2006,1,0,0,0,2009,2013,5,25,0,0,2010,2012,5,5,
        0,0,2011,2010,1,0,0,0,2012,2015,1,0,0,0,2013,2011,1,0,0,0,2013,2014,
        1,0,0,0,2014,2016,1,0,0,0,2015,2013,1,0,0,0,2016,2018,3,82,41,0,
        2017,2006,1,0,0,0,2017,2018,1,0,0,0,2018,2020,1,0,0,0,2019,2001,
        1,0,0,0,2019,2002,1,0,0,0,2020,189,1,0,0,0,2021,2036,5,62,0,0,2022,
        2024,5,5,0,0,2023,2022,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,
        0,2025,2026,1,0,0,0,2026,2028,1,0,0,0,2027,2025,1,0,0,0,2028,2032,
        5,25,0,0,2029,2031,5,5,0,0,2030,2029,1,0,0,0,2031,2034,1,0,0,0,2032,
        2030,1,0,0,0,2032,2033,1,0,0,0,2033,2035,1,0,0,0,2034,2032,1,0,0,
        0,2035,2037,3,28,14,0,2036,2025,1,0,0,0,2036,2037,1,0,0,0,2037,2041,
        1,0,0,0,2038,2040,5,5,0,0,2039,2038,1,0,0,0,2040,2043,1,0,0,0,2041,
        2039,1,0,0,0,2041,2042,1,0,0,0,2042,2044,1,0,0,0,2043,2041,1,0,0,
        0,2044,2045,3,36,18,0,2045,191,1,0,0,0,2046,2048,5,11,0,0,2047,2049,
        3,116,58,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,2054,1,0,0,0,
        2050,2051,5,8,0,0,2051,2053,3,116,58,0,2052,2050,1,0,0,0,2053,2056,
        1,0,0,0,2054,2052,1,0,0,0,2054,2055,1,0,0,0,2055,2057,1,0,0,0,2056,
        2054,1,0,0,0,2057,2058,5,12,0,0,2058,193,1,0,0,0,2059,2061,5,70,
        0,0,2060,2062,5,141,0,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,
        195,1,0,0,0,2063,2080,5,71,0,0,2064,2068,5,43,0,0,2065,2067,5,5,
        0,0,2066,2065,1,0,0,0,2067,2070,1,0,0,0,2068,2066,1,0,0,0,2068,2069,
        1,0,0,0,2069,2071,1,0,0,0,2070,2068,1,0,0,0,2071,2075,3,82,41,0,
        2072,2074,5,5,0,0,2073,2072,1,0,0,0,2074,2077,1,0,0,0,2075,2073,
        1,0,0,0,2075,2076,1,0,0,0,2076,2078,1,0,0,0,2077,2075,1,0,0,0,2078,
        2079,5,44,0,0,2079,2081,1,0,0,0,2080,2064,1,0,0,0,2080,2081,1,0,
        0,0,2081,2083,1,0,0,0,2082,2084,5,141,0,0,2083,2082,1,0,0,0,2083,
        2084,1,0,0,0,2084,197,1,0,0,0,2085,2088,3,200,100,0,2086,2088,3,
        204,102,0,2087,2085,1,0,0,0,2087,2086,1,0,0,0,2088,199,1,0,0,0,2089,
        2093,5,74,0,0,2090,2092,5,5,0,0,2091,2090,1,0,0,0,2092,2095,1,0,
        0,0,2093,2091,1,0,0,0,2093,2094,1,0,0,0,2094,2096,1,0,0,0,2095,2093,
        1,0,0,0,2096,2097,5,9,0,0,2097,2098,3,116,58,0,2098,2102,5,10,0,
        0,2099,2101,5,5,0,0,2100,2099,1,0,0,0,2101,2104,1,0,0,0,2102,2100,
        1,0,0,0,2102,2103,1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,2105,
        2107,3,202,101,0,2106,2105,1,0,0,0,2106,2107,1,0,0,0,2107,2109,1,
        0,0,0,2108,2110,5,26,0,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,
        2127,1,0,0,0,2111,2113,5,5,0,0,2112,2111,1,0,0,0,2113,2116,1,0,0,
        0,2114,2112,1,0,0,0,2114,2115,1,0,0,0,2115,2117,1,0,0,0,2116,2114,
        1,0,0,0,2117,2121,5,75,0,0,2118,2120,5,5,0,0,2119,2118,1,0,0,0,2120,
        2123,1,0,0,0,2121,2119,1,0,0,0,2121,2122,1,0,0,0,2122,2125,1,0,0,
        0,2123,2121,1,0,0,0,2124,2126,3,202,101,0,2125,2124,1,0,0,0,2125,
        2126,1,0,0,0,2126,2128,1,0,0,0,2127,2114,1,0,0,0,2127,2128,1,0,0,
        0,2128,201,1,0,0,0,2129,2132,3,106,53,0,2130,2132,3,116,58,0,2131,
        2129,1,0,0,0,2131,2130,1,0,0,0,2132,203,1,0,0,0,2133,2137,5,76,0,
        0,2134,2136,5,5,0,0,2135,2134,1,0,0,0,2136,2139,1,0,0,0,2137,2135,
        1,0,0,0,2137,2138,1,0,0,0,2138,2144,1,0,0,0,2139,2137,1,0,0,0,2140,
        2141,5,9,0,0,2141,2142,3,116,58,0,2142,2143,5,10,0,0,2143,2145,1,
        0,0,0,2144,2140,1,0,0,0,2144,2145,1,0,0,0,2145,2149,1,0,0,0,2146,
        2148,5,5,0,0,2147,2146,1,0,0,0,2148,2151,1,0,0,0,2149,2147,1,0,0,
        0,2149,2150,1,0,0,0,2150,2152,1,0,0,0,2151,2149,1,0,0,0,2152,2156,
        5,13,0,0,2153,2155,5,5,0,0,2154,2153,1,0,0,0,2155,2158,1,0,0,0,2156,
        2154,1,0,0,0,2156,2157,1,0,0,0,2157,2168,1,0,0,0,2158,2156,1,0,0,
        0,2159,2163,3,206,103,0,2160,2162,5,5,0,0,2161,2160,1,0,0,0,2162,
        2165,1,0,0,0,2163,2161,1,0,0,0,2163,2164,1,0,0,0,2164,2167,1,0,0,
        0,2165,2163,1,0,0,0,2166,2159,1,0,0,0,2167,2170,1,0,0,0,2168,2166,
        1,0,0,0,2168,2169,1,0,0,0,2169,2174,1,0,0,0,2170,2168,1,0,0,0,2171,
        2173,5,5,0,0,2172,2171,1,0,0,0,2173,2176,1,0,0,0,2174,2172,1,0,0,
        0,2174,2175,1,0,0,0,2175,2177,1,0,0,0,2176,2174,1,0,0,0,2177,2178,
        5,14,0,0,2178,205,1,0,0,0,2179,2196,3,208,104,0,2180,2182,5,5,0,
        0,2181,2180,1,0,0,0,2182,2185,1,0,0,0,2183,2181,1,0,0,0,2183,2184,
        1,0,0,0,2184,2186,1,0,0,0,2185,2183,1,0,0,0,2186,2190,5,8,0,0,2187,
        2189,5,5,0,0,2188,2187,1,0,0,0,2189,2192,1,0,0,0,2190,2188,1,0,0,
        0,2190,2191,1,0,0,0,2191,2193,1,0,0,0,2192,2190,1,0,0,0,2193,2195,
        3,208,104,0,2194,2183,1,0,0,0,2195,2198,1,0,0,0,2196,2194,1,0,0,
        0,2196,2197,1,0,0,0,2197,2202,1,0,0,0,2198,2196,1,0,0,0,2199,2201,
        5,5,0,0,2200,2199,1,0,0,0,2201,2204,1,0,0,0,2202,2200,1,0,0,0,2202,
        2203,1,0,0,0,2203,2205,1,0,0,0,2204,2202,1,0,0,0,2205,2209,5,33,
        0,0,2206,2208,5,5,0,0,2207,2206,1,0,0,0,2208,2211,1,0,0,0,2209,2207,
        1,0,0,0,2209,2210,1,0,0,0,2210,2212,1,0,0,0,2211,2209,1,0,0,0,2212,
        2214,3,202,101,0,2213,2215,3,292,146,0,2214,2213,1,0,0,0,2214,2215,
        1,0,0,0,2215,2232,1,0,0,0,2216,2220,5,75,0,0,2217,2219,5,5,0,0,2218,
        2217,1,0,0,0,2219,2222,1,0,0,0,2220,2218,1,0,0,0,2220,2221,1,0,0,
        0,2221,2223,1,0,0,0,2222,2220,1,0,0,0,2223,2227,5,33,0,0,2224,2226,
        5,5,0,0,2225,2224,1,0,0,0,2226,2229,1,0,0,0,2227,2225,1,0,0,0,2227,
        2228,1,0,0,0,2228,2230,1,0,0,0,2229,2227,1,0,0,0,2230,2232,3,202,
        101,0,2231,2179,1,0,0,0,2231,2216,1,0,0,0,2232,207,1,0,0,0,2233,
        2237,3,116,58,0,2234,2237,3,210,105,0,2235,2237,3,212,106,0,2236,
        2233,1,0,0,0,2236,2234,1,0,0,0,2236,2235,1,0,0,0,2237,209,1,0,0,
        0,2238,2242,3,238,119,0,2239,2241,5,5,0,0,2240,2239,1,0,0,0,2241,
        2244,1,0,0,0,2242,2240,1,0,0,0,2242,2243,1,0,0,0,2243,2245,1,0,0,
        0,2244,2242,1,0,0,0,2245,2246,3,116,58,0,2246,211,1,0,0,0,2247,2251,
        3,240,120,0,2248,2250,5,5,0,0,2249,2248,1,0,0,0,2250,2253,1,0,0,
        0,2251,2249,1,0,0,0,2251,2252,1,0,0,0,2252,2254,1,0,0,0,2253,2251,
        1,0,0,0,2254,2255,3,82,41,0,2255,213,1,0,0,0,2256,2260,5,77,0,0,
        2257,2259,5,5,0,0,2258,2257,1,0,0,0,2259,2262,1,0,0,0,2260,2258,
        1,0,0,0,2260,2261,1,0,0,0,2261,2263,1,0,0,0,2262,2260,1,0,0,0,2263,
        2273,3,106,53,0,2264,2266,5,5,0,0,2265,2264,1,0,0,0,2266,2269,1,
        0,0,0,2267,2265,1,0,0,0,2267,2268,1,0,0,0,2268,2270,1,0,0,0,2269,
        2267,1,0,0,0,2270,2272,3,216,108,0,2271,2267,1,0,0,0,2272,2275,1,
        0,0,0,2273,2271,1,0,0,0,2273,2274,1,0,0,0,2274,2283,1,0,0,0,2275,
        2273,1,0,0,0,2276,2278,5,5,0,0,2277,2276,1,0,0,0,2278,2281,1,0,0,
        0,2279,2277,1,0,0,0,2279,2280,1,0,0,0,2280,2282,1,0,0,0,2281,2279,
        1,0,0,0,2282,2284,3,218,109,0,2283,2279,1,0,0,0,2283,2284,1,0,0,
        0,2284,215,1,0,0,0,2285,2289,5,78,0,0,2286,2288,5,5,0,0,2287,2286,
        1,0,0,0,2288,2291,1,0,0,0,2289,2287,1,0,0,0,2289,2290,1,0,0,0,2290,
        2292,1,0,0,0,2291,2289,1,0,0,0,2292,2296,5,9,0,0,2293,2295,3,278,
        139,0,2294,2293,1,0,0,0,2295,2298,1,0,0,0,2296,2294,1,0,0,0,2296,
        2297,1,0,0,0,2297,2299,1,0,0,0,2298,2296,1,0,0,0,2299,2300,3,290,
        145,0,2300,2301,5,25,0,0,2301,2302,3,96,48,0,2302,2306,5,10,0,0,
        2303,2305,5,5,0,0,2304,2303,1,0,0,0,2305,2308,1,0,0,0,2306,2304,
        1,0,0,0,2306,2307,1,0,0,0,2307,2309,1,0,0,0,2308,2306,1,0,0,0,2309,
        2310,3,106,53,0,2310,217,1,0,0,0,2311,2315,5,79,0,0,2312,2314,5,
        5,0,0,2313,2312,1,0,0,0,2314,2317,1,0,0,0,2315,2313,1,0,0,0,2315,
        2316,1,0,0,0,2316,2318,1,0,0,0,2317,2315,1,0,0,0,2318,2319,3,106,
        53,0,2319,219,1,0,0,0,2320,2324,3,222,111,0,2321,2324,3,224,112,
        0,2322,2324,3,226,113,0,2323,2320,1,0,0,0,2323,2321,1,0,0,0,2323,
        2322,1,0,0,0,2324,221,1,0,0,0,2325,2329,5,80,0,0,2326,2328,5,5,0,
        0,2327,2326,1,0,0,0,2328,2331,1,0,0,0,2329,2327,1,0,0,0,2329,2330,
        1,0,0,0,2330,2332,1,0,0,0,2331,2329,1,0,0,0,2332,2336,5,9,0,0,2333,
        2335,3,278,139,0,2334,2333,1,0,0,0,2335,2338,1,0,0,0,2336,2334,1,
        0,0,0,2336,2337,1,0,0,0,2337,2341,1,0,0,0,2338,2336,1,0,0,0,2339,
        2342,3,70,35,0,2340,2342,3,68,34,0,2341,2339,1,0,0,0,2341,2340,1,
        0,0,0,2342,2343,1,0,0,0,2343,2344,5,89,0,0,2344,2345,3,116,58,0,
        2345,2349,5,10,0,0,2346,2348,5,5,0,0,2347,2346,1,0,0,0,2348,2351,
        1,0,0,0,2349,2347,1,0,0,0,2349,2350,1,0,0,0,2350,2353,1,0,0,0,2351,
        2349,1,0,0,0,2352,2354,3,202,101,0,2353,2352,1,0,0,0,2353,2354,1,
        0,0,0,2354,223,1,0,0,0,2355,2359,5,82,0,0,2356,2358,5,5,0,0,2357,
        2356,1,0,0,0,2358,2361,1,0,0,0,2359,2357,1,0,0,0,2359,2360,1,0,0,
        0,2360,2362,1,0,0,0,2361,2359,1,0,0,0,2362,2363,5,9,0,0,2363,2364,
        3,116,58,0,2364,2368,5,10,0,0,2365,2367,5,5,0,0,2366,2365,1,0,0,
        0,2367,2370,1,0,0,0,2368,2366,1,0,0,0,2368,2369,1,0,0,0,2369,2372,
        1,0,0,0,2370,2368,1,0,0,0,2371,2373,3,202,101,0,2372,2371,1,0,0,
        0,2372,2373,1,0,0,0,2373,225,1,0,0,0,2374,2378,5,81,0,0,2375,2377,
        5,5,0,0,2376,2375,1,0,0,0,2377,2380,1,0,0,0,2378,2376,1,0,0,0,2378,
        2379,1,0,0,0,2379,2382,1,0,0,0,2380,2378,1,0,0,0,2381,2383,3,202,
        101,0,2382,2381,1,0,0,0,2382,2383,1,0,0,0,2383,2387,1,0,0,0,2384,
        2386,5,5,0,0,2385,2384,1,0,0,0,2386,2389,1,0,0,0,2387,2385,1,0,0,
        0,2387,2388,1,0,0,0,2388,2390,1,0,0,0,2389,2387,1,0,0,0,2390,2394,
        5,82,0,0,2391,2393,5,5,0,0,2392,2391,1,0,0,0,2393,2396,1,0,0,0,2394,
        2392,1,0,0,0,2394,2395,1,0,0,0,2395,2397,1,0,0,0,2396,2394,1,0,0,
        0,2397,2398,5,9,0,0,2398,2399,3,116,58,0,2399,2400,5,10,0,0,2400,
        227,1,0,0,0,2401,2405,5,83,0,0,2402,2404,5,5,0,0,2403,2402,1,0,0,
        0,2404,2407,1,0,0,0,2405,2403,1,0,0,0,2405,2406,1,0,0,0,2406,2408,
        1,0,0,0,2407,2405,1,0,0,0,2408,2418,3,116,58,0,2409,2411,7,5,0,0,
        2410,2412,3,116,58,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,2412,2418,
        1,0,0,0,2413,2418,5,85,0,0,2414,2418,5,54,0,0,2415,2418,5,86,0,0,
        2416,2418,5,55,0,0,2417,2401,1,0,0,0,2417,2409,1,0,0,0,2417,2413,
        1,0,0,0,2417,2414,1,0,0,0,2417,2415,1,0,0,0,2417,2416,1,0,0,0,2418,
        229,1,0,0,0,2419,2429,3,96,48,0,2420,2424,5,41,0,0,2421,2423,5,5,
        0,0,2422,2421,1,0,0,0,2423,2426,1,0,0,0,2424,2422,1,0,0,0,2424,2425,
        1,0,0,0,2425,2428,1,0,0,0,2426,2424,1,0,0,0,2427,2420,1,0,0,0,2428,
        2431,1,0,0,0,2429,2427,1,0,0,0,2429,2430,1,0,0,0,2430,2433,1,0,0,
        0,2431,2429,1,0,0,0,2432,2419,1,0,0,0,2432,2433,1,0,0,0,2433,2437,
        1,0,0,0,2434,2436,5,5,0,0,2435,2434,1,0,0,0,2436,2439,1,0,0,0,2437,
        2435,1,0,0,0,2437,2438,1,0,0,0,2438,2440,1,0,0,0,2439,2437,1,0,0,
        0,2440,2444,7,6,0,0,2441,2443,5,5,0,0,2442,2441,1,0,0,0,2443,2446,
        1,0,0,0,2444,2442,1,0,0,0,2444,2445,1,0,0,0,2445,2449,1,0,0,0,2446,
        2444,1,0,0,0,2447,2450,3,288,144,0,2448,2450,5,59,0,0,2449,2447,
        1,0,0,0,2449,2448,1,0,0,0,2450,231,1,0,0,0,2451,2452,7,7,0,0,2452,
        233,1,0,0,0,2453,2454,7,8,0,0,2454,235,1,0,0,0,2455,2456,7,9,0,0,
        2456,237,1,0,0,0,2457,2458,7,10,0,0,2458,239,1,0,0,0,2459,2460,7,
        11,0,0,2460,241,1,0,0,0,2461,2462,7,12,0,0,2462,243,1,0,0,0,2463,
        2464,7,13,0,0,2464,245,1,0,0,0,2465,2466,7,14,0,0,2466,247,1,0,0,
        0,2467,2475,5,20,0,0,2468,2475,5,21,0,0,2469,2475,5,18,0,0,2470,
        2475,5,19,0,0,2471,2475,5,24,0,0,2472,2475,3,278,139,0,2473,2475,
        3,276,138,0,2474,2467,1,0,0,0,2474,2468,1,0,0,0,2474,2469,1,0,0,
        0,2474,2470,1,0,0,0,2474,2471,1,0,0,0,2474,2472,1,0,0,0,2474,2473,
        1,0,0,0,2475,249,1,0,0,0,2476,2491,5,20,0,0,2477,2491,5,21,0,0,2478,
        2479,5,24,0,0,2479,2491,5,24,0,0,2480,2491,3,154,77,0,2481,2483,
        5,5,0,0,2482,2481,1,0,0,0,2483,2486,1,0,0,0,2484,2482,1,0,0,0,2484,
        2485,1,0,0,0,2485,2487,1,0,0,0,2486,2484,1,0,0,0,2487,2488,3,252,
        126,0,2488,2489,3,142,71,0,2489,2491,1,0,0,0,2490,2476,1,0,0,0,2490,
        2477,1,0,0,0,2490,2478,1,0,0,0,2490,2480,1,0,0,0,2490,2484,1,0,0,
        0,2491,251,1,0,0,0,2492,2496,5,7,0,0,2493,2494,5,41,0,0,2494,2496,
        5,7,0,0,2495,2492,1,0,0,0,2495,2493,1,0,0,0,2496,253,1,0,0,0,2497,
        2500,3,278,139,0,2498,2500,3,256,128,0,2499,2497,1,0,0,0,2499,2498,
        1,0,0,0,2500,2501,1,0,0,0,2501,2499,1,0,0,0,2501,2502,1,0,0,0,2502,
        255,1,0,0,0,2503,2513,3,258,129,0,2504,2513,3,260,130,0,2505,2513,
        3,262,131,0,2506,2513,3,264,132,0,2507,2513,3,266,133,0,2508,2513,
        3,268,134,0,2509,2513,3,270,135,0,2510,2513,3,272,136,0,2511,2513,
        3,274,137,0,2512,2503,1,0,0,0,2512,2504,1,0,0,0,2512,2505,1,0,0,
        0,2512,2506,1,0,0,0,2512,2507,1,0,0,0,2512,2508,1,0,0,0,2512,2509,
        1,0,0,0,2512,2510,1,0,0,0,2512,2511,1,0,0,0,2513,2517,1,0,0,0,2514,
        2516,5,5,0,0,2515,2514,1,0,0,0,2516,2519,1,0,0,0,2517,2515,1,0,0,
        0,2517,2518,1,0,0,0,2518,257,1,0,0,0,2519,2517,1,0,0,0,2520,2521,
        7,15,0,0,2521,259,1,0,0,0,2522,2523,7,16,0,0,2523,261,1,0,0,0,2524,
        2525,7,17,0,0,2525,263,1,0,0,0,2526,2527,7,18,0,0,2527,265,1,0,0,
        0,2528,2529,7,19,0,0,2529,267,1,0,0,0,2530,2531,5,123,0,0,2531,269,
        1,0,0,0,2532,2533,7,20,0,0,2533,271,1,0,0,0,2534,2535,7,21,0,0,2535,
        273,1,0,0,0,2536,2537,5,128,0,0,2537,275,1,0,0,0,2538,2542,5,142,
        0,0,2539,2541,5,5,0,0,2540,2539,1,0,0,0,2541,2544,1,0,0,0,2542,2540,
        1,0,0,0,2542,2543,1,0,0,0,2543,277,1,0,0,0,2544,2542,1,0,0,0,2545,
        2548,3,280,140,0,2546,2548,3,282,141,0,2547,2545,1,0,0,0,2547,2546,
        1,0,0,0,2548,2552,1,0,0,0,2549,2551,5,5,0,0,2550,2549,1,0,0,0,2551,
        2554,1,0,0,0,2552,2550,1,0,0,0,2552,2553,1,0,0,0,2553,279,1,0,0,
        0,2554,2552,1,0,0,0,2555,2559,3,284,142,0,2556,2558,5,5,0,0,2557,
        2556,1,0,0,0,2558,2561,1,0,0,0,2559,2557,1,0,0,0,2559,2560,1,0,0,
        0,2560,2562,1,0,0,0,2561,2559,1,0,0,0,2562,2566,5,25,0,0,2563,2565,
        5,5,0,0,2564,2563,1,0,0,0,2565,2568,1,0,0,0,2566,2564,1,0,0,0,2566,
        2567,1,0,0,0,2567,2569,1,0,0,0,2568,2566,1,0,0,0,2569,2570,3,286,
        143,0,2570,2591,1,0,0,0,2571,2579,5,141,0,0,2572,2574,5,5,0,0,2573,
        2572,1,0,0,0,2574,2577,1,0,0,0,2575,2573,1,0,0,0,2575,2576,1,0,0,
        0,2576,2578,1,0,0,0,2577,2575,1,0,0,0,2578,2580,3,160,80,0,2579,
        2575,1,0,0,0,2579,2580,1,0,0,0,2580,2588,1,0,0,0,2581,2583,5,5,0,
        0,2582,2581,1,0,0,0,2583,2586,1,0,0,0,2584,2582,1,0,0,0,2584,2585,
        1,0,0,0,2585,2587,1,0,0,0,2586,2584,1,0,0,0,2587,2589,3,156,78,0,
        2588,2584,1,0,0,0,2588,2589,1,0,0,0,2589,2591,1,0,0,0,2590,2555,
        1,0,0,0,2590,2571,1,0,0,0,2591,281,1,0,0,0,2592,2593,3,284,142,0,
        2593,2594,5,25,0,0,2594,2596,5,11,0,0,2595,2597,3,286,143,0,2596,
        2595,1,0,0,0,2597,2598,1,0,0,0,2598,2596,1,0,0,0,2598,2599,1,0,0,
        0,2599,2600,1,0,0,0,2600,2601,5,12,0,0,2601,2612,1,0,0,0,2602,2603,
        5,40,0,0,2603,2605,5,11,0,0,2604,2606,3,286,143,0,2605,2604,1,0,
        0,0,2606,2607,1,0,0,0,2607,2605,1,0,0,0,2607,2608,1,0,0,0,2608,2609,
        1,0,0,0,2609,2610,5,12,0,0,2610,2612,1,0,0,0,2611,2592,1,0,0,0,2611,
        2602,1,0,0,0,2612,283,1,0,0,0,2613,2614,7,22,0,0,2614,285,1,0,0,
        0,2615,2617,3,288,144,0,2616,2618,3,160,80,0,2617,2616,1,0,0,0,2617,
        2618,1,0,0,0,2618,2620,1,0,0,0,2619,2621,3,156,78,0,2620,2619,1,
        0,0,0,2620,2621,1,0,0,0,2621,287,1,0,0,0,2622,2633,3,290,145,0,2623,
        2625,5,5,0,0,2624,2623,1,0,0,0,2625,2628,1,0,0,0,2626,2624,1,0,0,
        0,2626,2627,1,0,0,0,2627,2629,1,0,0,0,2628,2626,1,0,0,0,2629,2630,
        5,7,0,0,2630,2632,3,290,145,0,2631,2626,1,0,0,0,2632,2635,1,0,0,
        0,2633,2631,1,0,0,0,2633,2634,1,0,0,0,2634,289,1,0,0,0,2635,2633,
        1,0,0,0,2636,2637,7,23,0,0,2637,291,1,0,0,0,2638,2640,5,5,0,0,2639,
        2638,1,0,0,0,2640,2641,1,0,0,0,2641,2639,1,0,0,0,2641,2642,1,0,0,
        0,2642,2657,1,0,0,0,2643,2645,5,5,0,0,2644,2643,1,0,0,0,2645,2648,
        1,0,0,0,2646,2644,1,0,0,0,2646,2647,1,0,0,0,2647,2649,1,0,0,0,2648,
        2646,1,0,0,0,2649,2653,5,26,0,0,2650,2652,5,5,0,0,2651,2650,1,0,
        0,0,2652,2655,1,0,0,0,2653,2651,1,0,0,0,2653,2654,1,0,0,0,2654,2657,
        1,0,0,0,2655,2653,1,0,0,0,2656,2639,1,0,0,0,2656,2646,1,0,0,0,2657,
        293,1,0,0,0,2658,2659,7,24,0,0,2659,295,1,0,0,0,400,299,306,313,
        316,320,323,330,337,344,347,351,354,359,367,375,380,383,387,390,
        395,397,402,410,413,423,426,432,439,443,448,452,457,464,468,473,
        477,482,489,493,496,502,505,515,518,523,526,533,538,545,552,558,
        564,573,580,589,595,601,614,619,626,632,638,645,652,656,661,670,
        678,682,688,692,697,704,710,713,718,727,732,735,741,745,750,754,
        759,763,766,772,779,784,789,793,798,802,807,814,821,825,830,834,
        839,843,851,854,859,864,875,879,882,888,895,899,904,911,915,920,
        924,927,933,937,943,947,952,959,963,968,972,975,981,985,990,997,
        1002,1007,1012,1017,1021,1026,1033,1037,1043,1049,1051,1059,1067,
        1070,1074,1080,1088,1095,1099,1104,1112,1116,1118,1121,1125,1131,
        1137,1139,1144,1150,1155,1158,1164,1171,1175,1180,1187,1196,1203,
        1210,1216,1222,1228,1233,1240,1247,1251,1254,1260,1267,1270,1272,
        1280,1285,1291,1299,1305,1312,1315,1321,1328,1336,1342,1349,1355,
        1362,1366,1371,1376,1380,1389,1396,1403,1409,1415,1422,1429,1441,
        1448,1451,1455,1458,1462,1467,1473,1481,1488,1496,1503,1510,1516,
        1523,1530,1536,1544,1551,1559,1564,1571,1578,1584,1589,1595,1602,
        1608,1616,1623,1631,1637,1645,1652,1660,1667,1674,1682,1688,1695,
        1700,1706,1710,1712,1715,1730,1738,1743,1750,1756,1758,1763,1767,
        1772,1783,1786,1799,1802,1812,1819,1826,1832,1838,1842,1847,1853,
        1860,1863,1866,1871,1885,1889,1894,1896,1906,1908,1928,1935,1942,
        1951,1958,1965,1972,1977,1980,1985,1992,1998,2006,2013,2017,2019,
        2025,2032,2036,2041,2048,2054,2061,2068,2075,2080,2083,2087,2093,
        2102,2106,2109,2114,2121,2125,2127,2131,2137,2144,2149,2156,2163,
        2168,2174,2183,2190,2196,2202,2209,2214,2220,2227,2231,2236,2242,
        2251,2260,2267,2273,2279,2283,2289,2296,2306,2315,2323,2329,2336,
        2341,2349,2353,2359,2368,2372,2378,2382,2387,2394,2405,2411,2417,
        2424,2429,2432,2437,2444,2449,2474,2484,2490,2495,2499,2501,2512,
        2517,2542,2547,2552,2559,2566,2575,2579,2584,2588,2590,2598,2607,
        2611,2617,2620,2626,2633,2641,2646,2653,2656
    ]

class KotlinParser ( Parser ):

    grammarFileName = "KotlinParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'...'", "'.'", "','", "'('", 
                     "<INVALID>", "'['", "<INVALID>", "'{'", "'}'", "'*'", 
                     "'%'", "'/'", "'+'", "'-'", "'++'", "'--'", "'&&'", 
                     "'||'", "'!'", "':'", "';'", "'='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'->'", "'=>'", "'..'", "'::'", 
                     "'?::'", "';;'", "'#'", "'@'", "'?'", "'?:'", "'<'", 
                     "'>'", "'<='", "'>='", "'!='", "'!=='", "'as?'", "'=='", 
                     "'==='", "'''", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'@file'", "'package'", "'import'", "'class'", "'interface'", 
                     "'fun'", "'object'", "'val'", "'var'", "'typealias'", 
                     "'constructor'", "'by'", "'companion'", "'init'", "'this'", 
                     "'super'", "'typeof'", "'where'", "'if'", "'else'", 
                     "'when'", "'try'", "'catch'", "'finally'", "'for'", 
                     "'do'", "'while'", "'throw'", "'return'", "'continue'", 
                     "'break'", "'as'", "'is'", "'in'", "<INVALID>", "<INVALID>", 
                     "'out'", "'@field'", "'@property'", "'@get'", "'@set'", 
                     "'get'", "'set'", "'@receiver'", "'@param'", "'@setparam'", 
                     "'@delegate'", "'dynamic'", "'public'", "'private'", 
                     "'protected'", "'internal'", "'enum'", "'sealed'", 
                     "'annotation'", "'data'", "'inner'", "'tailrec'", "'operator'", 
                     "'inline'", "'infix'", "'external'", "'suspend'", "'override'", 
                     "'abstract'", "'final'", "'open'", "'const'", "'lateinit'", 
                     "'vararg'", "'noinline'", "'crossinline'", "'reified'", 
                     "<INVALID>", "'\"\"\"'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'" ]

    symbolicNames = [ "<INVALID>", "ShebangLine", "DelimitedComment", "LineComment", 
                      "WS", "NL", "RESERVED", "DOT", "COMMA", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
                      "MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", 
                      "CONJ", "DISJ", "EXCL", "COLON", "SEMICOLON", "ASSIGNMENT", 
                      "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", 
                      "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", 
                      "RANGE", "COLONCOLON", "Q_COLONCOLON", "DOUBLE_SEMICOLON", 
                      "HASH", "AT", "QUEST", "ELVIS", "LANGLE", "RANGLE", 
                      "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", "EQEQ", 
                      "EQEQEQ", "SINGLE_QUOTE", "RETURN_AT", "CONTINUE_AT", 
                      "BREAK_AT", "FILE", "PACKAGE", "IMPORT", "CLASS", 
                      "INTERFACE", "FUN", "OBJECT", "VAL", "VAR", "TYPE_ALIAS", 
                      "CONSTRUCTOR", "BY", "COMPANION", "INIT", "THIS", 
                      "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN", 
                      "TRY", "CATCH", "FINALLY", "FOR", "DO", "WHILE", "THROW", 
                      "RETURN", "CONTINUE", "BREAK", "AS", "IS", "IN", "NOT_IS", 
                      "NOT_IN", "OUT", "FIELD", "PROPERTY", "GET", "SET", 
                      "GETTER", "SETTER", "RECEIVER", "PARAM", "SETPARAM", 
                      "DELEGATE", "DYNAMIC", "PUBLIC", "PRIVATE", "PROTECTED", 
                      "INTERNAL", "ENUM", "SEALED", "ANNOTATION", "DATA", 
                      "INNER", "TAILREC", "OPERATOR", "INLINE", "INFIX", 
                      "EXTERNAL", "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", 
                      "OPEN", "CONST", "LATEINIT", "VARARG", "NOINLINE", 
                      "CROSSINLINE", "REIFIED", "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", 
                      "RealLiteral", "FloatLiteral", "DoubleLiteral", "LongLiteral", 
                      "IntegerLiteral", "HexLiteral", "BinLiteral", "BooleanLiteral", 
                      "NullLiteral", "Identifier", "LabelReference", "LabelDefinition", 
                      "FieldIdentifier", "CharacterLiteral", "UNICODE_CLASS_LL", 
                      "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", "UNICODE_CLASS_LT", 
                      "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", 
                      "Inside_Comment", "Inside_WS", "Inside_NL", "QUOTE_CLOSE", 
                      "LineStrRef", "LineStrText", "LineStrEscapedChar", 
                      "LineStrExprStart", "TRIPLE_QUOTE_CLOSE", "MultiLineStringQuote", 
                      "MultiLineStrRef", "MultiLineStrText", "MultiLineStrEscapedChar", 
                      "MultiLineStrExprStart", "MultiLineNL", "StrExpr_IN", 
                      "StrExpr_Comment", "StrExpr_WS", "StrExpr_NL" ]

    RULE_kotlinFile = 0
    RULE_script = 1
    RULE_preamble = 2
    RULE_fileAnnotations = 3
    RULE_fileAnnotation = 4
    RULE_packageHeader = 5
    RULE_importList = 6
    RULE_importHeader = 7
    RULE_importAlias = 8
    RULE_topLevelObject = 9
    RULE_classDeclaration = 10
    RULE_primaryConstructor = 11
    RULE_classParameters = 12
    RULE_classParameter = 13
    RULE_delegationSpecifiers = 14
    RULE_delegationSpecifier = 15
    RULE_constructorInvocation = 16
    RULE_explicitDelegation = 17
    RULE_classBody = 18
    RULE_classMemberDeclaration = 19
    RULE_anonymousInitializer = 20
    RULE_secondaryConstructor = 21
    RULE_constructorDelegationCall = 22
    RULE_enumClassBody = 23
    RULE_enumEntries = 24
    RULE_enumEntry = 25
    RULE_functionDeclaration = 26
    RULE_functionValueParameters = 27
    RULE_functionValueParameter = 28
    RULE_parameter = 29
    RULE_functionBody = 30
    RULE_objectDeclaration = 31
    RULE_companionObject = 32
    RULE_propertyDeclaration = 33
    RULE_multiVariableDeclaration = 34
    RULE_variableDeclaration = 35
    RULE_getter = 36
    RULE_setter = 37
    RULE_typeAlias = 38
    RULE_typeParameters = 39
    RULE_typeParameter = 40
    RULE_type = 41
    RULE_typeModifierList = 42
    RULE_parenthesizedType = 43
    RULE_nullableType = 44
    RULE_typeReference = 45
    RULE_functionType = 46
    RULE_functionTypeReceiver = 47
    RULE_userType = 48
    RULE_simpleUserType = 49
    RULE_functionTypeParameters = 50
    RULE_typeConstraints = 51
    RULE_typeConstraint = 52
    RULE_block = 53
    RULE_statements = 54
    RULE_statement = 55
    RULE_blockLevelExpression = 56
    RULE_declaration = 57
    RULE_expression = 58
    RULE_disjunction = 59
    RULE_conjunction = 60
    RULE_equalityComparison = 61
    RULE_comparison = 62
    RULE_namedInfix = 63
    RULE_elvisExpression = 64
    RULE_infixFunctionCall = 65
    RULE_rangeExpression = 66
    RULE_additiveExpression = 67
    RULE_multiplicativeExpression = 68
    RULE_typeRHS = 69
    RULE_prefixUnaryExpression = 70
    RULE_postfixUnaryExpression = 71
    RULE_variableRead = 72
    RULE_atomicExpression = 73
    RULE_parenthesizedExpression = 74
    RULE_callSuffix = 75
    RULE_annotatedLambda = 76
    RULE_arrayAccess = 77
    RULE_valueArguments = 78
    RULE_suggestArgument = 79
    RULE_typeArguments = 80
    RULE_typeProjection = 81
    RULE_typeProjectionModifierList = 82
    RULE_valueArgument = 83
    RULE_literalConstant = 84
    RULE_stringLiteral = 85
    RULE_lineStringLiteral = 86
    RULE_multiLineStringLiteral = 87
    RULE_lineStringContent = 88
    RULE_lineStringExpression = 89
    RULE_multiLineStringContent = 90
    RULE_multiLineStringExpression = 91
    RULE_functionLiteral = 92
    RULE_lambdaParameters = 93
    RULE_lambdaParameter = 94
    RULE_objectLiteral = 95
    RULE_collectionLiteral = 96
    RULE_thisExpression = 97
    RULE_superExpression = 98
    RULE_conditionalExpression = 99
    RULE_ifExpression = 100
    RULE_controlStructureBody = 101
    RULE_whenExpression = 102
    RULE_whenEntry = 103
    RULE_whenCondition = 104
    RULE_rangeTest = 105
    RULE_typeTest = 106
    RULE_tryExpression = 107
    RULE_catchBlock = 108
    RULE_finallyBlock = 109
    RULE_loopExpression = 110
    RULE_forExpression = 111
    RULE_whileExpression = 112
    RULE_doWhileExpression = 113
    RULE_jumpExpression = 114
    RULE_callableReference = 115
    RULE_assignmentOperator = 116
    RULE_equalityOperation = 117
    RULE_comparisonOperator = 118
    RULE_inOperator = 119
    RULE_isOperator = 120
    RULE_additiveOperator = 121
    RULE_multiplicativeOperation = 122
    RULE_typeOperation = 123
    RULE_prefixUnaryOperation = 124
    RULE_postfixUnaryOperation = 125
    RULE_memberAccessOperator = 126
    RULE_modifierList = 127
    RULE_modifier = 128
    RULE_classModifier = 129
    RULE_memberModifier = 130
    RULE_visibilityModifier = 131
    RULE_varianceAnnotation = 132
    RULE_functionModifier = 133
    RULE_propertyModifier = 134
    RULE_inheritanceModifier = 135
    RULE_parameterModifier = 136
    RULE_typeParameterModifier = 137
    RULE_labelDefinition = 138
    RULE_annotations = 139
    RULE_annotation = 140
    RULE_annotationList = 141
    RULE_annotationUseSiteTarget = 142
    RULE_unescapedAnnotation = 143
    RULE_identifier = 144
    RULE_simpleIdentifier = 145
    RULE_semi = 146
    RULE_anysemi = 147

    ruleNames =  [ "kotlinFile", "script", "preamble", "fileAnnotations", 
                   "fileAnnotation", "packageHeader", "importList", "importHeader", 
                   "importAlias", "topLevelObject", "classDeclaration", 
                   "primaryConstructor", "classParameters", "classParameter", 
                   "delegationSpecifiers", "delegationSpecifier", "constructorInvocation", 
                   "explicitDelegation", "classBody", "classMemberDeclaration", 
                   "anonymousInitializer", "secondaryConstructor", "constructorDelegationCall", 
                   "enumClassBody", "enumEntries", "enumEntry", "functionDeclaration", 
                   "functionValueParameters", "functionValueParameter", 
                   "parameter", "functionBody", "objectDeclaration", "companionObject", 
                   "propertyDeclaration", "multiVariableDeclaration", "variableDeclaration", 
                   "getter", "setter", "typeAlias", "typeParameters", "typeParameter", 
                   "type", "typeModifierList", "parenthesizedType", "nullableType", 
                   "typeReference", "functionType", "functionTypeReceiver", 
                   "userType", "simpleUserType", "functionTypeParameters", 
                   "typeConstraints", "typeConstraint", "block", "statements", 
                   "statement", "blockLevelExpression", "declaration", "expression", 
                   "disjunction", "conjunction", "equalityComparison", "comparison", 
                   "namedInfix", "elvisExpression", "infixFunctionCall", 
                   "rangeExpression", "additiveExpression", "multiplicativeExpression", 
                   "typeRHS", "prefixUnaryExpression", "postfixUnaryExpression", 
                   "variableRead", "atomicExpression", "parenthesizedExpression", 
                   "callSuffix", "annotatedLambda", "arrayAccess", "valueArguments", 
                   "suggestArgument", "typeArguments", "typeProjection", 
                   "typeProjectionModifierList", "valueArgument", "literalConstant", 
                   "stringLiteral", "lineStringLiteral", "multiLineStringLiteral", 
                   "lineStringContent", "lineStringExpression", "multiLineStringContent", 
                   "multiLineStringExpression", "functionLiteral", "lambdaParameters", 
                   "lambdaParameter", "objectLiteral", "collectionLiteral", 
                   "thisExpression", "superExpression", "conditionalExpression", 
                   "ifExpression", "controlStructureBody", "whenExpression", 
                   "whenEntry", "whenCondition", "rangeTest", "typeTest", 
                   "tryExpression", "catchBlock", "finallyBlock", "loopExpression", 
                   "forExpression", "whileExpression", "doWhileExpression", 
                   "jumpExpression", "callableReference", "assignmentOperator", 
                   "equalityOperation", "comparisonOperator", "inOperator", 
                   "isOperator", "additiveOperator", "multiplicativeOperation", 
                   "typeOperation", "prefixUnaryOperation", "postfixUnaryOperation", 
                   "memberAccessOperator", "modifierList", "modifier", "classModifier", 
                   "memberModifier", "visibilityModifier", "varianceAnnotation", 
                   "functionModifier", "propertyModifier", "inheritanceModifier", 
                   "parameterModifier", "typeParameterModifier", "labelDefinition", 
                   "annotations", "annotation", "annotationList", "annotationUseSiteTarget", 
                   "unescapedAnnotation", "identifier", "simpleIdentifier", 
                   "semi", "anysemi" ]

    EOF = Token.EOF
    ShebangLine=1
    DelimitedComment=2
    LineComment=3
    WS=4
    NL=5
    RESERVED=6
    DOT=7
    COMMA=8
    LPAREN=9
    RPAREN=10
    LSQUARE=11
    RSQUARE=12
    LCURL=13
    RCURL=14
    MULT=15
    MOD=16
    DIV=17
    ADD=18
    SUB=19
    INCR=20
    DECR=21
    CONJ=22
    DISJ=23
    EXCL=24
    COLON=25
    SEMICOLON=26
    ASSIGNMENT=27
    ADD_ASSIGNMENT=28
    SUB_ASSIGNMENT=29
    MULT_ASSIGNMENT=30
    DIV_ASSIGNMENT=31
    MOD_ASSIGNMENT=32
    ARROW=33
    DOUBLE_ARROW=34
    RANGE=35
    COLONCOLON=36
    Q_COLONCOLON=37
    DOUBLE_SEMICOLON=38
    HASH=39
    AT=40
    QUEST=41
    ELVIS=42
    LANGLE=43
    RANGLE=44
    LE=45
    GE=46
    EXCL_EQ=47
    EXCL_EQEQ=48
    AS_SAFE=49
    EQEQ=50
    EQEQEQ=51
    SINGLE_QUOTE=52
    RETURN_AT=53
    CONTINUE_AT=54
    BREAK_AT=55
    FILE=56
    PACKAGE=57
    IMPORT=58
    CLASS=59
    INTERFACE=60
    FUN=61
    OBJECT=62
    VAL=63
    VAR=64
    TYPE_ALIAS=65
    CONSTRUCTOR=66
    BY=67
    COMPANION=68
    INIT=69
    THIS=70
    SUPER=71
    TYPEOF=72
    WHERE=73
    IF=74
    ELSE=75
    WHEN=76
    TRY=77
    CATCH=78
    FINALLY=79
    FOR=80
    DO=81
    WHILE=82
    THROW=83
    RETURN=84
    CONTINUE=85
    BREAK=86
    AS=87
    IS=88
    IN=89
    NOT_IS=90
    NOT_IN=91
    OUT=92
    FIELD=93
    PROPERTY=94
    GET=95
    SET=96
    GETTER=97
    SETTER=98
    RECEIVER=99
    PARAM=100
    SETPARAM=101
    DELEGATE=102
    DYNAMIC=103
    PUBLIC=104
    PRIVATE=105
    PROTECTED=106
    INTERNAL=107
    ENUM=108
    SEALED=109
    ANNOTATION=110
    DATA=111
    INNER=112
    TAILREC=113
    OPERATOR=114
    INLINE=115
    INFIX=116
    EXTERNAL=117
    SUSPEND=118
    OVERRIDE=119
    ABSTRACT=120
    FINAL=121
    OPEN=122
    CONST=123
    LATEINIT=124
    VARARG=125
    NOINLINE=126
    CROSSINLINE=127
    REIFIED=128
    QUOTE_OPEN=129
    TRIPLE_QUOTE_OPEN=130
    RealLiteral=131
    FloatLiteral=132
    DoubleLiteral=133
    LongLiteral=134
    IntegerLiteral=135
    HexLiteral=136
    BinLiteral=137
    BooleanLiteral=138
    NullLiteral=139
    Identifier=140
    LabelReference=141
    LabelDefinition=142
    FieldIdentifier=143
    CharacterLiteral=144
    UNICODE_CLASS_LL=145
    UNICODE_CLASS_LM=146
    UNICODE_CLASS_LO=147
    UNICODE_CLASS_LT=148
    UNICODE_CLASS_LU=149
    UNICODE_CLASS_ND=150
    UNICODE_CLASS_NL=151
    Inside_Comment=152
    Inside_WS=153
    Inside_NL=154
    QUOTE_CLOSE=155
    LineStrRef=156
    LineStrText=157
    LineStrEscapedChar=158
    LineStrExprStart=159
    TRIPLE_QUOTE_CLOSE=160
    MultiLineStringQuote=161
    MultiLineStrRef=162
    MultiLineStrText=163
    MultiLineStrEscapedChar=164
    MultiLineStrExprStart=165
    MultiLineNL=166
    StrExpr_IN=167
    StrExpr_Comment=168
    StrExpr_WS=169
    StrExpr_NL=170

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class KotlinFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(KotlinParser.PreambleContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def topLevelObject(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TopLevelObjectContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TopLevelObjectContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_kotlinFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKotlinFile" ):
                listener.enterKotlinFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKotlinFile" ):
                listener.exitKotlinFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKotlinFile" ):
                return visitor.visitKotlinFile(self)
            else:
                return visitor.visitChildren(self)




    def kotlinFile(self):

        localctx = KotlinParser.KotlinFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_kotlinFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 296
                    self.match(KotlinParser.NL) 
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 302
            self.preamble()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                self.state = 303
                self.anysemi()
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 309
                self.topLevelObject()
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                    self.state = 311 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 310
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 313 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                    self.state = 316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                        self.state = 315
                        self.topLevelObject()


                    self.state = 322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 325
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(KotlinParser.PreambleContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript" ):
                return visitor.visitScript(self)
            else:
                return visitor.visitChildren(self)




    def script(self):

        localctx = KotlinParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 327
                    self.match(KotlinParser.NL) 
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 333
            self.preamble()
            self.state = 337
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 334
                    self.anysemi() 
                self.state = 339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 340
                self.expression()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                    self.state = 342 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 341
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 344 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                    self.state = 347
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 346
                        self.expression()


                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 356
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreambleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(KotlinParser.PackageHeaderContext,0)


        def importList(self):
            return self.getTypedRuleContext(KotlinParser.ImportListContext,0)


        def fileAnnotations(self):
            return self.getTypedRuleContext(KotlinParser.FileAnnotationsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_preamble

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreamble" ):
                listener.enterPreamble(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreamble" ):
                listener.exitPreamble(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreamble" ):
                return visitor.visitPreamble(self)
            else:
                return visitor.visitChildren(self)




    def preamble(self):

        localctx = KotlinParser.PreambleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preamble)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 358
                self.fileAnnotations()


            self.state = 361
            self.packageHeader()
            self.state = 362
            self.importList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileAnnotationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FileAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FileAnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotations" ):
                listener.enterFileAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotations" ):
                listener.exitFileAnnotations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileAnnotations" ):
                return visitor.visitFileAnnotations(self)
            else:
                return visitor.visitChildren(self)




    def fileAnnotations(self):

        localctx = KotlinParser.FileAnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fileAnnotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 364
                    self.fileAnnotation()

                else:
                    raise NoViableAltException(self)
                self.state = 367 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.FILE)
            else:
                return self.getToken(KotlinParser.FILE, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COLON)
            else:
                return self.getToken(KotlinParser.COLON, i)

        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.LSQUARE)
            else:
                return self.getToken(KotlinParser.LSQUARE, i)

        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RSQUARE)
            else:
                return self.getToken(KotlinParser.RSQUARE, i)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def semi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotation" ):
                listener.enterFileAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotation" ):
                listener.exitFileAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileAnnotation" ):
                return visitor.visitFileAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def fileAnnotation(self):

        localctx = KotlinParser.FileAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fileAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 369
                    self.match(KotlinParser.FILE)
                    self.state = 370
                    self.match(KotlinParser.COLON)
                    self.state = 380
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.LSQUARE]:
                        self.state = 371
                        self.match(KotlinParser.LSQUARE)
                        self.state = 373 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 372
                            self.unescapedAnnotation()
                            self.state = 375 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                                break

                        self.state = 377
                        self.match(KotlinParser.RSQUARE)
                        pass
                    elif token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                        self.state = 379
                        self.unescapedAnnotation()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 383
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        self.state = 382
                        self.semi()



                else:
                    raise NoViableAltException(self)
                self.state = 387 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(KotlinParser.PACKAGE, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_packageHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageHeader" ):
                listener.enterPackageHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageHeader" ):
                listener.exitPackageHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageHeader" ):
                return visitor.visitPackageHeader(self)
            else:
                return visitor.visitChildren(self)




    def packageHeader(self):

        localctx = KotlinParser.PackageHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_packageHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 389
                    self.modifierList()


                self.state = 392
                self.match(KotlinParser.PACKAGE)
                self.state = 393
                self.identifier()
                self.state = 395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 394
                    self.semi()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importHeader(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ImportHeaderContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ImportHeaderContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_importList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportList" ):
                listener.enterImportList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportList" ):
                listener.exitImportList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportList" ):
                return visitor.visitImportList(self)
            else:
                return visitor.visitChildren(self)




    def importList(self):

        localctx = KotlinParser.ImportListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 399
                    self.importHeader() 
                self.state = 404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def importAlias(self):
            return self.getTypedRuleContext(KotlinParser.ImportAliasContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportHeader" ):
                listener.enterImportHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportHeader" ):
                listener.exitImportHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportHeader" ):
                return visitor.visitImportHeader(self)
            else:
                return visitor.visitChildren(self)




    def importHeader(self):

        localctx = KotlinParser.ImportHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(KotlinParser.IMPORT)
            self.state = 406
            self.identifier()
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.DOT]:
                self.state = 407
                self.match(KotlinParser.DOT)
                self.state = 408
                self.match(KotlinParser.MULT)
                pass
            elif token in [KotlinParser.AS]:
                self.state = 409
                self.importAlias()
                pass
            elif token in [KotlinParser.EOF, KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.SEMICOLON, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CLASS, KotlinParser.INTERFACE, KotlinParser.FUN, KotlinParser.OBJECT, KotlinParser.VAL, KotlinParser.VAR, KotlinParser.TYPE_ALIAS, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                pass
            else:
                pass
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 412
                self.semi()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAlias" ):
                listener.enterImportAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAlias" ):
                listener.exitImportAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportAlias" ):
                return visitor.visitImportAlias(self)
            else:
                return visitor.visitChildren(self)




    def importAlias(self):

        localctx = KotlinParser.ImportAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(KotlinParser.AS)
            self.state = 416
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_topLevelObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelObject" ):
                listener.enterTopLevelObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelObject" ):
                listener.exitTopLevelObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelObject" ):
                return visitor.visitTopLevelObject(self)
            else:
                return visitor.visitChildren(self)




    def topLevelObject(self):

        localctx = KotlinParser.TopLevelObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_topLevelObject)
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 419
                self.objectDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 420
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 421
                self.propertyDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 422
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def INTERFACE(self):
            return self.getToken(KotlinParser.INTERFACE, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def enumClassBody(self):
            return self.getTypedRuleContext(KotlinParser.EnumClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = KotlinParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 425
                self.modifierList()


            self.state = 428
            _la = self._input.LA(1)
            if not(_la==KotlinParser.CLASS or _la==KotlinParser.INTERFACE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 429
                self.match(KotlinParser.NL)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 435
            self.simpleIdentifier()
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 436
                    self.match(KotlinParser.NL)
                    self.state = 441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 442
                self.typeParameters()


            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 445
                    self.match(KotlinParser.NL)
                    self.state = 450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 451
                self.primaryConstructor()


            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 454
                    self.match(KotlinParser.NL)
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 460
                self.match(KotlinParser.COLON)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 461
                    self.match(KotlinParser.NL)
                    self.state = 466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 467
                self.delegationSpecifiers()


            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 470
                    self.match(KotlinParser.NL)
                    self.state = 475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 476
                self.typeConstraints()


            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 479
                    self.match(KotlinParser.NL)
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 485
                self.classBody()

            elif la_ == 2:
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 486
                    self.match(KotlinParser.NL)
                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 492
                self.enumClassBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParameters(self):
            return self.getTypedRuleContext(KotlinParser.ClassParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_primaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryConstructor" ):
                listener.enterPrimaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryConstructor" ):
                listener.exitPrimaryConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryConstructor" ):
                return visitor.visitPrimaryConstructor(self)
            else:
                return visitor.visitChildren(self)




    def primaryConstructor(self):

        localctx = KotlinParser.PrimaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_primaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 495
                self.modifierList()


            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.CONSTRUCTOR:
                self.state = 498
                self.match(KotlinParser.CONSTRUCTOR)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 499
                    self.match(KotlinParser.NL)
                    self.state = 504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 507
            self.classParameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def classParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameters" ):
                listener.enterClassParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameters" ):
                listener.exitClassParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParameters" ):
                return visitor.visitClassParameters(self)
            else:
                return visitor.visitChildren(self)




    def classParameters(self):

        localctx = KotlinParser.ClassParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(KotlinParser.LPAREN)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.GETTER - 40)) | (1 << (KotlinParser.SETTER - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.DYNAMIC - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.Identifier - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 510
                self.classParameter()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 511
                    self.match(KotlinParser.COMMA)
                    self.state = 512
                    self.classParameter()
                    self.state = 517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 520
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameter" ):
                listener.enterClassParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameter" ):
                listener.exitClassParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParameter" ):
                return visitor.visitClassParameter(self)
            else:
                return visitor.visitChildren(self)




    def classParameter(self):

        localctx = KotlinParser.ClassParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 522
                self.modifierList()


            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.VAL or _la==KotlinParser.VAR:
                self.state = 525
                _la = self._input.LA(1)
                if not(_la==KotlinParser.VAL or _la==KotlinParser.VAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 528
            self.simpleIdentifier()
            self.state = 529
            self.match(KotlinParser.COLON)
            self.state = 530
            self.type_()
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.ASSIGNMENT:
                self.state = 531
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 532
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.DelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.DelegationSpecifierContext,i)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifiers" ):
                listener.enterDelegationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifiers" ):
                listener.exitDelegationSpecifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelegationSpecifiers" ):
                return visitor.visitDelegationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def delegationSpecifiers(self):

        localctx = KotlinParser.DelegationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_delegationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 535
                self.annotations()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 541
            self.delegationSpecifier()
            self.state = 558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 542
                        self.match(KotlinParser.NL)
                        self.state = 547
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 548
                    self.match(KotlinParser.COMMA)
                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 549
                        self.match(KotlinParser.NL)
                        self.state = 554
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 555
                    self.delegationSpecifier() 
                self.state = 560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorInvocationContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def explicitDelegation(self):
            return self.getTypedRuleContext(KotlinParser.ExplicitDelegationContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifier" ):
                listener.enterDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifier" ):
                listener.exitDelegationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelegationSpecifier" ):
                return visitor.visitDelegationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def delegationSpecifier(self):

        localctx = KotlinParser.DelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delegationSpecifier)
        try:
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 561
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 563
                self.explicitDelegation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_constructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInvocation" ):
                listener.enterConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInvocation" ):
                listener.exitConstructorInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorInvocation" ):
                return visitor.visitConstructorInvocation(self)
            else:
                return visitor.visitChildren(self)




    def constructorInvocation(self):

        localctx = KotlinParser.ConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.userType()
            self.state = 567
            self.callSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitDelegationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_explicitDelegation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitDelegation" ):
                listener.enterExplicitDelegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitDelegation" ):
                listener.exitExplicitDelegation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitDelegation" ):
                return visitor.visitExplicitDelegation(self)
            else:
                return visitor.visitChildren(self)




    def explicitDelegation(self):

        localctx = KotlinParser.ExplicitDelegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_explicitDelegation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.userType()
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 570
                self.match(KotlinParser.NL)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 576
            self.match(KotlinParser.BY)
            self.state = 580
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 577
                    self.match(KotlinParser.NL) 
                self.state = 582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 583
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = KotlinParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(KotlinParser.LCURL)
            self.state = 589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 586
                    self.match(KotlinParser.NL) 
                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 592
                self.classMemberDeclaration()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 598
                self.match(KotlinParser.NL)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def companionObject(self):
            return self.getTypedRuleContext(KotlinParser.CompanionObjectContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def anonymousInitializer(self):
            return self.getTypedRuleContext(KotlinParser.AnonymousInitializerContext,0)


        def secondaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.SecondaryConstructorContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassMemberDeclaration" ):
                return visitor.visitClassMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classMemberDeclaration(self):

        localctx = KotlinParser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classMemberDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 606
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.state = 607
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.state = 608
                self.objectDeclaration()
                pass

            elif la_ == 4:
                self.state = 609
                self.companionObject()
                pass

            elif la_ == 5:
                self.state = 610
                self.propertyDeclaration()
                pass

            elif la_ == 6:
                self.state = 611
                self.anonymousInitializer()
                pass

            elif la_ == 7:
                self.state = 612
                self.secondaryConstructor()
                pass

            elif la_ == 8:
                self.state = 613
                self.typeAlias()
                pass


            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 616
                    self.anysemi() 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_anonymousInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousInitializer" ):
                listener.enterAnonymousInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousInitializer" ):
                listener.exitAnonymousInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnonymousInitializer" ):
                return visitor.visitAnonymousInitializer(self)
            else:
                return visitor.visitChildren(self)




    def anonymousInitializer(self):

        localctx = KotlinParser.AnonymousInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_anonymousInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(KotlinParser.INIT)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 623
                self.match(KotlinParser.NL)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecondaryConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def constructorDelegationCall(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorDelegationCallContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_secondaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondaryConstructor" ):
                listener.enterSecondaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondaryConstructor" ):
                listener.exitSecondaryConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecondaryConstructor" ):
                return visitor.visitSecondaryConstructor(self)
            else:
                return visitor.visitChildren(self)




    def secondaryConstructor(self):

        localctx = KotlinParser.SecondaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_secondaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 631
                self.modifierList()


            self.state = 634
            self.match(KotlinParser.CONSTRUCTOR)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 635
                self.match(KotlinParser.NL)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 641
            self.functionValueParameters()
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 642
                    self.match(KotlinParser.NL)
                    self.state = 647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 648
                self.match(KotlinParser.COLON)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 649
                    self.match(KotlinParser.NL)
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 655
                self.constructorDelegationCall()


            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 658
                self.match(KotlinParser.NL)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 664
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDelegationCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_constructorDelegationCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDelegationCall" ):
                listener.enterConstructorDelegationCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDelegationCall" ):
                listener.exitConstructorDelegationCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDelegationCall" ):
                return visitor.visitConstructorDelegationCall(self)
            else:
                return visitor.visitChildren(self)




    def constructorDelegationCall(self):

        localctx = KotlinParser.ConstructorDelegationCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_constructorDelegationCall)
        self._la = 0 # Token type
        try:
            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.THIS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.match(KotlinParser.THIS)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 667
                    self.match(KotlinParser.NL)
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 673
                self.valueArguments()
                pass
            elif token in [KotlinParser.SUPER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(KotlinParser.SUPER)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 675
                    self.match(KotlinParser.NL)
                    self.state = 680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 681
                self.valueArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def enumEntries(self):
            return self.getTypedRuleContext(KotlinParser.EnumEntriesContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_enumClassBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumClassBody" ):
                listener.enterEnumClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumClassBody" ):
                listener.exitEnumClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumClassBody" ):
                return visitor.visitEnumClassBody(self)
            else:
                return visitor.visitChildren(self)




    def enumClassBody(self):

        localctx = KotlinParser.EnumClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumClassBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(KotlinParser.LCURL)
            self.state = 688
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 685
                    self.match(KotlinParser.NL) 
                self.state = 690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0):
                self.state = 691
                self.enumEntries()


            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 694
                    self.match(KotlinParser.NL)
                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 700
                self.match(KotlinParser.SEMICOLON)
                self.state = 704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 701
                        self.match(KotlinParser.NL) 
                    self.state = 706
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                    self.state = 707
                    self.classMemberDeclaration()
                    self.state = 712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 715
                self.match(KotlinParser.NL)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 721
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EnumEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EnumEntryContext,i)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntries" ):
                listener.enterEnumEntries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntries" ):
                listener.exitEnumEntries(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumEntries" ):
                return visitor.visitEnumEntries(self)
            else:
                return visitor.visitChildren(self)




    def enumEntries(self):

        localctx = KotlinParser.EnumEntriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumEntries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 723
                self.enumEntry()
                self.state = 727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 724
                        self.match(KotlinParser.NL) 
                    self.state = 729
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 732 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                    break

            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 734
                self.match(KotlinParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def COMMA(self):
            return self.getToken(KotlinParser.COMMA, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntry" ):
                listener.enterEnumEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntry" ):
                listener.exitEnumEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumEntry" ):
                return visitor.visitEnumEntry(self)
            else:
                return visitor.visitChildren(self)




    def enumEntry(self):

        localctx = KotlinParser.EnumEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.simpleIdentifier()
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 738
                    self.match(KotlinParser.NL)
                    self.state = 743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 744
                self.valueArguments()


            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 747
                    self.match(KotlinParser.NL)
                    self.state = 752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 753
                self.classBody()


            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 756
                    self.match(KotlinParser.NL)
                    self.state = 761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 762
                self.match(KotlinParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = KotlinParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 765
                self.modifierList()


            self.state = 768
            self.match(KotlinParser.FUN)
            self.state = 784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 769
                    self.match(KotlinParser.NL)
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 775
                self.type_()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 776
                    self.match(KotlinParser.NL)
                    self.state = 781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 782
                self.match(KotlinParser.DOT)


            self.state = 793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 786
                    self.match(KotlinParser.NL)
                    self.state = 791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 792
                self.typeParameters()


            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 795
                    self.match(KotlinParser.NL)
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 801
                self.identifier()


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 804
                self.match(KotlinParser.NL)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 810
            self.functionValueParameters()
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 811
                    self.match(KotlinParser.NL)
                    self.state = 816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 817
                self.match(KotlinParser.COLON)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 818
                    self.match(KotlinParser.NL)
                    self.state = 823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 824
                self.type_()


            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 827
                    self.match(KotlinParser.NL)
                    self.state = 832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 833
                self.typeConstraints()


            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 836
                    self.match(KotlinParser.NL)
                    self.state = 841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 842
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionValueParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FunctionValueParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FunctionValueParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameters" ):
                listener.enterFunctionValueParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameters" ):
                listener.exitFunctionValueParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionValueParameters" ):
                return visitor.visitFunctionValueParameters(self)
            else:
                return visitor.visitChildren(self)




    def functionValueParameters(self):

        localctx = KotlinParser.FunctionValueParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_functionValueParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(KotlinParser.LPAREN)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.GETTER - 40)) | (1 << (KotlinParser.SETTER - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.DYNAMIC - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.Identifier - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 846
                self.functionValueParameter()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 847
                    self.match(KotlinParser.COMMA)
                    self.state = 848
                    self.functionValueParameter()
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 856
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameter" ):
                listener.enterFunctionValueParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameter" ):
                listener.exitFunctionValueParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionValueParameter" ):
                return visitor.visitFunctionValueParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionValueParameter(self):

        localctx = KotlinParser.FunctionValueParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_functionValueParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 858
                self.modifierList()


            self.state = 861
            self.parameter()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.ASSIGNMENT:
                self.state = 862
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 863
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = KotlinParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.simpleIdentifier()
            self.state = 867
            self.match(KotlinParser.COLON)
            self.state = 868
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = KotlinParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionBody)
        try:
            self.state = 879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LCURL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                self.block()
                pass
            elif token in [KotlinParser.ASSIGNMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 872
                        self.match(KotlinParser.NL) 
                    self.state = 877
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 878
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDeclaration" ):
                listener.enterObjectDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDeclaration" ):
                listener.exitObjectDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectDeclaration" ):
                return visitor.visitObjectDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def objectDeclaration(self):

        localctx = KotlinParser.ObjectDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_objectDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 881
                self.modifierList()


            self.state = 884
            self.match(KotlinParser.OBJECT)
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 885
                self.match(KotlinParser.NL)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 891
            self.simpleIdentifier()
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 892
                    self.match(KotlinParser.NL)
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 898
                self.primaryConstructor()


            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 901
                    self.match(KotlinParser.NL)
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 907
                self.match(KotlinParser.COLON)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 908
                    self.match(KotlinParser.NL)
                    self.state = 913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 914
                self.delegationSpecifiers()


            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 917
                    self.match(KotlinParser.NL)
                    self.state = 922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 923
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompanionObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def modifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierListContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierListContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_companionObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompanionObject" ):
                listener.enterCompanionObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompanionObject" ):
                listener.exitCompanionObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompanionObject" ):
                return visitor.visitCompanionObject(self)
            else:
                return visitor.visitChildren(self)




    def companionObject(self):

        localctx = KotlinParser.CompanionObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_companionObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 926
                self.modifierList()


            self.state = 929
            self.match(KotlinParser.COMPANION)
            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 930
                self.match(KotlinParser.NL)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 936
                self.modifierList()


            self.state = 939
            self.match(KotlinParser.OBJECT)
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 940
                    self.match(KotlinParser.NL)
                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 946
                self.simpleIdentifier()


            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 949
                    self.match(KotlinParser.NL)
                    self.state = 954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 955
                self.match(KotlinParser.COLON)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 956
                    self.match(KotlinParser.NL)
                    self.state = 961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 962
                self.delegationSpecifiers()


            self.state = 972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 965
                    self.match(KotlinParser.NL)
                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 971
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getter(self):
            return self.getTypedRuleContext(KotlinParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(KotlinParser.SetterContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyDeclaration" ):
                return visitor.visitPropertyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyDeclaration(self):

        localctx = KotlinParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 974
                self.modifierList()


            self.state = 977
            _la = self._input.LA(1)
            if not(_la==KotlinParser.VAL or _la==KotlinParser.VAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 978
                    self.match(KotlinParser.NL)
                    self.state = 983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 984
                self.typeParameters()


            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 987
                    self.match(KotlinParser.NL)
                    self.state = 992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 993
                self.type_()
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 994
                    self.match(KotlinParser.NL)
                    self.state = 999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1000
                self.match(KotlinParser.DOT)


            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1004
                self.match(KotlinParser.NL)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1012
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN]:
                self.state = 1010
                self.multiVariableDeclaration()
                pass
            elif token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.state = 1011
                self.variableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1014
                    self.match(KotlinParser.NL)
                    self.state = 1019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1020
                self.typeConstraints()


            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1023
                    self.match(KotlinParser.NL)
                    self.state = 1028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1029
                _la = self._input.LA(1)
                if not(_la==KotlinParser.ASSIGNMENT or _la==KotlinParser.BY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1030
                        self.match(KotlinParser.NL) 
                    self.state = 1035
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 1036
                self.expression()


            self.state = 1051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1039
                self.getter()
                self.state = 1043
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1040
                    self.semi()
                    self.state = 1041
                    self.setter()



            elif la_ == 2:
                self.state = 1045
                self.setter()
                self.state = 1049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1046
                    self.semi()
                    self.state = 1047
                    self.getter()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,i)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiVariableDeclaration" ):
                listener.enterMultiVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiVariableDeclaration" ):
                listener.exitMultiVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiVariableDeclaration" ):
                return visitor.visitMultiVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def multiVariableDeclaration(self):

        localctx = KotlinParser.MultiVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_multiVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(KotlinParser.LPAREN)
            self.state = 1054
            self.variableDeclaration()
            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.COMMA:
                self.state = 1055
                self.match(KotlinParser.COMMA)
                self.state = 1056
                self.variableDeclaration()
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1062
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = KotlinParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.simpleIdentifier()
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.COLON:
                self.state = 1065
                self.match(KotlinParser.COLON)
                self.state = 1066
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETTER(self):
            return self.getToken(KotlinParser.GETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter" ):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)




    def getter(self):

        localctx = KotlinParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1069
                    self.modifierList()


                self.state = 1072
                self.match(KotlinParser.GETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1073
                    self.modifierList()


                self.state = 1076
                self.match(KotlinParser.GETTER)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1077
                    self.match(KotlinParser.NL)
                    self.state = 1082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1083
                self.match(KotlinParser.LPAREN)
                self.state = 1084
                self.match(KotlinParser.RPAREN)
                self.state = 1099
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1085
                        self.match(KotlinParser.NL)
                        self.state = 1090
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1091
                    self.match(KotlinParser.COLON)
                    self.state = 1095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1092
                        self.match(KotlinParser.NL)
                        self.state = 1097
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1098
                    self.type_()


                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1101
                    self.match(KotlinParser.NL)
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1116
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.LCURL]:
                    self.state = 1107
                    self.block()
                    pass
                elif token in [KotlinParser.ASSIGNMENT]:
                    self.state = 1108
                    self.match(KotlinParser.ASSIGNMENT)
                    self.state = 1112
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1109
                            self.match(KotlinParser.NL) 
                        self.state = 1114
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                    self.state = 1115
                    self.expression()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTER(self):
            return self.getToken(KotlinParser.SETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def parameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter" ):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)




    def setter(self):

        localctx = KotlinParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_setter)
        self._la = 0 # Token type
        try:
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1120
                    self.modifierList()


                self.state = 1123
                self.match(KotlinParser.SETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1124
                    self.modifierList()


                self.state = 1127
                self.match(KotlinParser.SETTER)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1128
                    self.match(KotlinParser.NL)
                    self.state = 1133
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1134
                self.match(KotlinParser.LPAREN)
                self.state = 1139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1137
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                            self.state = 1135
                            self.annotations()
                            pass
                        elif token in [KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE]:
                            self.state = 1136
                            self.parameterModifier()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1141
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

                self.state = 1144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1142
                    self.simpleIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 1143
                    self.parameter()
                    pass


                self.state = 1146
                self.match(KotlinParser.RPAREN)
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1147
                    self.match(KotlinParser.NL)
                    self.state = 1152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1153
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_ALIAS(self):
            return self.getToken(KotlinParser.TYPE_ALIAS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = KotlinParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 1157
                self.modifierList()


            self.state = 1160
            self.match(KotlinParser.TYPE_ALIAS)
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1161
                self.match(KotlinParser.NL)
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1167
            self.simpleIdentifier()
            self.state = 1175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1168
                    self.match(KotlinParser.NL)
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1174
                self.typeParameters()


            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1177
                self.match(KotlinParser.NL)
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1183
            self.match(KotlinParser.ASSIGNMENT)
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1184
                self.match(KotlinParser.NL)
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1190
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeParameterContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = KotlinParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(KotlinParser.LANGLE)
            self.state = 1196
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1193
                    self.match(KotlinParser.NL) 
                self.state = 1198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

            self.state = 1199
            self.typeParameter()
            self.state = 1216
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1203
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1200
                        self.match(KotlinParser.NL)
                        self.state = 1205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1206
                    self.match(KotlinParser.COMMA)
                    self.state = 1210
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1207
                            self.match(KotlinParser.NL) 
                        self.state = 1212
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                    self.state = 1213
                    self.typeParameter() 
                self.state = 1218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1219
                self.match(KotlinParser.NL)
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1225
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = KotlinParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1227
                self.modifierList()


            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1230
                self.match(KotlinParser.NL)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1236
            self.simpleIdentifier()
            self.state = 1251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1237
                    self.match(KotlinParser.NL)
                    self.state = 1242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1243
                self.match(KotlinParser.COLON)
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1244
                    self.match(KotlinParser.NL)
                    self.state = 1249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1250
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def typeModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifierListContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = KotlinParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1253
                self.typeModifierList()


            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1256
                self.functionType()
                pass

            elif la_ == 2:
                self.state = 1257
                self.parenthesizedType()
                pass

            elif la_ == 3:
                self.state = 1258
                self.nullableType()
                pass

            elif la_ == 4:
                self.state = 1259
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def SUSPEND(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.SUSPEND)
            else:
                return self.getToken(KotlinParser.SUSPEND, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeModifierList" ):
                listener.enterTypeModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeModifierList" ):
                listener.exitTypeModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeModifierList" ):
                return visitor.visitTypeModifierList(self)
            else:
                return visitor.visitChildren(self)




    def typeModifierList(self):

        localctx = KotlinParser.TypeModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_typeModifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1270
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                        self.state = 1262
                        self.annotations()
                        pass
                    elif token in [KotlinParser.SUSPEND]:
                        self.state = 1263
                        self.match(KotlinParser.SUSPEND)
                        self.state = 1267
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 1264
                            self.match(KotlinParser.NL)
                            self.state = 1269
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1272 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedType" ):
                listener.enterParenthesizedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedType" ):
                listener.exitParenthesizedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedType" ):
                return visitor.visitParenthesizedType(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedType(self):

        localctx = KotlinParser.ParenthesizedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_parenthesizedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(KotlinParser.LPAREN)
            self.state = 1275
            self.type_()
            self.state = 1276
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def QUEST(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.QUEST)
            else:
                return self.getToken(KotlinParser.QUEST, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_nullableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullableType" ):
                listener.enterNullableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullableType" ):
                listener.exitNullableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullableType" ):
                return visitor.visitNullableType(self)
            else:
                return visitor.visitChildren(self)




    def nullableType(self):

        localctx = KotlinParser.NullableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_nullableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1278
                self.typeReference()
                pass

            elif la_ == 2:
                self.state = 1279
                self.parenthesizedType()
                pass


            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1282
                self.match(KotlinParser.NL)
                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1289 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1288
                    self.match(KotlinParser.QUEST)

                else:
                    raise NoViableAltException(self)
                self.state = 1291 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeReference" ):
                listener.enterTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeReference" ):
                listener.exitTypeReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeReference" ):
                return visitor.visitTypeReference(self)
            else:
                return visitor.visitChildren(self)




    def typeReference(self):

        localctx = KotlinParser.TypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeReference)
        try:
            self.state = 1299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1293
                self.match(KotlinParser.LPAREN)
                self.state = 1294
                self.typeReference()
                self.state = 1295
                self.match(KotlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1297
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1298
                self.match(KotlinParser.DYNAMIC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def functionTypeReceiver(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeReceiverContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = KotlinParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1301
                self.functionTypeReceiver()
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1302
                    self.match(KotlinParser.NL)
                    self.state = 1307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1308
                self.match(KotlinParser.DOT)
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1309
                    self.match(KotlinParser.NL)
                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1317
            self.functionTypeParameters()
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1318
                self.match(KotlinParser.NL)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1324
            self.match(KotlinParser.ARROW)

            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1325
                self.match(KotlinParser.NL)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1331
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeReceiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeReceiver" ):
                listener.enterFunctionTypeReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeReceiver" ):
                listener.exitFunctionTypeReceiver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeReceiver" ):
                return visitor.visitFunctionTypeReceiver(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeReceiver(self):

        localctx = KotlinParser.FunctionTypeReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_functionTypeReceiver)
        try:
            self.state = 1336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1333
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1334
                self.nullableType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1335
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleUserType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleUserTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleUserTypeContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_userType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserType" ):
                listener.enterUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserType" ):
                listener.exitUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserType" ):
                return visitor.visitUserType(self)
            else:
                return visitor.visitChildren(self)




    def userType(self):

        localctx = KotlinParser.UserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_userType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.simpleUserType()
            self.state = 1355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1339
                        self.match(KotlinParser.NL)
                        self.state = 1344
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1345
                    self.match(KotlinParser.DOT)
                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1346
                        self.match(KotlinParser.NL)
                        self.state = 1351
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1352
                    self.simpleUserType() 
                self.state = 1357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleUserTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleUserType" ):
                listener.enterSimpleUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleUserType" ):
                listener.exitSimpleUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleUserType" ):
                return visitor.visitSimpleUserType(self)
            else:
                return visitor.visitChildren(self)




    def simpleUserType(self):

        localctx = KotlinParser.SimpleUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_simpleUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.simpleIdentifier()
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1359
                    self.match(KotlinParser.NL)
                    self.state = 1364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1365
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameters" ):
                listener.enterFunctionTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameters" ):
                listener.exitFunctionTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameters" ):
                return visitor.visitFunctionTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameters(self):

        localctx = KotlinParser.FunctionTypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_functionTypeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(KotlinParser.LPAREN)
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1369
                self.parameter()

            elif la_ == 2:
                self.state = 1370
                self.type_()


            self.state = 1380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.COMMA:
                self.state = 1373
                self.match(KotlinParser.COMMA)
                self.state = 1376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1374
                    self.parameter()
                    pass

                elif la_ == 2:
                    self.state = 1375
                    self.type_()
                    pass


                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1383
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def typeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeConstraintContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeConstraintContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraints" ):
                listener.enterTypeConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraints" ):
                listener.exitTypeConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstraints" ):
                return visitor.visitTypeConstraints(self)
            else:
                return visitor.visitChildren(self)




    def typeConstraints(self):

        localctx = KotlinParser.TypeConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeConstraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(KotlinParser.WHERE)
            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1386
                self.match(KotlinParser.NL)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1392
            self.typeConstraint()
            self.state = 1409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1393
                        self.match(KotlinParser.NL)
                        self.state = 1398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1399
                    self.match(KotlinParser.COMMA)
                    self.state = 1403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1400
                        self.match(KotlinParser.NL)
                        self.state = 1405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1406
                    self.typeConstraint() 
                self.state = 1411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraint" ):
                listener.enterTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraint" ):
                listener.exitTypeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstraint" ):
                return visitor.visitTypeConstraint(self)
            else:
                return visitor.visitChildren(self)




    def typeConstraint(self):

        localctx = KotlinParser.TypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 1412
                self.annotations()
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1418
            self.simpleIdentifier()
            self.state = 1422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1419
                self.match(KotlinParser.NL)
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1425
            self.match(KotlinParser.COLON)
            self.state = 1429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1426
                self.match(KotlinParser.NL)
                self.state = 1431
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1432
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = KotlinParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(KotlinParser.LCURL)
            self.state = 1435
            self.statements()
            self.state = 1436
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(KotlinParser.StatementContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = KotlinParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1438
                    self.anysemi() 
                self.state = 1443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

            self.state = 1458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1444
                self.statement()
                self.state = 1455
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1446 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1445
                                self.anysemi()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1448 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

                        self.state = 1451
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1450
                            self.statement()

                 
                    self.state = 1457
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def blockLevelExpression(self):
            return self.getTypedRuleContext(KotlinParser.BlockLevelExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = KotlinParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_statement)
        try:
            self.state = 1462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.blockLevelExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLevelExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_blockLevelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockLevelExpression" ):
                listener.enterBlockLevelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockLevelExpression" ):
                listener.exitBlockLevelExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockLevelExpression" ):
                return visitor.visitBlockLevelExpression(self)
            else:
                return visitor.visitChildren(self)




    def blockLevelExpression(self):

        localctx = KotlinParser.BlockLevelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_blockLevelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1464
                    self.annotations() 
                self.state = 1469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

            self.state = 1473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1470
                    self.match(KotlinParser.NL) 
                self.state = 1475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

            self.state = 1476
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def labelDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LabelDefinitionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LabelDefinitionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = KotlinParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.LabelDefinition:
                self.state = 1478
                self.labelDefinition()
                self.state = 1483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1484
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.state = 1485
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.state = 1486
                self.propertyDeclaration()
                pass

            elif la_ == 4:
                self.state = 1487
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.DisjunctionContext,i)


        def assignmentOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AssignmentOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AssignmentOperatorContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = KotlinParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.disjunction()
            self.state = 1496
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1491
                    self.assignmentOperator()
                    self.state = 1492
                    self.disjunction() 
                self.state = 1498
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ConjunctionContext,i)


        def DISJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DISJ)
            else:
                return self.getToken(KotlinParser.DISJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = KotlinParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.conjunction()
            self.state = 1516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1500
                        self.match(KotlinParser.NL)
                        self.state = 1505
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1506
                    self.match(KotlinParser.DISJ)
                    self.state = 1510
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1507
                            self.match(KotlinParser.NL) 
                        self.state = 1512
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

                    self.state = 1513
                    self.conjunction() 
                self.state = 1518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityComparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityComparisonContext,i)


        def CONJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.CONJ)
            else:
                return self.getToken(KotlinParser.CONJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = KotlinParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.equalityComparison()
            self.state = 1536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1520
                        self.match(KotlinParser.NL)
                        self.state = 1525
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1526
                    self.match(KotlinParser.CONJ)
                    self.state = 1530
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1527
                            self.match(KotlinParser.NL) 
                        self.state = 1532
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

                    self.state = 1533
                    self.equalityComparison() 
                self.state = 1538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ComparisonContext,i)


        def equalityOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityComparison" ):
                return visitor.visitEqualityComparison(self)
            else:
                return visitor.visitChildren(self)




    def equalityComparison(self):

        localctx = KotlinParser.EqualityComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_equalityComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.comparison()
            self.state = 1551
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1540
                    self.equalityOperation()
                    self.state = 1544
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1541
                            self.match(KotlinParser.NL) 
                        self.state = 1546
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

                    self.state = 1547
                    self.comparison() 
                self.state = 1553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedInfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.NamedInfixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.NamedInfixContext,i)


        def comparisonOperator(self):
            return self.getTypedRuleContext(KotlinParser.ComparisonOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = KotlinParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self.namedInfix()
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1555
                self.comparisonOperator()
                self.state = 1559
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1556
                        self.match(KotlinParser.NL) 
                    self.state = 1561
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                self.state = 1562
                self.namedInfix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedInfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elvisExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ElvisExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ElvisExpressionContext,i)


        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def inOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_namedInfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedInfix" ):
                listener.enterNamedInfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedInfix" ):
                listener.exitNamedInfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedInfix" ):
                return visitor.visitNamedInfix(self)
            else:
                return visitor.visitChildren(self)




    def namedInfix(self):

        localctx = KotlinParser.NamedInfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_namedInfix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.elvisExpression()
            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1576 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1567
                        self.inOperator()
                        self.state = 1571
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1568
                                self.match(KotlinParser.NL) 
                            self.state = 1573
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

                        self.state = 1574
                        self.elvisExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1578 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)


            elif la_ == 2:
                self.state = 1580
                self.isOperator()
                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1581
                    self.match(KotlinParser.NL)
                    self.state = 1586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1587
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElvisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InfixFunctionCallContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InfixFunctionCallContext,i)


        def ELVIS(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.ELVIS)
            else:
                return self.getToken(KotlinParser.ELVIS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_elvisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvisExpression" ):
                listener.enterElvisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvisExpression" ):
                listener.exitElvisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElvisExpression" ):
                return visitor.visitElvisExpression(self)
            else:
                return visitor.visitChildren(self)




    def elvisExpression(self):

        localctx = KotlinParser.ElvisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_elvisExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.infixFunctionCall()
            self.state = 1608
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1592
                        self.match(KotlinParser.NL)
                        self.state = 1597
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1598
                    self.match(KotlinParser.ELVIS)
                    self.state = 1602
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1599
                            self.match(KotlinParser.NL) 
                        self.state = 1604
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

                    self.state = 1605
                    self.infixFunctionCall() 
                self.state = 1610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.RangeExpressionContext,i)


        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_infixFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixFunctionCall" ):
                listener.enterInfixFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixFunctionCall" ):
                listener.exitInfixFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfixFunctionCall" ):
                return visitor.visitInfixFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def infixFunctionCall(self):

        localctx = KotlinParser.InfixFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_infixFunctionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.rangeExpression()
            self.state = 1623
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1612
                    self.simpleIdentifier()
                    self.state = 1616
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1613
                            self.match(KotlinParser.NL) 
                        self.state = 1618
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                    self.state = 1619
                    self.rangeExpression() 
                self.state = 1625
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveExpressionContext,i)


        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RANGE)
            else:
                return self.getToken(KotlinParser.RANGE, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = KotlinParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_rangeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.additiveExpression()
            self.state = 1637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1627
                    self.match(KotlinParser.RANGE)
                    self.state = 1631
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1628
                            self.match(KotlinParser.NL) 
                        self.state = 1633
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

                    self.state = 1634
                    self.additiveExpression() 
                self.state = 1639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeExpressionContext,i)


        def additiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = KotlinParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_additiveExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.multiplicativeExpression()
            self.state = 1652
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1641
                    self.additiveOperator()
                    self.state = 1645
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1642
                            self.match(KotlinParser.NL) 
                        self.state = 1647
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

                    self.state = 1648
                    self.multiplicativeExpression() 
                self.state = 1654
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRHS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeRHSContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeRHSContext,i)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = KotlinParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_multiplicativeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.typeRHS()
            self.state = 1667
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1656
                    self.multiplicativeOperation()
                    self.state = 1660
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1657
                            self.match(KotlinParser.NL) 
                        self.state = 1662
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                    self.state = 1663
                    self.typeRHS() 
                self.state = 1669
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeRHSContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PrefixUnaryExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PrefixUnaryExpressionContext,i)


        def typeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRHS" ):
                listener.enterTypeRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRHS" ):
                listener.exitTypeRHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeRHS" ):
                return visitor.visitTypeRHS(self)
            else:
                return visitor.visitChildren(self)




    def typeRHS(self):

        localctx = KotlinParser.TypeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_typeRHS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.prefixUnaryExpression()
            self.state = 1682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1671
                        self.match(KotlinParser.NL)
                        self.state = 1676
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1677
                    self.typeOperation()
                    self.state = 1678
                    self.prefixUnaryExpression() 
                self.state = 1684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def prefixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PrefixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PrefixUnaryOperationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryExpression" ):
                listener.enterPrefixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryExpression" ):
                listener.exitPrefixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryExpression" ):
                return visitor.visitPrefixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryExpression(self):

        localctx = KotlinParser.PrefixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_prefixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1685
                    self.prefixUnaryOperation() 
                self.state = 1690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

            self.state = 1691
            self.postfixUnaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableRead(self):
            return self.getTypedRuleContext(KotlinParser.VariableReadContext,0)


        def atomicExpression(self):
            return self.getTypedRuleContext(KotlinParser.AtomicExpressionContext,0)


        def postfixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PostfixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PostfixUnaryOperationContext,i)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def callableReference(self):
            return self.getTypedRuleContext(KotlinParser.CallableReferenceContext,0)


        def callSuffix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CallSuffixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CallSuffixContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryExpression" ):
                listener.enterPostfixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryExpression" ):
                listener.exitPostfixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryExpression" ):
                return visitor.visitPostfixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryExpression(self):

        localctx = KotlinParser.PostfixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_postfixUnaryExpression)
        try:
            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1695
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                    self.state = 1693
                    self.variableRead()
                    pass
                elif token in [KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.OBJECT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.LabelReference, KotlinParser.CharacterLiteral]:
                    self.state = 1694
                    self.atomicExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1700
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1697
                        self.postfixUnaryOperation() 
                    self.state = 1702
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 1703
                    self.simpleIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 1704
                    self.callableReference()
                    pass

                elif la_ == 3:
                    self.state = 1705
                    self.atomicExpression()
                    pass


                self.state = 1712
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1710
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                        if la_ == 1:
                            self.state = 1708
                            self.postfixUnaryOperation()
                            pass

                        elif la_ == 2:
                            self.state = 1709
                            self.callSuffix()
                            pass

                 
                    self.state = 1714
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_variableRead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableRead" ):
                listener.enterVariableRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableRead" ):
                listener.exitVariableRead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableRead" ):
                return visitor.visitVariableRead(self)
            else:
                return visitor.visitChildren(self)




    def variableRead(self):

        localctx = KotlinParser.VariableReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_variableRead)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedExpressionContext,0)


        def literalConstant(self):
            return self.getTypedRuleContext(KotlinParser.LiteralConstantContext,0)


        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def thisExpression(self):
            return self.getTypedRuleContext(KotlinParser.ThisExpressionContext,0)


        def superExpression(self):
            return self.getTypedRuleContext(KotlinParser.SuperExpressionContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(KotlinParser.ConditionalExpressionContext,0)


        def tryExpression(self):
            return self.getTypedRuleContext(KotlinParser.TryExpressionContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(KotlinParser.ObjectLiteralContext,0)


        def jumpExpression(self):
            return self.getTypedRuleContext(KotlinParser.JumpExpressionContext,0)


        def loopExpression(self):
            return self.getTypedRuleContext(KotlinParser.LoopExpressionContext,0)


        def collectionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.CollectionLiteralContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_atomicExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicExpression" ):
                listener.enterAtomicExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicExpression" ):
                listener.exitAtomicExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicExpression" ):
                return visitor.visitAtomicExpression(self)
            else:
                return visitor.visitChildren(self)




    def atomicExpression(self):

        localctx = KotlinParser.AtomicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_atomicExpression)
        try:
            self.state = 1730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1719
                self.parenthesizedExpression()
                pass
            elif token in [KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1720
                self.literalConstant()
                pass
            elif token in [KotlinParser.LCURL, KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1721
                self.functionLiteral()
                pass
            elif token in [KotlinParser.THIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1722
                self.thisExpression()
                pass
            elif token in [KotlinParser.SUPER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1723
                self.superExpression()
                pass
            elif token in [KotlinParser.IF, KotlinParser.WHEN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1724
                self.conditionalExpression()
                pass
            elif token in [KotlinParser.TRY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1725
                self.tryExpression()
                pass
            elif token in [KotlinParser.OBJECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1726
                self.objectLiteral()
                pass
            elif token in [KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1727
                self.jumpExpression()
                pass
            elif token in [KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1728
                self.loopExpression()
                pass
            elif token in [KotlinParser.LSQUARE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1729
                self.collectionLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = KotlinParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1732
            self.match(KotlinParser.LPAREN)
            self.state = 1733
            self.expression()
            self.state = 1734
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def annotatedLambda(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotatedLambdaContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotatedLambdaContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_callSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSuffix" ):
                listener.enterCallSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSuffix" ):
                listener.exitCallSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallSuffix" ):
                return visitor.visitCallSuffix(self)
            else:
                return visitor.visitChildren(self)




    def callSuffix(self):

        localctx = KotlinParser.CallSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_callSuffix)
        try:
            self.state = 1758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LANGLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1736
                self.typeArguments()
                self.state = 1738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 1737
                    self.valueArguments()


                self.state = 1743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1740
                        self.annotatedLambda() 
                    self.state = 1745
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

                pass
            elif token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1746
                self.valueArguments()
                self.state = 1750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1747
                        self.annotatedLambda() 
                    self.state = 1752
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

                pass
            elif token in [KotlinParser.NL, KotlinParser.LCURL, KotlinParser.AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1754 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1753
                        self.annotatedLambda()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1756 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotatedLambdaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def LabelDefinition(self):
            return self.getToken(KotlinParser.LabelDefinition, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotatedLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedLambda" ):
                listener.enterAnnotatedLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedLambda" ):
                listener.exitAnnotatedLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotatedLambda" ):
                return visitor.visitAnnotatedLambda(self)
            else:
                return visitor.visitChildren(self)




    def annotatedLambda(self):

        localctx = KotlinParser.AnnotatedLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_annotatedLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0):
                self.state = 1760
                self.unescapedAnnotation()
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LabelDefinition:
                self.state = 1766
                self.match(KotlinParser.LabelDefinition)


            self.state = 1772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1769
                self.match(KotlinParser.NL)
                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1775
            self.functionLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayAccess" ):
                return visitor.visitArrayAccess(self)
            else:
                return visitor.visitChildren(self)




    def arrayAccess(self):

        localctx = KotlinParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_arrayAccess)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.match(KotlinParser.LSQUARE)
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 1778
                self.expression()
                self.state = 1783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 1779
                    self.match(KotlinParser.COMMA)
                    self.state = 1780
                    self.expression()
                    self.state = 1785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1788
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def suggestArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SuggestArgumentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SuggestArgumentContext,i)


        def valueArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ValueArgumentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ValueArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArguments" ):
                listener.enterValueArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArguments" ):
                listener.exitValueArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArguments" ):
                return visitor.visitValueArguments(self)
            else:
                return visitor.visitChildren(self)




    def valueArguments(self):

        localctx = KotlinParser.ValueArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_valueArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1790
            self.match(KotlinParser.LPAREN)
            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.MULT) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 1791
                self.suggestArgument()
                self.state = 1792
                self.valueArgument()
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 1793
                    self.match(KotlinParser.COMMA)
                    self.state = 1794
                    self.suggestArgument()
                    self.state = 1795
                    self.valueArgument()
                    self.state = 1801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1804
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuggestArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return KotlinParser.RULE_suggestArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuggestArgument" ):
                listener.enterSuggestArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuggestArgument" ):
                listener.exitSuggestArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuggestArgument" ):
                return visitor.visitSuggestArgument(self)
            else:
                return visitor.visitChildren(self)




    def suggestArgument(self):

        localctx = KotlinParser.SuggestArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_suggestArgument)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeProjection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeProjectionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeProjectionContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = KotlinParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.match(KotlinParser.LANGLE)
            self.state = 1812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1809
                self.match(KotlinParser.NL)
                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1815
            self.typeProjection()
            self.state = 1826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1816
                        self.match(KotlinParser.NL)
                        self.state = 1821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1822
                    self.match(KotlinParser.COMMA)
                    self.state = 1823
                    self.typeProjection() 
                self.state = 1828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

            self.state = 1832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1829
                self.match(KotlinParser.NL)
                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1835
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def typeProjectionModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeProjectionModifierListContext,0)


        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjection" ):
                listener.enterTypeProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjection" ):
                listener.exitTypeProjection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeProjection" ):
                return visitor.visitTypeProjection(self)
            else:
                return visitor.visitChildren(self)




    def typeProjection(self):

        localctx = KotlinParser.TypeProjectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_typeProjection)
        try:
            self.state = 1842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN, KotlinParser.AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 1837
                    self.typeProjectionModifierList()


                self.state = 1840
                self.type_()
                pass
            elif token in [KotlinParser.MULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                self.match(KotlinParser.MULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varianceAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VarianceAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VarianceAnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjectionModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjectionModifierList" ):
                listener.enterTypeProjectionModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjectionModifierList" ):
                listener.exitTypeProjectionModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeProjectionModifierList" ):
                return visitor.visitTypeProjectionModifierList(self)
            else:
                return visitor.visitChildren(self)




    def typeProjectionModifierList(self):

        localctx = KotlinParser.TypeProjectionModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_typeProjectionModifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1844
                    self.varianceAnnotation()

                else:
                    raise NoViableAltException(self)
                self.state = 1847 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArgument" ):
                listener.enterValueArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArgument" ):
                listener.exitValueArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArgument" ):
                return visitor.visitValueArgument(self)
            else:
                return visitor.visitChildren(self)




    def valueArgument(self):

        localctx = KotlinParser.ValueArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_valueArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 1849
                self.simpleIdentifier()
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1850
                    self.match(KotlinParser.NL)
                    self.state = 1855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1856
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1857
                        self.match(KotlinParser.NL) 
                    self.state = 1862
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,274,self._ctx)



            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.MULT:
                self.state = 1865
                self.match(KotlinParser.MULT)


            self.state = 1871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1868
                    self.match(KotlinParser.NL) 
                self.state = 1873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

            self.state = 1874
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(KotlinParser.BooleanLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(KotlinParser.IntegerLiteral, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.StringLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(KotlinParser.HexLiteral, 0)

        def BinLiteral(self):
            return self.getToken(KotlinParser.BinLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(KotlinParser.CharacterLiteral, 0)

        def RealLiteral(self):
            return self.getToken(KotlinParser.RealLiteral, 0)

        def NullLiteral(self):
            return self.getToken(KotlinParser.NullLiteral, 0)

        def LongLiteral(self):
            return self.getToken(KotlinParser.LongLiteral, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralConstant" ):
                return visitor.visitLiteralConstant(self)
            else:
                return visitor.visitChildren(self)




    def literalConstant(self):

        localctx = KotlinParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_literalConstant)
        try:
            self.state = 1885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1876
                self.match(KotlinParser.BooleanLiteral)
                pass
            elif token in [KotlinParser.IntegerLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1877
                self.match(KotlinParser.IntegerLiteral)
                pass
            elif token in [KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1878
                self.stringLiteral()
                pass
            elif token in [KotlinParser.HexLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1879
                self.match(KotlinParser.HexLiteral)
                pass
            elif token in [KotlinParser.BinLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1880
                self.match(KotlinParser.BinLiteral)
                pass
            elif token in [KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1881
                self.match(KotlinParser.CharacterLiteral)
                pass
            elif token in [KotlinParser.RealLiteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1882
                self.match(KotlinParser.RealLiteral)
                pass
            elif token in [KotlinParser.NullLiteral]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1883
                self.match(KotlinParser.NullLiteral)
                pass
            elif token in [KotlinParser.LongLiteral]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1884
                self.match(KotlinParser.LongLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,0)


        def multiLineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.MultiLineStringLiteralContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = KotlinParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_stringLiteral)
        try:
            self.state = 1889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1887
                self.lineStringLiteral()
                pass
            elif token in [KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1888
                self.multiLineStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_OPEN(self):
            return self.getToken(KotlinParser.QUOTE_OPEN, 0)

        def QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.QUOTE_CLOSE, 0)

        def lineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringContentContext,i)


        def lineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringLiteral" ):
                listener.enterLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringLiteral" ):
                listener.exitLineStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringLiteral" ):
                return visitor.visitLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def lineStringLiteral(self):

        localctx = KotlinParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_lineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self.match(KotlinParser.QUOTE_OPEN)
            self.state = 1896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & ((1 << (KotlinParser.LineStrRef - 156)) | (1 << (KotlinParser.LineStrText - 156)) | (1 << (KotlinParser.LineStrEscapedChar - 156)) | (1 << (KotlinParser.LineStrExprStart - 156)))) != 0):
                self.state = 1894
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.LineStrRef, KotlinParser.LineStrText, KotlinParser.LineStrEscapedChar]:
                    self.state = 1892
                    self.lineStringContent()
                    pass
                elif token in [KotlinParser.LineStrExprStart]:
                    self.state = 1893
                    self.lineStringExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1899
            self.match(KotlinParser.QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIPLE_QUOTE_OPEN(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0)

        def TRIPLE_QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0)

        def multiLineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringContentContext,i)


        def multiLineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringExpressionContext,i)


        def lineStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringLiteralContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,i)


        def MultiLineStringQuote(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.MultiLineStringQuote)
            else:
                return self.getToken(KotlinParser.MultiLineStringQuote, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringLiteral" ):
                listener.enterMultiLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringLiteral" ):
                listener.exitMultiLineStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringLiteral" ):
                return visitor.visitMultiLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringLiteral(self):

        localctx = KotlinParser.MultiLineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_multiLineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.match(KotlinParser.TRIPLE_QUOTE_OPEN)
            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (KotlinParser.QUOTE_OPEN - 129)) | (1 << (KotlinParser.MultiLineStringQuote - 129)) | (1 << (KotlinParser.MultiLineStrRef - 129)) | (1 << (KotlinParser.MultiLineStrText - 129)) | (1 << (KotlinParser.MultiLineStrEscapedChar - 129)) | (1 << (KotlinParser.MultiLineStrExprStart - 129)))) != 0):
                self.state = 1906
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.MultiLineStrRef, KotlinParser.MultiLineStrText, KotlinParser.MultiLineStrEscapedChar]:
                    self.state = 1902
                    self.multiLineStringContent()
                    pass
                elif token in [KotlinParser.MultiLineStrExprStart]:
                    self.state = 1903
                    self.multiLineStringExpression()
                    pass
                elif token in [KotlinParser.QUOTE_OPEN]:
                    self.state = 1904
                    self.lineStringLiteral()
                    pass
                elif token in [KotlinParser.MultiLineStringQuote]:
                    self.state = 1905
                    self.match(KotlinParser.MultiLineStringQuote)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1911
            self.match(KotlinParser.TRIPLE_QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrText(self):
            return self.getToken(KotlinParser.LineStrText, 0)

        def LineStrEscapedChar(self):
            return self.getToken(KotlinParser.LineStrEscapedChar, 0)

        def LineStrRef(self):
            return self.getToken(KotlinParser.LineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringContent" ):
                listener.enterLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringContent" ):
                listener.exitLineStringContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringContent" ):
                return visitor.visitLineStringContent(self)
            else:
                return visitor.visitChildren(self)




    def lineStringContent(self):

        localctx = KotlinParser.LineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            _la = self._input.LA(1)
            if not(((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & ((1 << (KotlinParser.LineStrRef - 156)) | (1 << (KotlinParser.LineStrText - 156)) | (1 << (KotlinParser.LineStrEscapedChar - 156)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrExprStart(self):
            return self.getToken(KotlinParser.LineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringExpression" ):
                listener.enterLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringExpression" ):
                listener.exitLineStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringExpression" ):
                return visitor.visitLineStringExpression(self)
            else:
                return visitor.visitChildren(self)




    def lineStringExpression(self):

        localctx = KotlinParser.LineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lineStringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1915
            self.match(KotlinParser.LineStrExprStart)
            self.state = 1916
            self.expression()
            self.state = 1917
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrText(self):
            return self.getToken(KotlinParser.MultiLineStrText, 0)

        def MultiLineStrEscapedChar(self):
            return self.getToken(KotlinParser.MultiLineStrEscapedChar, 0)

        def MultiLineStrRef(self):
            return self.getToken(KotlinParser.MultiLineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringContent" ):
                listener.enterMultiLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringContent" ):
                listener.exitMultiLineStringContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringContent" ):
                return visitor.visitMultiLineStringContent(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringContent(self):

        localctx = KotlinParser.MultiLineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_multiLineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1919
            _la = self._input.LA(1)
            if not(((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (KotlinParser.MultiLineStrRef - 162)) | (1 << (KotlinParser.MultiLineStrText - 162)) | (1 << (KotlinParser.MultiLineStrEscapedChar - 162)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrExprStart(self):
            return self.getToken(KotlinParser.MultiLineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringExpression" ):
                listener.enterMultiLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringExpression" ):
                listener.exitMultiLineStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringExpression" ):
                return visitor.visitMultiLineStringExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringExpression(self):

        localctx = KotlinParser.MultiLineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_multiLineStringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            self.match(KotlinParser.MultiLineStrExprStart)
            self.state = 1922
            self.expression()
            self.state = 1923
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def lambdaParameters(self):
            return self.getTypedRuleContext(KotlinParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLiteral" ):
                listener.enterFunctionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLiteral" ):
                listener.exitFunctionLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionLiteral" ):
                return visitor.visitFunctionLiteral(self)
            else:
                return visitor.visitChildren(self)




    def functionLiteral(self):

        localctx = KotlinParser.FunctionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_functionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 1925
                self.annotations()
                self.state = 1930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 1931
                self.match(KotlinParser.LCURL)
                self.state = 1935
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1932
                        self.match(KotlinParser.NL) 
                    self.state = 1937
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

                self.state = 1938
                self.statements()
                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1939
                    self.match(KotlinParser.NL)
                    self.state = 1944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1945
                self.match(KotlinParser.RCURL)
                pass

            elif la_ == 2:
                self.state = 1947
                self.match(KotlinParser.LCURL)
                self.state = 1951
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1948
                        self.match(KotlinParser.NL) 
                    self.state = 1953
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

                self.state = 1954
                self.lambdaParameters()
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1955
                    self.match(KotlinParser.NL)
                    self.state = 1960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1961
                self.match(KotlinParser.ARROW)
                self.state = 1965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1962
                        self.match(KotlinParser.NL) 
                    self.state = 1967
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

                self.state = 1968
                self.statements()
                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1969
                    self.match(KotlinParser.NL)
                    self.state = 1974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1975
                self.match(KotlinParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LambdaParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LambdaParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = KotlinParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LPAREN or _la==KotlinParser.IMPORT or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)))) != 0) or _la==KotlinParser.Identifier:
                self.state = 1979
                self.lambdaParameter()


            self.state = 1998
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1982
                        self.match(KotlinParser.NL)
                        self.state = 1987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1988
                    self.match(KotlinParser.COMMA)
                    self.state = 1992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1989
                        self.match(KotlinParser.NL)
                        self.state = 1994
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1995
                    self.lambdaParameter() 
                self.state = 2000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameter" ):
                listener.enterLambdaParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameter" ):
                listener.exitLambdaParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameter" ):
                return visitor.visitLambdaParameter(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameter(self):

        localctx = KotlinParser.LambdaParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_lambdaParameter)
        self._la = 0 # Token type
        try:
            self.state = 2019
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2001
                self.variableDeclaration()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2002
                self.multiVariableDeclaration()
                self.state = 2017
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2003
                        self.match(KotlinParser.NL)
                        self.state = 2008
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2009
                    self.match(KotlinParser.COLON)
                    self.state = 2013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2010
                        self.match(KotlinParser.NL)
                        self.state = 2015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2016
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteral" ):
                return visitor.visitObjectLiteral(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteral(self):

        localctx = KotlinParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.match(KotlinParser.OBJECT)
            self.state = 2036
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2022
                    self.match(KotlinParser.NL)
                    self.state = 2027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2028
                self.match(KotlinParser.COLON)
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2029
                    self.match(KotlinParser.NL)
                    self.state = 2034
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2035
                self.delegationSpecifiers()


            self.state = 2041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2038
                self.match(KotlinParser.NL)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2044
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_collectionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionLiteral" ):
                listener.enterCollectionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionLiteral" ):
                listener.exitCollectionLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionLiteral" ):
                return visitor.visitCollectionLiteral(self)
            else:
                return visitor.visitChildren(self)




    def collectionLiteral(self):

        localctx = KotlinParser.CollectionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_collectionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            self.match(KotlinParser.LSQUARE)
            self.state = 2048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 2047
                self.expression()


            self.state = 2054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.COMMA:
                self.state = 2050
                self.match(KotlinParser.COMMA)
                self.state = 2051
                self.expression()
                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2057
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_thisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThisExpression" ):
                return visitor.visitThisExpression(self)
            else:
                return visitor.visitChildren(self)




    def thisExpression(self):

        localctx = KotlinParser.ThisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_thisExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.match(KotlinParser.THIS)
            self.state = 2061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2060
                self.match(KotlinParser.LabelReference)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_superExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperExpression" ):
                return visitor.visitSuperExpression(self)
            else:
                return visitor.visitChildren(self)




    def superExpression(self):

        localctx = KotlinParser.SuperExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_superExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.match(KotlinParser.SUPER)
            self.state = 2080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2064
                self.match(KotlinParser.LANGLE)
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2065
                    self.match(KotlinParser.NL)
                    self.state = 2070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2071
                self.type_()
                self.state = 2075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2072
                    self.match(KotlinParser.NL)
                    self.state = 2077
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2078
                self.match(KotlinParser.RANGLE)


            self.state = 2083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2082
                self.match(KotlinParser.LabelReference)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpression(self):
            return self.getTypedRuleContext(KotlinParser.IfExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhenExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = KotlinParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_conditionalExpression)
        try:
            self.state = 2087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2085
                self.ifExpression()
                pass
            elif token in [KotlinParser.WHEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2086
                self.whenExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(KotlinParser.IF, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ControlStructureBodyContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,i)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpression" ):
                return visitor.visitIfExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifExpression(self):

        localctx = KotlinParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.match(KotlinParser.IF)
            self.state = 2093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2090
                self.match(KotlinParser.NL)
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2096
            self.match(KotlinParser.LPAREN)
            self.state = 2097
            self.expression()
            self.state = 2098
            self.match(KotlinParser.RPAREN)
            self.state = 2102
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2099
                    self.match(KotlinParser.NL) 
                self.state = 2104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

            self.state = 2106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.state = 2105
                self.controlStructureBody()


            self.state = 2109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2108
                self.match(KotlinParser.SEMICOLON)


            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 2114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2111
                    self.match(KotlinParser.NL)
                    self.state = 2116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2117
                self.match(KotlinParser.ELSE)
                self.state = 2121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2118
                        self.match(KotlinParser.NL) 
                    self.state = 2123
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

                self.state = 2125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                if la_ == 1:
                    self.state = 2124
                    self.controlStructureBody()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStructureBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_controlStructureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStructureBody" ):
                listener.enterControlStructureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStructureBody" ):
                listener.exitControlStructureBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStructureBody" ):
                return visitor.visitControlStructureBody(self)
            else:
                return visitor.visitChildren(self)




    def controlStructureBody(self):

        localctx = KotlinParser.ControlStructureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_controlStructureBody)
        try:
            self.state = 2131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2129
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2130
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(KotlinParser.WHEN, 0)

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def whenEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenEntryContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenExpression" ):
                return visitor.visitWhenExpression(self)
            else:
                return visitor.visitChildren(self)




    def whenExpression(self):

        localctx = KotlinParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_whenExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133
            self.match(KotlinParser.WHEN)
            self.state = 2137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,321,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2134
                    self.match(KotlinParser.NL) 
                self.state = 2139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,321,self._ctx)

            self.state = 2144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LPAREN:
                self.state = 2140
                self.match(KotlinParser.LPAREN)
                self.state = 2141
                self.expression()
                self.state = 2142
                self.match(KotlinParser.RPAREN)


            self.state = 2149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2146
                self.match(KotlinParser.NL)
                self.state = 2151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2152
            self.match(KotlinParser.LCURL)
            self.state = 2156
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2153
                    self.match(KotlinParser.NL) 
                self.state = 2158
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

            self.state = 2168
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2159
                    self.whenEntry()
                    self.state = 2163
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2160
                            self.match(KotlinParser.NL) 
                        self.state = 2165
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
             
                self.state = 2170
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

            self.state = 2174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2171
                self.match(KotlinParser.NL)
                self.state = 2176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2177
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenConditionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenConditionContext,i)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_whenEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenEntry" ):
                listener.enterWhenEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenEntry" ):
                listener.exitWhenEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenEntry" ):
                return visitor.visitWhenEntry(self)
            else:
                return visitor.visitChildren(self)




    def whenEntry(self):

        localctx = KotlinParser.WhenEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_whenEntry)
        self._la = 0 # Token type
        try:
            self.state = 2231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.OBJECT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.IS, KotlinParser.IN, KotlinParser.NOT_IS, KotlinParser.NOT_IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2179
                self.whenCondition()
                self.state = 2196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2183
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2180
                            self.match(KotlinParser.NL)
                            self.state = 2185
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2186
                        self.match(KotlinParser.COMMA)
                        self.state = 2190
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2187
                                self.match(KotlinParser.NL) 
                            self.state = 2192
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

                        self.state = 2193
                        self.whenCondition() 
                    self.state = 2198
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2199
                    self.match(KotlinParser.NL)
                    self.state = 2204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2205
                self.match(KotlinParser.ARROW)
                self.state = 2209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2206
                        self.match(KotlinParser.NL) 
                    self.state = 2211
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

                self.state = 2212
                self.controlStructureBody()
                self.state = 2214
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 2213
                    self.semi()


                pass
            elif token in [KotlinParser.ELSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2216
                self.match(KotlinParser.ELSE)
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2217
                    self.match(KotlinParser.NL)
                    self.state = 2222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2223
                self.match(KotlinParser.ARROW)
                self.state = 2227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2224
                        self.match(KotlinParser.NL) 
                    self.state = 2229
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

                self.state = 2230
                self.controlStructureBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def rangeTest(self):
            return self.getTypedRuleContext(KotlinParser.RangeTestContext,0)


        def typeTest(self):
            return self.getTypedRuleContext(KotlinParser.TypeTestContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenCondition" ):
                listener.enterWhenCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenCondition" ):
                listener.exitWhenCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenCondition" ):
                return visitor.visitWhenCondition(self)
            else:
                return visitor.visitChildren(self)




    def whenCondition(self):

        localctx = KotlinParser.WhenConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_whenCondition)
        try:
            self.state = 2236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.OBJECT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2233
                self.expression()
                pass
            elif token in [KotlinParser.IN, KotlinParser.NOT_IN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2234
                self.rangeTest()
                pass
            elif token in [KotlinParser.IS, KotlinParser.NOT_IS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2235
                self.typeTest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inOperator(self):
            return self.getTypedRuleContext(KotlinParser.InOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeTest" ):
                listener.enterRangeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeTest" ):
                listener.exitRangeTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeTest" ):
                return visitor.visitRangeTest(self)
            else:
                return visitor.visitChildren(self)




    def rangeTest(self):

        localctx = KotlinParser.RangeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_rangeTest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2238
            self.inOperator()
            self.state = 2242
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2239
                    self.match(KotlinParser.NL) 
                self.state = 2244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

            self.state = 2245
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type_(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTest" ):
                listener.enterTypeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTest" ):
                listener.exitTypeTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTest" ):
                return visitor.visitTypeTest(self)
            else:
                return visitor.visitChildren(self)




    def typeTest(self):

        localctx = KotlinParser.TypeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_typeTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self.isOperator()
            self.state = 2251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2248
                self.match(KotlinParser.NL)
                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2254
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(KotlinParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CatchBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(KotlinParser.FinallyBlockContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_tryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpression" ):
                listener.enterTryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpression" ):
                listener.exitTryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryExpression" ):
                return visitor.visitTryExpression(self)
            else:
                return visitor.visitChildren(self)




    def tryExpression(self):

        localctx = KotlinParser.TryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2256
            self.match(KotlinParser.TRY)
            self.state = 2260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2257
                self.match(KotlinParser.NL)
                self.state = 2262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2263
            self.block()
            self.state = 2273
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,342,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2264
                        self.match(KotlinParser.NL)
                        self.state = 2269
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2270
                    self.catchBlock() 
                self.state = 2275
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

            self.state = 2283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 2279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2276
                    self.match(KotlinParser.NL)
                    self.state = 2281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2282
                self.finallyBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_catchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchBlock" ):
                listener.enterCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchBlock" ):
                listener.exitCatchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchBlock" ):
                return visitor.visitCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def catchBlock(self):

        localctx = KotlinParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self.match(KotlinParser.CATCH)
            self.state = 2289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2286
                self.match(KotlinParser.NL)
                self.state = 2291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2292
            self.match(KotlinParser.LPAREN)
            self.state = 2296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 2293
                self.annotations()
                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2299
            self.simpleIdentifier()
            self.state = 2300
            self.match(KotlinParser.COLON)
            self.state = 2301
            self.userType()
            self.state = 2302
            self.match(KotlinParser.RPAREN)
            self.state = 2306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2303
                self.match(KotlinParser.NL)
                self.state = 2308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2309
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = KotlinParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            self.match(KotlinParser.FINALLY)
            self.state = 2315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2312
                self.match(KotlinParser.NL)
                self.state = 2317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2318
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forExpression(self):
            return self.getTypedRuleContext(KotlinParser.ForExpressionContext,0)


        def whileExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhileExpressionContext,0)


        def doWhileExpression(self):
            return self.getTypedRuleContext(KotlinParser.DoWhileExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_loopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopExpression" ):
                listener.enterLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopExpression" ):
                listener.exitLoopExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopExpression" ):
                return visitor.visitLoopExpression(self)
            else:
                return visitor.visitChildren(self)




    def loopExpression(self):

        localctx = KotlinParser.LoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_loopExpression)
        try:
            self.state = 2323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2320
                self.forExpression()
                pass
            elif token in [KotlinParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2321
                self.whileExpression()
                pass
            elif token in [KotlinParser.DO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2322
                self.doWhileExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(KotlinParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)




    def forExpression(self):

        localctx = KotlinParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2325
            self.match(KotlinParser.FOR)
            self.state = 2329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2326
                self.match(KotlinParser.NL)
                self.state = 2331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2332
            self.match(KotlinParser.LPAREN)
            self.state = 2336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 2333
                self.annotations()
                self.state = 2338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.state = 2339
                self.variableDeclaration()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.state = 2340
                self.multiVariableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2343
            self.match(KotlinParser.IN)
            self.state = 2344
            self.expression()
            self.state = 2345
            self.match(KotlinParser.RPAREN)
            self.state = 2349
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2346
                    self.match(KotlinParser.NL) 
                self.state = 2351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

            self.state = 2353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.state = 2352
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileExpression" ):
                listener.enterWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileExpression" ):
                listener.exitWhileExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileExpression" ):
                return visitor.visitWhileExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileExpression(self):

        localctx = KotlinParser.WhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_whileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(KotlinParser.WHILE)
            self.state = 2359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2356
                self.match(KotlinParser.NL)
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2362
            self.match(KotlinParser.LPAREN)
            self.state = 2363
            self.expression()
            self.state = 2364
            self.match(KotlinParser.RPAREN)
            self.state = 2368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,356,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2365
                    self.match(KotlinParser.NL) 
                self.state = 2370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,356,self._ctx)

            self.state = 2372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 2371
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(KotlinParser.DO, 0)

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_doWhileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileExpression" ):
                listener.enterDoWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileExpression" ):
                listener.exitDoWhileExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileExpression" ):
                return visitor.visitDoWhileExpression(self)
            else:
                return visitor.visitChildren(self)




    def doWhileExpression(self):

        localctx = KotlinParser.DoWhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_doWhileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2374
            self.match(KotlinParser.DO)
            self.state = 2378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,358,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2375
                    self.match(KotlinParser.NL) 
                self.state = 2380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,358,self._ctx)

            self.state = 2382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 2381
                self.controlStructureBody()


            self.state = 2387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2384
                self.match(KotlinParser.NL)
                self.state = 2389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2390
            self.match(KotlinParser.WHILE)
            self.state = 2394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2391
                self.match(KotlinParser.NL)
                self.state = 2396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2397
            self.match(KotlinParser.LPAREN)
            self.state = 2398
            self.expression()
            self.state = 2399
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(KotlinParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def RETURN(self):
            return self.getToken(KotlinParser.RETURN, 0)

        def RETURN_AT(self):
            return self.getToken(KotlinParser.RETURN_AT, 0)

        def CONTINUE(self):
            return self.getToken(KotlinParser.CONTINUE, 0)

        def CONTINUE_AT(self):
            return self.getToken(KotlinParser.CONTINUE_AT, 0)

        def BREAK(self):
            return self.getToken(KotlinParser.BREAK, 0)

        def BREAK_AT(self):
            return self.getToken(KotlinParser.BREAK_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_jumpExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpExpression" ):
                listener.enterJumpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpExpression" ):
                listener.exitJumpExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpExpression" ):
                return visitor.visitJumpExpression(self)
            else:
                return visitor.visitChildren(self)




    def jumpExpression(self):

        localctx = KotlinParser.JumpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_jumpExpression)
        self._la = 0 # Token type
        try:
            self.state = 2417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.THROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2401
                self.match(KotlinParser.THROW)
                self.state = 2405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,362,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2402
                        self.match(KotlinParser.NL) 
                    self.state = 2407
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,362,self._ctx)

                self.state = 2408
                self.expression()
                pass
            elif token in [KotlinParser.RETURN_AT, KotlinParser.RETURN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2409
                _la = self._input.LA(1)
                if not(_la==KotlinParser.RETURN_AT or _la==KotlinParser.RETURN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 2410
                    self.expression()


                pass
            elif token in [KotlinParser.CONTINUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2413
                self.match(KotlinParser.CONTINUE)
                pass
            elif token in [KotlinParser.CONTINUE_AT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2414
                self.match(KotlinParser.CONTINUE_AT)
                pass
            elif token in [KotlinParser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2415
                self.match(KotlinParser.BREAK)
                pass
            elif token in [KotlinParser.BREAK_AT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2416
                self.match(KotlinParser.BREAK_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallableReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONCOLON(self):
            return self.getToken(KotlinParser.COLONCOLON, 0)

        def Q_COLONCOLON(self):
            return self.getToken(KotlinParser.Q_COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def QUEST(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.QUEST)
            else:
                return self.getToken(KotlinParser.QUEST, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_callableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallableReference" ):
                listener.enterCallableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallableReference" ):
                listener.exitCallableReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallableReference" ):
                return visitor.visitCallableReference(self)
            else:
                return visitor.visitChildren(self)




    def callableReference(self):

        localctx = KotlinParser.CallableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_callableReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0):
                self.state = 2419
                self.userType()
                self.state = 2429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.QUEST:
                    self.state = 2420
                    self.match(KotlinParser.QUEST)
                    self.state = 2424
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,365,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2421
                            self.match(KotlinParser.NL) 
                        self.state = 2426
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,365,self._ctx)

                    self.state = 2431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2434
                self.match(KotlinParser.NL)
                self.state = 2439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2440
            _la = self._input.LA(1)
            if not(_la==KotlinParser.COLONCOLON or _la==KotlinParser.Q_COLONCOLON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2441
                self.match(KotlinParser.NL)
                self.state = 2446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.state = 2447
                self.identifier()
                pass
            elif token in [KotlinParser.CLASS]:
                self.state = 2448
                self.match(KotlinParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def ADD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.ADD_ASSIGNMENT, 0)

        def SUB_ASSIGNMENT(self):
            return self.getToken(KotlinParser.SUB_ASSIGNMENT, 0)

        def MULT_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MULT_ASSIGNMENT, 0)

        def DIV_ASSIGNMENT(self):
            return self.getToken(KotlinParser.DIV_ASSIGNMENT, 0)

        def MOD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MOD_ASSIGNMENT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = KotlinParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2451
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.ASSIGNMENT) | (1 << KotlinParser.ADD_ASSIGNMENT) | (1 << KotlinParser.SUB_ASSIGNMENT) | (1 << KotlinParser.MULT_ASSIGNMENT) | (1 << KotlinParser.DIV_ASSIGNMENT) | (1 << KotlinParser.MOD_ASSIGNMENT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_EQ(self):
            return self.getToken(KotlinParser.EXCL_EQ, 0)

        def EXCL_EQEQ(self):
            return self.getToken(KotlinParser.EXCL_EQEQ, 0)

        def EQEQ(self):
            return self.getToken(KotlinParser.EQEQ, 0)

        def EQEQEQ(self):
            return self.getToken(KotlinParser.EQEQEQ, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperation" ):
                listener.enterEqualityOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperation" ):
                listener.exitEqualityOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOperation" ):
                return visitor.visitEqualityOperation(self)
            else:
                return visitor.visitChildren(self)




    def equalityOperation(self):

        localctx = KotlinParser.EqualityOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_equalityOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2453
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.EXCL_EQ) | (1 << KotlinParser.EXCL_EQEQ) | (1 << KotlinParser.EQEQ) | (1 << KotlinParser.EQEQEQ))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LE(self):
            return self.getToken(KotlinParser.LE, 0)

        def GE(self):
            return self.getToken(KotlinParser.GE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = KotlinParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2455
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LANGLE) | (1 << KotlinParser.RANGLE) | (1 << KotlinParser.LE) | (1 << KotlinParser.GE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(KotlinParser.NOT_IN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInOperator" ):
                listener.enterInOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInOperator" ):
                listener.exitInOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInOperator" ):
                return visitor.visitInOperator(self)
            else:
                return visitor.visitChildren(self)




    def inOperator(self):

        localctx = KotlinParser.InOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_inOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2457
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IN or _la==KotlinParser.NOT_IN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(KotlinParser.IS, 0)

        def NOT_IS(self):
            return self.getToken(KotlinParser.NOT_IS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_isOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOperator" ):
                listener.enterIsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOperator" ):
                listener.exitIsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsOperator" ):
                return visitor.visitIsOperator(self)
            else:
                return visitor.visitChildren(self)




    def isOperator(self):

        localctx = KotlinParser.IsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_isOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IS or _la==KotlinParser.NOT_IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperator" ):
                listener.enterAdditiveOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperator" ):
                listener.exitAdditiveOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOperator" ):
                return visitor.visitAdditiveOperator(self)
            else:
                return visitor.visitChildren(self)




    def additiveOperator(self):

        localctx = KotlinParser.AdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_additiveOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            _la = self._input.LA(1)
            if not(_la==KotlinParser.ADD or _la==KotlinParser.SUB):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def DIV(self):
            return self.getToken(KotlinParser.DIV, 0)

        def MOD(self):
            return self.getToken(KotlinParser.MOD, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOperation" ):
                return visitor.visitMultiplicativeOperation(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeOperation(self):

        localctx = KotlinParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.MULT) | (1 << KotlinParser.MOD) | (1 << KotlinParser.DIV))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def AS_SAFE(self):
            return self.getToken(KotlinParser.AS_SAFE, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOperation" ):
                listener.enterTypeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOperation" ):
                listener.exitTypeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeOperation" ):
                return visitor.visitTypeOperation(self)
            else:
                return visitor.visitChildren(self)




    def typeOperation(self):

        localctx = KotlinParser.TypeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_typeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (KotlinParser.COLON - 25)) | (1 << (KotlinParser.AS_SAFE - 25)) | (1 << (KotlinParser.AS - 25)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def EXCL(self):
            return self.getToken(KotlinParser.EXCL, 0)

        def annotations(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationsContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(KotlinParser.LabelDefinitionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryOperation" ):
                listener.enterPrefixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryOperation" ):
                listener.exitPrefixUnaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryOperation" ):
                return visitor.visitPrefixUnaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryOperation(self):

        localctx = KotlinParser.PrefixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_prefixUnaryOperation)
        try:
            self.state = 2474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.INCR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2467
                self.match(KotlinParser.INCR)
                pass
            elif token in [KotlinParser.DECR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2468
                self.match(KotlinParser.DECR)
                pass
            elif token in [KotlinParser.ADD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2469
                self.match(KotlinParser.ADD)
                pass
            elif token in [KotlinParser.SUB]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2470
                self.match(KotlinParser.SUB)
                pass
            elif token in [KotlinParser.EXCL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2471
                self.match(KotlinParser.EXCL)
                pass
            elif token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2472
                self.annotations()
                pass
            elif token in [KotlinParser.LabelDefinition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2473
                self.labelDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def EXCL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.EXCL)
            else:
                return self.getToken(KotlinParser.EXCL, i)

        def arrayAccess(self):
            return self.getTypedRuleContext(KotlinParser.ArrayAccessContext,0)


        def memberAccessOperator(self):
            return self.getTypedRuleContext(KotlinParser.MemberAccessOperatorContext,0)


        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryOperation" ):
                listener.enterPostfixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryOperation" ):
                listener.exitPostfixUnaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryOperation" ):
                return visitor.visitPostfixUnaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryOperation(self):

        localctx = KotlinParser.PostfixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_postfixUnaryOperation)
        self._la = 0 # Token type
        try:
            self.state = 2490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.INCR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2476
                self.match(KotlinParser.INCR)
                pass
            elif token in [KotlinParser.DECR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2477
                self.match(KotlinParser.DECR)
                pass
            elif token in [KotlinParser.EXCL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2478
                self.match(KotlinParser.EXCL)
                self.state = 2479
                self.match(KotlinParser.EXCL)
                pass
            elif token in [KotlinParser.LSQUARE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2480
                self.arrayAccess()
                pass
            elif token in [KotlinParser.NL, KotlinParser.DOT, KotlinParser.QUEST]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2481
                    self.match(KotlinParser.NL)
                    self.state = 2486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2487
                self.memberAccessOperator()
                self.state = 2488
                self.postfixUnaryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def QUEST(self):
            return self.getToken(KotlinParser.QUEST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberAccessOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessOperator" ):
                listener.enterMemberAccessOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessOperator" ):
                listener.exitMemberAccessOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessOperator" ):
                return visitor.visitMemberAccessOperator(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessOperator(self):

        localctx = KotlinParser.MemberAccessOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_memberAccessOperator)
        try:
            self.state = 2495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.DOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2492
                self.match(KotlinParser.DOT)
                pass
            elif token in [KotlinParser.QUEST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2493
                self.match(KotlinParser.QUEST)
                self.state = 2494
                self.match(KotlinParser.DOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = KotlinParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_modifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2499
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                        self.state = 2497
                        self.annotations()
                        pass
                    elif token in [KotlinParser.IN, KotlinParser.OUT, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED]:
                        self.state = 2498
                        self.modifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2501 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModifier(self):
            return self.getTypedRuleContext(KotlinParser.ClassModifierContext,0)


        def memberModifier(self):
            return self.getTypedRuleContext(KotlinParser.MemberModifierContext,0)


        def visibilityModifier(self):
            return self.getTypedRuleContext(KotlinParser.VisibilityModifierContext,0)


        def varianceAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.VarianceAnnotationContext,0)


        def functionModifier(self):
            return self.getTypedRuleContext(KotlinParser.FunctionModifierContext,0)


        def propertyModifier(self):
            return self.getTypedRuleContext(KotlinParser.PropertyModifierContext,0)


        def inheritanceModifier(self):
            return self.getTypedRuleContext(KotlinParser.InheritanceModifierContext,0)


        def parameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,0)


        def typeParameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.TypeParameterModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = KotlinParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER]:
                self.state = 2503
                self.classModifier()
                pass
            elif token in [KotlinParser.OVERRIDE, KotlinParser.LATEINIT]:
                self.state = 2504
                self.memberModifier()
                pass
            elif token in [KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL]:
                self.state = 2505
                self.visibilityModifier()
                pass
            elif token in [KotlinParser.IN, KotlinParser.OUT]:
                self.state = 2506
                self.varianceAnnotation()
                pass
            elif token in [KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND]:
                self.state = 2507
                self.functionModifier()
                pass
            elif token in [KotlinParser.CONST]:
                self.state = 2508
                self.propertyModifier()
                pass
            elif token in [KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN]:
                self.state = 2509
                self.inheritanceModifier()
                pass
            elif token in [KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE]:
                self.state = 2510
                self.parameterModifier()
                pass
            elif token in [KotlinParser.REIFIED]:
                self.state = 2511
                self.typeParameterModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2514
                    self.match(KotlinParser.NL) 
                self.state = 2519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModifier" ):
                return visitor.visitClassModifier(self)
            else:
                return visitor.visitChildren(self)




    def classModifier(self):

        localctx = KotlinParser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_classModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            _la = self._input.LA(1)
            if not(((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (KotlinParser.ENUM - 108)) | (1 << (KotlinParser.SEALED - 108)) | (1 << (KotlinParser.ANNOTATION - 108)) | (1 << (KotlinParser.DATA - 108)) | (1 << (KotlinParser.INNER - 108)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberModifier" ):
                return visitor.visitMemberModifier(self)
            else:
                return visitor.visitChildren(self)




    def memberModifier(self):

        localctx = KotlinParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2522
            _la = self._input.LA(1)
            if not(_la==KotlinParser.OVERRIDE or _la==KotlinParser.LATEINIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_visibilityModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityModifier" ):
                listener.enterVisibilityModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityModifier" ):
                listener.exitVisibilityModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibilityModifier" ):
                return visitor.visitVisibilityModifier(self)
            else:
                return visitor.visitChildren(self)




    def visibilityModifier(self):

        localctx = KotlinParser.VisibilityModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_visibilityModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarianceAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_varianceAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarianceAnnotation" ):
                listener.enterVarianceAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarianceAnnotation" ):
                listener.exitVarianceAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarianceAnnotation" ):
                return visitor.visitVarianceAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def varianceAnnotation(self):

        localctx = KotlinParser.VarianceAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_varianceAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2526
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IN or _la==KotlinParser.OUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionModifier" ):
                listener.enterFunctionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionModifier" ):
                listener.exitFunctionModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionModifier" ):
                return visitor.visitFunctionModifier(self)
            else:
                return visitor.visitChildren(self)




    def functionModifier(self):

        localctx = KotlinParser.FunctionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_functionModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2528
            _la = self._input.LA(1)
            if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (KotlinParser.TAILREC - 113)) | (1 << (KotlinParser.OPERATOR - 113)) | (1 << (KotlinParser.INLINE - 113)) | (1 << (KotlinParser.INFIX - 113)) | (1 << (KotlinParser.EXTERNAL - 113)) | (1 << (KotlinParser.SUSPEND - 113)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_propertyModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifier" ):
                listener.enterPropertyModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifier" ):
                listener.exitPropertyModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyModifier" ):
                return visitor.visitPropertyModifier(self)
            else:
                return visitor.visitChildren(self)




    def propertyModifier(self):

        localctx = KotlinParser.PropertyModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_propertyModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2530
            self.match(KotlinParser.CONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inheritanceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceModifier" ):
                listener.enterInheritanceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceModifier" ):
                listener.exitInheritanceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceModifier" ):
                return visitor.visitInheritanceModifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceModifier(self):

        localctx = KotlinParser.InheritanceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_inheritanceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2532
            _la = self._input.LA(1)
            if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (KotlinParser.ABSTRACT - 120)) | (1 << (KotlinParser.FINAL - 120)) | (1 << (KotlinParser.OPEN - 120)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterModifier" ):
                listener.enterParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterModifier" ):
                listener.exitParameterModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterModifier" ):
                return visitor.visitParameterModifier(self)
            else:
                return visitor.visitChildren(self)




    def parameterModifier(self):

        localctx = KotlinParser.ParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_parameterModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2534
            _la = self._input.LA(1)
            if not(((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (KotlinParser.VARARG - 125)) | (1 << (KotlinParser.NOINLINE - 125)) | (1 << (KotlinParser.CROSSINLINE - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifier" ):
                listener.enterTypeParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifier" ):
                listener.exitTypeParameterModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterModifier" ):
                return visitor.visitTypeParameterModifier(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterModifier(self):

        localctx = KotlinParser.TypeParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_typeParameterModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            self.match(KotlinParser.REIFIED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LabelDefinition(self):
            return self.getToken(KotlinParser.LabelDefinition, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = KotlinParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            self.match(KotlinParser.LabelDefinition)
            self.state = 2542
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,379,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2539
                    self.match(KotlinParser.NL) 
                self.state = 2544
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,379,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def annotationList(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotations" ):
                listener.enterAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotations" ):
                listener.exitAnnotations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotations" ):
                return visitor.visitAnnotations(self)
            else:
                return visitor.visitChildren(self)




    def annotations(self):

        localctx = KotlinParser.AnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_annotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.state = 2545
                self.annotation()
                pass

            elif la_ == 2:
                self.state = 2546
                self.annotationList()
                pass


            self.state = 2552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2549
                    self.match(KotlinParser.NL) 
                self.state = 2554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def unescapedAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = KotlinParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.state = 2590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2555
                self.annotationUseSiteTarget()
                self.state = 2559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2556
                    self.match(KotlinParser.NL)
                    self.state = 2561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2562
                self.match(KotlinParser.COLON)
                self.state = 2566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2563
                    self.match(KotlinParser.NL)
                    self.state = 2568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2569
                self.unescapedAnnotation()
                pass
            elif token in [KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2571
                self.match(KotlinParser.LabelReference)
                self.state = 2579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                if la_ == 1:
                    self.state = 2575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2572
                        self.match(KotlinParser.NL)
                        self.state = 2577
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2578
                    self.typeArguments()


                self.state = 2588
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 2584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2581
                        self.match(KotlinParser.NL)
                        self.state = 2586
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2587
                    self.valueArguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def AT(self):
            return self.getToken(KotlinParser.AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationList" ):
                listener.enterAnnotationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationList" ):
                listener.exitAnnotationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationList" ):
                return visitor.visitAnnotationList(self)
            else:
                return visitor.visitChildren(self)




    def annotationList(self):

        localctx = KotlinParser.AnnotationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_annotationList)
        self._la = 0 # Token type
        try:
            self.state = 2611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2592
                self.annotationUseSiteTarget()
                self.state = 2593
                self.match(KotlinParser.COLON)
                self.state = 2594
                self.match(KotlinParser.LSQUARE)
                self.state = 2596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2595
                    self.unescapedAnnotation()
                    self.state = 2598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                        break

                self.state = 2600
                self.match(KotlinParser.RSQUARE)
                pass
            elif token in [KotlinParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2602
                self.match(KotlinParser.AT)
                self.state = 2603
                self.match(KotlinParser.LSQUARE)
                self.state = 2605 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2604
                    self.unescapedAnnotation()
                    self.state = 2607 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                        break

                self.state = 2609
                self.match(KotlinParser.RSQUARE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationUseSiteTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIELD(self):
            return self.getToken(KotlinParser.FIELD, 0)

        def FILE(self):
            return self.getToken(KotlinParser.FILE, 0)

        def PROPERTY(self):
            return self.getToken(KotlinParser.PROPERTY, 0)

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def RECEIVER(self):
            return self.getToken(KotlinParser.RECEIVER, 0)

        def PARAM(self):
            return self.getToken(KotlinParser.PARAM, 0)

        def SETPARAM(self):
            return self.getToken(KotlinParser.SETPARAM, 0)

        def DELEGATE(self):
            return self.getToken(KotlinParser.DELEGATE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationUseSiteTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationUseSiteTarget" ):
                listener.enterAnnotationUseSiteTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationUseSiteTarget" ):
                listener.exitAnnotationUseSiteTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationUseSiteTarget" ):
                return visitor.visitAnnotationUseSiteTarget(self)
            else:
                return visitor.visitChildren(self)




    def annotationUseSiteTarget(self):

        localctx = KotlinParser.AnnotationUseSiteTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_annotationUseSiteTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            _la = self._input.LA(1)
            if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (KotlinParser.FILE - 56)) | (1 << (KotlinParser.FIELD - 56)) | (1 << (KotlinParser.PROPERTY - 56)) | (1 << (KotlinParser.GET - 56)) | (1 << (KotlinParser.SET - 56)) | (1 << (KotlinParser.RECEIVER - 56)) | (1 << (KotlinParser.PARAM - 56)) | (1 << (KotlinParser.SETPARAM - 56)) | (1 << (KotlinParser.DELEGATE - 56)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnescapedAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_unescapedAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedAnnotation" ):
                listener.enterUnescapedAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedAnnotation" ):
                listener.exitUnescapedAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnescapedAnnotation" ):
                return visitor.visitUnescapedAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def unescapedAnnotation(self):

        localctx = KotlinParser.UnescapedAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_unescapedAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self.identifier()
            self.state = 2617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LANGLE:
                self.state = 2616
                self.typeArguments()


            self.state = 2620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.state = 2619
                self.valueArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = KotlinParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2622
            self.simpleIdentifier()
            self.state = 2633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,395,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2623
                        self.match(KotlinParser.NL)
                        self.state = 2628
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2629
                    self.match(KotlinParser.DOT)
                    self.state = 2630
                    self.simpleIdentifier() 
                self.state = 2635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,395,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(KotlinParser.Identifier, 0)

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def GETTER(self):
            return self.getToken(KotlinParser.GETTER, 0)

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def SETTER(self):
            return self.getToken(KotlinParser.SETTER, 0)

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIdentifier" ):
                return visitor.visitSimpleIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def simpleIdentifier(self):

        localctx = KotlinParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemi" ):
                listener.enterSemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemi" ):
                listener.exitSemi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSemi" ):
                return visitor.visitSemi(self)
            else:
                return visitor.visitChildren(self)




    def semi(self):

        localctx = KotlinParser.SemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_semi)
        self._la = 0 # Token type
        try:
            self.state = 2656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2639 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2638
                        self.match(KotlinParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2641 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,396,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2643
                    self.match(KotlinParser.NL)
                    self.state = 2648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2649
                self.match(KotlinParser.SEMICOLON)
                self.state = 2653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2650
                        self.match(KotlinParser.NL) 
                    self.state = 2655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnysemiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(KotlinParser.NL, 0)

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_anysemi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnysemi" ):
                listener.enterAnysemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnysemi" ):
                listener.exitAnysemi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnysemi" ):
                return visitor.visitAnysemi(self)
            else:
                return visitor.visitChildren(self)




    def anysemi(self):

        localctx = KotlinParser.AnysemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_anysemi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            _la = self._input.LA(1)
            if not(_la==KotlinParser.NL or _la==KotlinParser.SEMICOLON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





