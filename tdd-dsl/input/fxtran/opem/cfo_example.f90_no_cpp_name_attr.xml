<?xml version="1.0"?><object xmlns="http://fxtran.net/#syntax" source-form="FREE" source-width="132" openmp="0" openacc="0"><file name="cfo_example.f90"><C>! minimal example from uvic-model/2.9/updates/uvic-updates-opem/f90/cfo.f90</C>
<module-stmt>MODULE <module-N><N n="CFO_EXAMPLE"><n>cfo_example</n></N></module-N></module-stmt>  
  <implicit-none-stmt>IMPLICIT NONE</implicit-none-stmt>

  <C>!---------------------------------------------</C>
  <C>!------------- UVIC EXAMPLE ------------------</C>
  <C>!---------------------------------------------</C>

  <private-stmt>PRIVATE</private-stmt>
  <public-stmt>PUBLIC :: <EN-LT><EN><N n="FT_ME"><n>fT_ME</n></N></EN>, <EN><N n="ZXREX"><n>zxrex</n></N></EN>, <EN><N n="NPREY"><n>nprey</n></N></EN></EN-LT></public-stmt>

  <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>INTEGER</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>PARAMETER</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="DP"><n>dp</n></N></EN-N>=<init-E><named-E><N n="KIND"><n>KIND</n></N><R-LT><parens-R>(<element-LT><element><literal-E><l>0D0</l></literal-E></element></element-LT>)</parens-R></R-LT></named-E></init-E></EN-decl></EN-decl-LT></T-decl-stmt>
  <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>INTEGER</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="NPREY"><n>nprey</n></N></EN-N>=<init-E><literal-E><l>4</l></literal-E></init-E></EN-decl></EN-decl-LT></T-decl-stmt>
  <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>REAL</T-N><K-selector>(<K-spec><named-E><N n="DP"><n>dp</n></N></named-E></K-spec>)</K-selector></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>PARAMETER</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="CFDS"><n>cfds</n></N></EN-N>=<init-E><literal-E><l>86.4D3</l></literal-E></init-E></EN-decl></EN-decl-LT></T-decl-stmt>

  <include>INCLUDE '<filename>stdunits.h</filename>'</include>
<file name="stdunits.h"><C>!====================== include file &quot;stdunits.h&quot; ======================</C>

<C>!     stdin  = unit number for standard input.</C>
<C>!     stdout = unit number for standard output.</C>
<C>!     stderr = unit number for standard error.</C>

      <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_> <EN-decl-LT><EN-decl><EN-N><N n="STDIN"><n>stdin</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="STDOUT"><n>stdout</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="STDERR"><n>stderr</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
      <parameter-stmt>parameter (<EN-decl-LT><EN-decl><EN-N><N n="STDIN"><n>stdin</n></N></EN-N> = <init-E><literal-E><l>5</l></literal-E></init-E></EN-decl>, <EN-decl><EN-N><N n="STDOUT"><n>stdout</n></N></EN-N> = <init-E><literal-E><l>6</l></literal-E></init-E></EN-decl>, <EN-decl><EN-N><N n="STDERR"><n>stderr</n></N></EN-N> = <init-E><literal-E><l>6</l></literal-E></init-E></EN-decl></EN-decl-LT>)</parameter-stmt>
</file>
  <T-stmt>TYPE, <attribute><attribute-N>PUBLIC</attribute-N></attribute> :: <T-N><N n="OCF"><n>ocf</n></N></T-N></T-stmt>
     <component-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>REAL</T-N><K-selector>(<K-spec><named-E><N n="DP"><n>dp</n></N></named-E></K-spec>)</K-selector></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="NGR"><n>ngr</n></N></EN-N></EN-decl>,<cnt>&amp;</cnt>  <C>! relative growth rate</C>
          <EN-decl><EN-N><N n="CA"><n>ca</n></N></EN-N>=<init-E><literal-E><l>0.1D0</l></literal-E></init-E></EN-decl>,<cnt>&amp;</cnt>    <C>! cost of assimilation coefficients</C>
          <EN-decl><EN-N><N n="CF"><n>cf</n></N></EN-N>=<init-E><literal-E><l>0.1D0</l></literal-E></init-E></EN-decl>,<cnt>&amp;</cnt>    <C>! cost of foraging coefficients</C>
          <EN-decl><EN-N><N n="AF"><n>Af</n></N></EN-N></EN-decl>,<cnt>&amp;</cnt>          <C>! foraging activity</C>
          <EN-decl><EN-N><N n="IC"><n>IC</n></N></EN-N></EN-decl>,<cnt>&amp;</cnt>          <C>! C ingestion</C>
          <EN-decl><EN-N><N n="E"><n>E</n></N></EN-N></EN-decl>,<cnt>&amp;</cnt>           <C>! assimilation efficiency</C>
          <EN-decl><EN-N><N n="POC"><n>POC</n></N></EN-N></EN-decl>,<cnt>&amp;</cnt>         <C>! zooplankton biomass concentration</C>
          <EN-decl><EN-N><N n="RC"><n>RC</n></N></EN-N></EN-decl>,<cnt>&amp;</cnt>          <C>! respiration</C>
          <EN-decl><EN-N><N n="XC"><n>XC</n></N></EN-N></EN-decl></EN-decl-LT></component-decl-stmt>            <C>! C excretion</C>
  <end-T-stmt>END TYPE <T-N><N n="OCF"><n>ocf</n></N></T-N></end-T-stmt>
  <T-decl-stmt><_T-spec_><derived-T-spec>TYPE(<T-N><N n="OCF"><n>ocf</n></N></T-N>)</derived-T-spec></_T-spec_>, <attribute><attribute-N>DIMENSION</attribute-N><array-spec>(<shape-spec-LT><shape-spec>:</shape-spec></shape-spec-LT>)</array-spec></attribute>, <attribute><attribute-N>ALLOCATABLE</attribute-N></attribute>, <attribute><attribute-N>PUBLIC</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="ZOO"><n>zoo</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>

  <C>!---------------------------------------------</C>
  <C>!---------- FORTRAN EXAMPLE ------------------</C>
  <C>!---------------------------------------------</C>

  <public-stmt>PUBLIC :: <EN-LT><EN><N n="GET_SUM0"><n>get_sum0</n></N></EN>, <EN><N n="GET_SUM1"><n>get_sum1</n></N></EN></EN-LT></public-stmt>
  <private-stmt>PRIVATE :: <EN-LT><EN><N n="GET_SUM2"><n>get_sum2</n></N></EN></EN-LT></private-stmt>

  <C>! Set the super type as abstract</C>
  <T-stmt>type, <attribute><attribute-N>abstract</attribute-N></attribute> :: <T-N><N n="SHAPE_M"><n>shape_m</n></N></T-N></T-stmt>
 
    <C>! Sub-types receive these variables</C>
    <component-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>real</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="X"><n>x</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="Y"><n>y</n></N></EN-N></EN-decl></EN-decl-LT></component-decl-stmt>
 
  <contains-stmt>contains</contains-stmt>

    <C>! This procedure marked as deferred</C>
    <C>! will be defined in sub-types</C>
    <component-decl-stmt><_T-spec_><procedure-T-spec>procedure(<procedure-N><N n="SHAPE_AREA"><n>shape_area</n></N></procedure-N>)</procedure-T-spec></_T-spec_>, <attribute><attribute-N>deferred</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="GET_AREA"><n>get_area</n></N></EN-N></EN-decl></EN-decl-LT></component-decl-stmt>
  <end-T-stmt>end type <T-N><N n="SHAPE_M"><n>shape_m</n></N></T-N></end-T-stmt>
 
  <C>! Define that we want to return the defined</C>
  <C>! area for each shape sub-class</C>
  <interface-stmt>interface</interface-stmt>
    <function-stmt>function <function-N><N n="SHAPE_AREA"><n>shape_area</n></N></function-N>(<dummy-arg-LT><arg-N><N n="THIS"><n>this</n></N></arg-N></dummy-arg-LT>) <result-spec>result(<N n="AREA"><n>area</n></N>)</result-spec></function-stmt>
      <import-stmt>import :: <import-N-LT><N n="SHAPE_M"><n>shape_m</n></N></import-N-LT></import-stmt>
      <T-decl-stmt><_T-spec_><derived-T-spec>class(<T-N><N n="SHAPE_M"><n>shape_m</n></N></T-N>)</derived-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="THIS"><n>this</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
      <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>real</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="AREA"><n>area</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <end-function-stmt>end function <function-N><N n="SHAPE_AREA"><n>shape_area</n></N></function-N></end-function-stmt>
  <end-interface-stmt>end interface</end-interface-stmt>

  <C>!---------------------------------------------</C>
  <C>!---------------------------------------------</C>
  <C>!---------------------------------------------</C>

<contains-stmt>CONTAINS</contains-stmt>

  <C>!---------------------------------------------</C>
  <C>!------------- UVIC EXAMPLE ------------------</C>
  <C>!---------------------------------------------</C>

  <C>! excrete (respire) extra C in food</C>
  <subroutine-stmt>SUBROUTINE <subroutine-N><N n="ZXREX"><n>zxrex</n></N></subroutine-N> (<dummy-arg-LT><arg-N><N n="ZOO"><n>zoo</n></N></arg-N>, <arg-N><N n="RM"><n>Rm</n></N></arg-N>, <arg-N><N n="FQ"><n>fQ</n></N></arg-N></dummy-arg-LT>)</subroutine-stmt>
    <implicit-none-stmt>IMPLICIT NONE</implicit-none-stmt>
    <T-decl-stmt><_T-spec_><derived-T-spec>CLASS(<T-N><N n="OCF"><n>ocf</n></N></T-N>)</derived-T-spec></_T-spec_>, <attribute><attribute-N>INTENT</attribute-N>(<intent-spec>INOUT</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="ZOO"><n>zoo</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>REAL</T-N><K-selector>(<K-spec><named-E><N n="DP"><n>dp</n></N></named-E></K-spec>)</K-selector></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>INTENT</attribute-N>(<intent-spec>IN</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="RM"><n>Rm</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="FQ"><n>fQ</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>REAL</T-N><K-selector>(<K-spec><named-E><N n="DP"><n>dp</n></N></named-E></K-spec>)</K-selector></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="EI"><n>EI</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <a-stmt><E-1><named-E><N n="EI"><n>EI</n></N></named-E></E-1> <a>=</a> <E-2><op-E><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>E</ct></component-R></R-LT></named-E><op n="*"><o>*</o></op><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>IC</ct></component-R></R-LT></named-E></op-E></E-2></a-stmt>
    <a-stmt><E-1><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>ngr</ct></component-R></R-LT></named-E></E-1> <a>=</a> <E-2><op-E><parens-E>(<op-E><op-E><named-E><N n="EI"><n>EI</n></N></named-E><op n="*"><o>*</o></op><parens-E>(<op-E><literal-E><l>1D0</l></literal-E> <op n="-"><o>-</o></op> <named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>ca</ct></component-R></R-LT></named-E></op-E>)</parens-E></op-E> <op n="-"><o>-</o></op> <op-E><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>poc</ct></component-R></R-LT></named-E><op n="*"><o>*</o></op><parens-E>(<op-E><op-E><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>cf</ct></component-R></R-LT></named-E><op n="*"><o>*</o></op><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>Af</ct></component-R></R-LT></named-E></op-E> <op n="+"><o>+</o></op> <named-E><N n="RM"><n>Rm</n></N></named-E></op-E>)</parens-E></op-E></op-E>)</parens-E><op n="*"><o>*</o></op><named-E><N n="FQ"><n>fQ</n></N></named-E></op-E></E-2></a-stmt>
    <a-stmt><E-1><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>RC</ct></component-R></R-LT></named-E></E-1>  <a>=</a> <E-2><op-E><named-E><N n="EI"><n>EI</n></N></named-E> <op n="-"><o>-</o></op> <named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>ngr</ct></component-R></R-LT></named-E></op-E></E-2></a-stmt>        <C>! respiration</C>
    <a-stmt><E-1><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>XC</ct></component-R></R-LT></named-E></E-1> <a>=</a> <E-2><op-E><named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>IC</ct></component-R></R-LT></named-E><op n="*"><o>*</o></op><parens-E>(<op-E><literal-E><l>1D0</l></literal-E> <op n="-"><o>-</o></op> <named-E><N n="ZOO"><n>zoo</n></N><R-LT><component-R>%<ct>E</ct></component-R></R-LT></named-E></op-E>)</parens-E></op-E></E-2></a-stmt> <C>! egestion</C>
  <end-subroutine-stmt>END SUBROUTINE <subroutine-N><N n="ZXREX"><n>zxrex</n></N></subroutine-N></end-subroutine-stmt>

  <C>! temperature function for Mytilus edulis from Jenny's simulations</C>
  <function-stmt>FUNCTION <function-N><N n="FT_ME"><n>fT_ME</n></N></function-N> (<dummy-arg-LT><arg-N><N n="TEMPERATURE"><n>temperature</n></N></arg-N></dummy-arg-LT>) <result-spec>RESULT (<N n="FT"><n>fT</n></N>)</result-spec></function-stmt>
    <implicit-none-stmt>IMPLICIT NONE</implicit-none-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>REAL</T-N><K-selector>(<K-spec><named-E><N n="DP"><n>dp</n></N></named-E></K-spec>)</K-selector></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>INTENT</attribute-N>(<intent-spec>IN</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="TEMPERATURE"><n>temperature</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>REAL</T-N><K-selector>(<K-spec><named-E><N n="DP"><n>dp</n></N></named-E></K-spec>)</K-selector></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="FT"><n>fT</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <a-stmt><E-1><named-E><N n="FT"><n>fT</n></N></named-E></E-1> <a>=</a> <E-2><op-E><parens-E>(<op-E><literal-E><l>1D0</l></literal-E> <op n="+"><o>+</o></op> <op-E><parens-E>(<op-E><named-E><N n="TEMPERATURE"><n>temperature</n></N></named-E> <op n="-"><o>-</o></op> <literal-E><l>15D0</l></literal-E></op-E>)</parens-E><op n="*"><o>*</o></op><literal-E><l>9.5D0</l></literal-E></op-E></op-E>)</parens-E><op n="/"><o>/</o></op><literal-E><l>260D0</l></literal-E></op-E></E-2></a-stmt>
  <end-function-stmt>END FUNCTION <function-N><N n="FT_ME"><n>fT_ME</n></N></function-N></end-function-stmt>
  
  <C>!---------------------------------------------</C>
  <C>!---------- FORTRAN EXAMPLE ------------------</C>
  <C>!---------------------------------------------</C>

  <C>! Return type, function, name, arguments</C>
  <function-stmt><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec> function <function-N><N n="GET_SUM0"><n>get_sum0</n></N></function-N>(<dummy-arg-LT><arg-N><N n="N1"><n>n1</n></N></arg-N>, <arg-N><N n="N2"><n>n2</n></N></arg-N></dummy-arg-LT>)</function-stmt>
    <implicit-none-stmt>implicit none</implicit-none-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="N1"><n>n1</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="N2"><n>n2</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="SUM"><n>sum</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>

    <C>! The last value defined is returned</C>
    <a-stmt><E-1><named-E><N n="SUM"><n>sum</n></N></named-E></E-1> <a>=</a> <E-2><named-E><N n="GET_SUM1"><n>get_sum1</n></N><R-LT><parens-R>(<element-LT><element><named-E><N n="N1"><n>n1</n></N></named-E></element>, <element><named-E><N n="N2"><n>n2</n></N></named-E></element></element-LT>)</parens-R></R-LT></named-E></E-2></a-stmt>
  <end-function-stmt>end function <function-N><N n="GET_SUM0"><n>get_sum0</n></N></function-N></end-function-stmt>

  <C>! Define variable to be returned</C>
  <function-stmt>function <function-N><N n="GET_SUM1"><n>get_sum1</n></N></function-N>(<dummy-arg-LT><arg-N><N n="N1"><n>n1</n></N></arg-N>, <arg-N><N n="N2"><n>n2</n></N></arg-N></dummy-arg-LT>) <result-spec>result(<N n="SUM"><n>sum</n></N>)</result-spec></function-stmt>
    <implicit-none-stmt>implicit none</implicit-none-stmt>

    <C>! Don't allow variable values to change</C>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>intent</attribute-N>(<intent-spec>in</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="N1"><n>n1</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="N2"><n>n2</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="SUM"><n>sum</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <a-stmt><E-1><named-E><N n="SUM"><n>sum</n></N></named-E></E-1> <a>=</a> <E-2><named-E><N n="GET_SUM2"><n>get_sum2</n></N><R-LT><parens-R>(<element-LT><element><named-E><N n="N1"><n>n1</n></N></named-E></element>, <element><named-E><N n="N2"><n>n2</n></N></named-E></element></element-LT>)</parens-R></R-LT></named-E></E-2></a-stmt>
  <end-function-stmt>end function <function-N><N n="GET_SUM1"><n>get_sum1</n></N></function-N></end-function-stmt>

  <C>! Block functions from changing input</C>
  <C>! variables with pure</C>
  <function-stmt><prefix>pure</prefix> function <function-N><N n="GET_SUM2"><n>get_sum2</n></N></function-N>(<dummy-arg-LT><arg-N><N n="N1"><n>n1</n></N></arg-N>, <arg-N><N n="N2"><n>n2</n></N></arg-N></dummy-arg-LT>) <result-spec>result(<N n="SUM"><n>sum</n></N>)</result-spec></function-stmt>
    <implicit-none-stmt>implicit none</implicit-none-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>intent</attribute-N>(<intent-spec>in</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="N1"><n>n1</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>

    <C>! Arguments don't need to have a value passed</C>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>intent</attribute-N>(<intent-spec>in</intent-spec>)</attribute>, <attribute><attribute-N>optional</attribute-N></attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="N2"><n>n2</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_> :: <EN-decl-LT><EN-decl><EN-N><N n="SUM"><n>sum</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>

    <if-then-stmt>if(<condition-E><named-E><N n="PRESENT"><n>present</n></N><R-LT><parens-R>(<element-LT><element><named-E><N n="N2"><n>n2</n></N></named-E></element></element-LT>)</parens-R></R-LT></named-E></condition-E>) then</if-then-stmt>
      <a-stmt><E-1><named-E><N n="SUM"><n>sum</n></N></named-E></E-1> <a>=</a> <E-2><op-E><named-E><N n="N1"><n>n1</n></N></named-E> <op n="+"><o>+</o></op> <named-E><N n="N2"><n>n2</n></N></named-E></op-E></E-2></a-stmt>
    <else-stmt>else</else-stmt>
      <a-stmt><E-1><named-E><N n="SUM"><n>sum</n></N></named-E></E-1> <a>=</a> <E-2><op-E><parens-E>(<op-E><named-E><N n="N1"><n>n1</n></N></named-E> <op n="+"><o>+</o></op> <literal-E><l>1</l></literal-E></op-E>)</parens-E> <op n="*"><o>*</o></op> <literal-E><l>2</l></literal-E></op-E></E-2></a-stmt>
    <end-if-stmt>end if</end-if-stmt>
  <end-function-stmt>end function <function-N><N n="GET_SUM2"><n>get_sum2</n></N></function-N></end-function-stmt>
  
  <subroutine-stmt>subroutine <subroutine-N><N n="PLUS_TWO"><n>plus_two</n></N></subroutine-N>(<dummy-arg-LT><arg-N><N n="N"><n>n</n></N></arg-N>, <arg-N><N n="PLUS1"><n>plus1</n></N></arg-N>, <arg-N><N n="PLUS2"><n>plus2</n></N></arg-N></dummy-arg-LT>)</subroutine-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>intent</attribute-N>(<intent-spec>in</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="N"><n>n</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt>
    <T-decl-stmt><_T-spec_><intrinsic-T-spec><T-N>integer</T-N></intrinsic-T-spec></_T-spec_>, <attribute><attribute-N>intent</attribute-N>(<intent-spec>out</intent-spec>)</attribute> :: <EN-decl-LT><EN-decl><EN-N><N n="PLUS1"><n>plus1</n></N></EN-N></EN-decl>, <EN-decl><EN-N><N n="PLUS2"><n>plus2</n></N></EN-N></EN-decl></EN-decl-LT></T-decl-stmt> <C>! Output</C>
    <a-stmt><E-1><named-E><N n="PLUS1"><n>plus1</n></N></named-E></E-1> <a>=</a> <E-2><op-E><parens-E>(<op-E><named-E><N n="N"><n>n</n></N></named-E> <op n="+"><o>+</o></op> <literal-E><l>1</l></literal-E></op-E>)</parens-E> <op n="*"><o>*</o></op> <parens-E>(<op-E><literal-E><l>1</l></literal-E> <op n="+"><o>+</o></op> <literal-E><l>0</l></literal-E></op-E>)</parens-E></op-E></E-2></a-stmt>
    <a-stmt><E-1><named-E><N n="PLUS2"><n>plus2</n></N></named-E></E-1> <a>=</a> <E-2><op-E><named-E><N n="N"><n>n</n></N></named-E> <op n="+"><o>+</o></op> <literal-E><l>2</l></literal-E></op-E></E-2></a-stmt>
  <end-subroutine-stmt>end subroutine <subroutine-N><N n="PLUS_TWO"><n>plus_two</n></N></subroutine-N></end-subroutine-stmt>

  <C>!---------------------------------------------</C>
  <C>!---------------------------------------------</C>
  <C>!---------------------------------------------</C>

<end-module-stmt>END MODULE <module-N><N n="CFO_EXAMPLE"><n>cfo_example</n></N></module-N></end-module-stmt>
</file></object>
