digraph "classes" {
rankdir=BT
charset="utf-8"
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ArraySymbol" [color="black", fontcolor="black", label=<{ArraySymbol|lowerBound : int<br ALIGN="LEFT"/>upperBound : int<br ALIGN="LEFT"/>value : list<br ALIGN="LEFT"/>vectors : list<br ALIGN="LEFT"/>|add(vector, val): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ArrayType" [color="black", fontcolor="black", label=<{ArrayType|elementType<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|baseTypes(): List[Type]<br ALIGN="LEFT"/>kind(): TypeKind<br ALIGN="LEFT"/>reference(): ReferenceKind<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.BlockSymbol" [color="black", fontcolor="black", label=<{BlockSymbol|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ClassSymbol" [color="black", fontcolor="black", label=<{ClassSymbol|extends<br ALIGN="LEFT"/>implements<br ALIGN="LEFT"/>isStruct : bool<br ALIGN="LEFT"/>isStruct : bool<br ALIGN="LEFT"/>reference<br ALIGN="LEFT"/>reference : Irrelevant<br ALIGN="LEFT"/>|baseTypes(): List[Type]<br ALIGN="LEFT"/>getFields(includeInherited): Coroutine[List[T]]<br ALIGN="LEFT"/>getMethods(includeInherited): Coroutine[List[T]]<br ALIGN="LEFT"/>kind(): TypeKind<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.DuplicateSymbolError" [color="black", fontcolor="red", label=<{DuplicateSymbolError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.EnumSymbol" [color="black", fontcolor="black", label=<{EnumSymbol|value : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.FieldSymbol" [color="black", fontcolor="black", label=<{FieldSymbol|getter : Optional[MethodSymbol]<br ALIGN="LEFT"/>setter : Optional[MethodSymbol]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.FundamentalType" [color="black", fontcolor="black", label=<{FundamentalType|boolType<br ALIGN="LEFT"/>floatType<br ALIGN="LEFT"/>integerType<br ALIGN="LEFT"/>stringType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.FundamentalUnit" [color="black", fontcolor="black", label=<{FundamentalUnit|AmpereUnit<br ALIGN="LEFT"/>CandelaUnit<br ALIGN="LEFT"/>JouleUnit<br ALIGN="LEFT"/>KelvinUnit<br ALIGN="LEFT"/>MoleUnit<br ALIGN="LEFT"/>PascalUnit<br ALIGN="LEFT"/>TonUnit<br ALIGN="LEFT"/>gramUnit<br ALIGN="LEFT"/>kilogramUnit<br ALIGN="LEFT"/>metreUnit<br ALIGN="LEFT"/>secondUnit<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.GroupSymbol" [color="black", fontcolor="black", label=<{GroupSymbol|description : Optional[str]<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>groupType : Optional[T]<br ALIGN="LEFT"/>groupType : T<br ALIGN="LEFT"/>|getGroupVars(localOnly): Coroutine[List[T]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.InterfaceSymbol" [color="black", fontcolor="black", label=<{InterfaceSymbol|extends<br ALIGN="LEFT"/>reference<br ALIGN="LEFT"/>reference : Irrelevant<br ALIGN="LEFT"/>|baseTypes(): List[Type]<br ALIGN="LEFT"/>getFields(includeInherited): Coroutine[List[T]]<br ALIGN="LEFT"/>getMethods(includeInherited): Coroutine[List[MethodSymbol]]<br ALIGN="LEFT"/>kind(): TypeKind<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.LiteralSymbol" [color="black", fontcolor="black", label=<{LiteralSymbol|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.MemberVisibility" [color="black", fontcolor="black", label=<{MemberVisibility|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.MethodFlags" [color="black", fontcolor="black", label=<{MethodFlags|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.MethodSymbol" [color="black", fontcolor="black", label=<{MethodSymbol|methodFlags : NoneFL<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.Modifier" [color="black", fontcolor="black", label=<{Modifier|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.NamespaceSymbol" [color="black", fontcolor="black", label=<{NamespaceSymbol|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ParameterSymbol" [color="black", fontcolor="black", label=<{ParameterSymbol|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ReferenceKind" [color="black", fontcolor="black", label=<{ReferenceKind|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.RoutineSymbol" [color="black", fontcolor="black", label=<{RoutineSymbol|is_activated : bool<br ALIGN="LEFT"/>returnType : Optional[Type]<br ALIGN="LEFT"/>returnType : Optional[Type]<br ALIGN="LEFT"/>|getFeatures(localOnly): Coroutine[List[T]]<br ALIGN="LEFT"/>getParameters(localOnly): Coroutine[List[T]]<br ALIGN="LEFT"/>getUnits(localOnly): Coroutine[List[T]]<br ALIGN="LEFT"/>getVariables(localOnly): Coroutine[List[T]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" [color="black", fontcolor="black", label=<{ScopedSymbol|<br ALIGN="LEFT"/>|addSymbol(symbol: Symbol): None<br ALIGN="LEFT"/>children(): List[Symbol]<br ALIGN="LEFT"/>clear(): None<br ALIGN="LEFT"/>directScopes(): Coroutine[List[ScopedSymbol]]<br ALIGN="LEFT"/>firstChild(): Optional[Symbol]<br ALIGN="LEFT"/>getAllNestedSymbols(name: str): List[Symbol]<br ALIGN="LEFT"/>getAllNestedSymbolsSync(name: str): List[Symbol]<br ALIGN="LEFT"/>getAllSymbols(t: type, localOnly): List[T]<br ALIGN="LEFT"/>getAllSymbolsSync(t: type, localOnly: bool): List[T]<br ALIGN="LEFT"/>getNestedSymbolsOfType(t: type): List[T]<br ALIGN="LEFT"/>getNestedSymbolsOfTypeSync(t: type): List[T]<br ALIGN="LEFT"/>getSymbolsOfType(t: type): List[T]<br ALIGN="LEFT"/>getTypedSymbolNames(localOnly): List[str]<br ALIGN="LEFT"/>getTypedSymbols(localOnly): List[TypedSymbol]<br ALIGN="LEFT"/>indexOfChild(child: Symbol): int<br ALIGN="LEFT"/>lastChild(): Optional[Symbol]<br ALIGN="LEFT"/>nextOf(child: Symbol): Optional[Symbol]<br ALIGN="LEFT"/>nextSiblingOf(child: Symbol): Optional[Symbol]<br ALIGN="LEFT"/>previousSiblingOf(child: Symbol): Optional[Symbol]<br ALIGN="LEFT"/>removeSymbol(symbol: Symbol): None<br ALIGN="LEFT"/>resolve(name: str, localOnly): Optional[Symbol]<br ALIGN="LEFT"/>resolveSync(name: str, localOnly): Optional[Symbol]<br ALIGN="LEFT"/>symbolFromPath(path: str, separator): Optional[Symbol]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.Symbol" [color="black", fontcolor="black", label=<{Symbol|configuration : list<br ALIGN="LEFT"/>context : NoneType<br ALIGN="LEFT"/>context : Optional[ParseTree]<br ALIGN="LEFT"/>modifiers<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>visibility<br ALIGN="LEFT"/>|firstSibling(): Symbol<br ALIGN="LEFT"/>getParentOfType(t: type): Optional[T]<br ALIGN="LEFT"/>lastSibling(): Symbol<br ALIGN="LEFT"/>next(): Optional[Symbol]<br ALIGN="LEFT"/>nextSibling(): Optional[Symbol]<br ALIGN="LEFT"/>parent(): Optional[Symbol]<br ALIGN="LEFT"/>previousSibling(): Optional[Symbol]<br ALIGN="LEFT"/>qualifiedName(separator, full, includeAnonymous): str<br ALIGN="LEFT"/>removeFromParent(): None<br ALIGN="LEFT"/>resolve(name: str, localOnly: bool): Optional[Symbol]<br ALIGN="LEFT"/>resolveSync(name: str, localOnly): Optional[Symbol]<br ALIGN="LEFT"/>root(): Optional[Symbol]<br ALIGN="LEFT"/>setParent(parent: Optional[Symbol]): None<br ALIGN="LEFT"/>symbolPath(): List[Symbol]<br ALIGN="LEFT"/>symbolTable(): Optional[SymbolTable]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.SymbolTable" [color="black", fontcolor="black", label=<{SymbolTable|dependencies : Set[SymbolTable]<br ALIGN="LEFT"/>dependencies : set<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>|addDependencies()<br ALIGN="LEFT"/>addNewNamespaceFromPath(parent: Optional[ScopedSymbol], path: str, delimiter): NamespaceSymbol<br ALIGN="LEFT"/>addNewNamespaceFromPathSync(parent: Optional[ScopedSymbol], path: str, delimiter): NamespaceSymbol<br ALIGN="LEFT"/>addNewSymbolOfType(t: type, parent: Optional[ScopedSymbol]): T<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>getAllSymbols(t: type, localOnly): List[T]<br ALIGN="LEFT"/>getAllSymbolsSync(t: type, localOnly): List[T]<br ALIGN="LEFT"/>info()<br ALIGN="LEFT"/>removeDependency(table: SymbolTable)<br ALIGN="LEFT"/>resolve(name: str, localOnly): Optional[Symbol]<br ALIGN="LEFT"/>resolveSync(name: str, localOnly): Optional[Symbol]<br ALIGN="LEFT"/>symbolWithContext(context: ParseTree): Optional[Symbol]<br ALIGN="LEFT"/>symbolWithContextSync(context: ParseTree): Optional[Symbol]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.SymbolTableInfo" [color="black", fontcolor="black", label=<{SymbolTableInfo|dependencyCount : int<br ALIGN="LEFT"/>symbolCount : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.SymbolTableOptions" [color="black", fontcolor="black", label=<{SymbolTableOptions|allowDuplicateSymbols : Optional[bool]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" [color="black", fontcolor="black", label=<{Type|baseTypes : List[Type]<br ALIGN="LEFT"/>kind<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>reference<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypeAlias" [color="black", fontcolor="black", label=<{TypeAlias|<br ALIGN="LEFT"/>|baseTypes(): List[Type]<br ALIGN="LEFT"/>kind(): TypeKind<br ALIGN="LEFT"/>reference(): ReferenceKind<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypeKind" [color="black", fontcolor="black", label=<{TypeKind|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypedSymbol" [color="black", fontcolor="black", label=<{TypedSymbol|attached_type : Optional[Type]<br ALIGN="LEFT"/>attached_type : Optional[Type]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.Unit" [color="black", fontcolor="black", label=<{Unit|baseTypes : List[Unit]<br ALIGN="LEFT"/>kind<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>prefix<br ALIGN="LEFT"/>reference<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitKind" [color="black", fontcolor="black", label=<{UnitKind|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitPrefix" [color="black", fontcolor="black", label=<{UnitPrefix|Atto : int<br ALIGN="LEFT"/>Centi : int<br ALIGN="LEFT"/>Deca : int<br ALIGN="LEFT"/>Deci : int<br ALIGN="LEFT"/>Exa : int<br ALIGN="LEFT"/>Femto : int<br ALIGN="LEFT"/>Giga : int<br ALIGN="LEFT"/>Hecto : int<br ALIGN="LEFT"/>Kilo : int<br ALIGN="LEFT"/>Mega : int<br ALIGN="LEFT"/>Micro : int<br ALIGN="LEFT"/>Mili : int<br ALIGN="LEFT"/>Nano : int<br ALIGN="LEFT"/>NoP : int<br ALIGN="LEFT"/>Peta : int<br ALIGN="LEFT"/>Pico : int<br ALIGN="LEFT"/>Quecto : int<br ALIGN="LEFT"/>Quetta : int<br ALIGN="LEFT"/>Ronna : int<br ALIGN="LEFT"/>Ronto : int<br ALIGN="LEFT"/>Tera : int<br ALIGN="LEFT"/>Yocto : int<br ALIGN="LEFT"/>Yotta : int<br ALIGN="LEFT"/>Zepto : int<br ALIGN="LEFT"/>Zetta : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitSymbol" [color="black", fontcolor="black", label=<{UnitSymbol|attached_description : Optional[str]<br ALIGN="LEFT"/>attached_description : str<br ALIGN="LEFT"/>attached_unit<br ALIGN="LEFT"/>attached_unit : Optional[Unit]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.VariableSymbol" [color="black", fontcolor="black", label=<{VariableSymbol|is_tree<br ALIGN="LEFT"/>is_tree : bool<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.classproperty" [color="black", fontcolor="black", label=<{classproperty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ArraySymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Symbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ArrayType" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Symbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ArrayType" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.BlockSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ClassSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ClassSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.EnumSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Symbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.FieldSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.VariableSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.FundamentalType" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.FundamentalUnit" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Unit" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.GroupSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.InterfaceSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.InterfaceSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.LiteralSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.MethodSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.RoutineSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.NamespaceSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ParameterSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.VariableSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.RoutineSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Symbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.SymbolTable" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ScopedSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypeAlias" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Symbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypeAlias" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypedSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Symbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypedSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.VariableSymbol" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitSymbol" [arrowhead="empty", arrowtail="none"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.MemberVisibility" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Symbol" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="visibility", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ReferenceKind" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ArrayType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__referenceKind", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ReferenceKind" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ClassSymbol" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reference", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ReferenceKind" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.InterfaceSymbol" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reference", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ReferenceKind" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reference", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ReferenceKind" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Unit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reference", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.SymbolTableOptions" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.SymbolTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="options", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypeAlias" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__targetType", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypeKind" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kind", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitKind" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Unit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kind", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitPrefix" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.Unit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prefix", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.ReferenceKind" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ArrayType" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__referenceKind", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.SymbolTableOptions" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.SymbolTable" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="options", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.ArrayType" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_elementType", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.Type" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.TypeAlias" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__targetType", style="solid"];
"cp-dsl.dclLSPServer.symbolTable.SymbolTable.Unit" -> "cp-dsl.dclLSPServer.symbolTable.SymbolTable.UnitSymbol" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="attached_unit", style="solid"];
}
