
grammar org.oceandsl.BgcDsl with org.eclipse.xtext.common.Terminals
generate bgcDsl "http://www.oceandsl.org/BgcDsl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

BgcModel:
	{BgcModel}
	'model' name=ID
	'substances' substanceDeclarations+=SubstanceDeclaration+
	('parameters' parameterDeclarations+=ParameterDeclaration*)?
	('diagnostics' evnironments+=EnvironmentVariableDeclaration*)?
	(compartments+=Compartment|connections+=Connection)+
;

SubstanceDeclaration:
	type=PrimitiveTypes name=ID unit=Unit
;

ParameterDeclaration:
	type=PrimitiveTypes name=ID unit=Unit "=" expression=ArithmeticExpression
;

EnvironmentVariableDeclaration:
	type=PrimitiveTypes name=ID unit=Unit ("=" expression=ArithmeticExpression)?
;

PrimitiveTypes:
	"int" | "float" | "string"
;

Compartment: 
	(abstract?='abstract')? 'compartment' name=ID ('extends' parent=[Compartment|ID])? '{'
		'states' states+=SubstanceState+
		('parameters' constants+=ParameterDeclaration*)?
		('diagnostics' evnironments+=EnvironmentVariableDeclaration*)?
		
		calculations+=Calculation*
		updateStates+=UpdateState+
	'}'
;

SubstanceState:
	substance=[SubstanceDeclaration|ID] ("=" expression=ArithmeticExpression)?
;

UpdateState:
    'update' state=[SubstanceState|ID] "=" expression=ArithmeticExpression
;

Connection:
	'connection' name=ID ('(' substances+=[SubstanceDeclaration|ID] (',' substances+=[SubstanceDeclaration|ID])* ')')? 
	'from' sourceCompartment=[Compartment|ID] 'to' targetCompartment=[Compartment|ID] ("=" expression=ArithmeticExpression | 
	'{' (substanceExpressions+=SubstanceExpression | calculations+=Calculation)* '}')
;

SubstanceExpression:
	substance=[SubstanceDeclaration|ID] '=' expression=ArithmeticExpression
;

Calculation: BasicCalculation | AlternativeCalculation;

BasicCalculation:
	'calc' name=ID "=" expression=ArithmeticExpression
;

AlternativeCalculation:
	'alternatives' name=ID ':' expression=ArithmeticExpression '{'
		alternatives+=BasicCalculation*
	'}'
;

// ----------------------
// Units
// ----------------------

Unit: 
	':' elements+=UnitElement+ | 
	{Unit} '::'
;

UnitElement:
	PrefixUnit | GroupUnit
;

GroupUnit: {GroupUnit}
	'(' elements+=UnitElement* ')' ("^" exponent=NUMBER)?
;

PrefixUnit:
	(unit=UNIT_STRING | custom=CUSTOM_STRING) (substance=[SubstanceDeclaration|ID])? ("^" exponent=NUMBER)?
;

// ----------------------
// Expression definitions
// ----------------------

ArithmeticExpression returns Expression:
	MultiplicationExpression ->({ArithmeticExpression.left=current} operator=EAdditionOperator right=ArithmeticExpression)?
;

enum EAdditionOperator returns EAdditionOperator:
	ADDITION = "+" |
	SUBTRACTION = "-"
;

MultiplicationExpression returns Expression:
	PowerExpression ->({MultiplicationExpression.left=current} operator=EMultiplicationOperator right=MultiplicationExpression)?
;

enum EMultiplicationOperator returns EMultiplicationOperator:
	MULTIPLICATION = "*" |
	DIVISION = "/" |
	MODULO = "%" 
;

PowerExpression returns Expression:
	ValueExpression ->({PowerExpression.left=current} "^" right=ValueExpression)?
;


ValueExpression: 
	ArrayExpression |
	FunctionCallingExpression |
	LiteralExpression |
	ParenthesisExpression |
	TermReference 	
;


ArrayExpression:
	'[' expressions+=ArithmeticExpression (',' expressions+=ArithmeticExpression)* ']'
;

FunctionCallingExpression: type=EFunction '(' expressions+= ArithmeticExpression(',' expressions+= ArithmeticExpression)* ')'; 
enum EFunction:
	exp = 'exp' | inverse = 'inverse' | max = 'max'
;

LiteralExpression:
	value=Literal
;

Literal:
	NumberLiteral | 
	StringLiteral
;
	
NumberLiteral:
	value=NUMBER 
;

StringLiteral:
	value=STRING
;

terminal NUMBER returns ecore::EBigDecimal:
	("-")?('0'..'9')* ('.' ('0'..'9')+)?
;
	
terminal CUSTOM_STRING returns ecore::EString:
	"#"('A' .. 'Z'|'a'..'z')+	
;

terminal UNIT_STRING returns ecore::EString:
	("Q"|"R"|"Y"|"Z"|"E"|"P"|"T"|"G"|"M"|"k"|"h"|"da"|"d"|"c"|"m"|"my"|"n"|"p"|"f"|"a"|"z"|"y"|"r"|"q")?("s"|"m"|"g"|"mol"|"cd"|"W"|"J"|"K"|"A")
;

ParenthesisExpression:
	'(' expression=ArithmeticExpression ')'
;

TermReference:
	(sourceCompartment=[Compartment | ID] '>')?  (targetCompartment=[Compartment | ID] ':')? reference=[Term | QualifiedName]
;

Term: 
	name=ID
; 

Subterm returns Term: 
	UpdateState | Connection | ParameterDeclaration | Calculation | EnvironmentVariableDeclaration | SubstanceExpression | SubstanceState
; 

QualifiedName:
	ID ('.' ID)*
;

@Override
terminal INT returns ecore::EInt:
	'this one has been deactivated';
